{"file_contents":{"BROWSER_EXTENSION_SPEC.md":{"content":"# üåê Replivo Browser Extension Architecture\n\n## Overview\nBrowser-first implementation using Chrome extension + cloud orchestrator for immediate web automation capabilities. This approach provides real value while building toward full device control.\n\n## Architecture Components\n\n### 1. Frontend Web UI\n- Enhanced hiring flow with extension installation\n- Permission screens with per-domain consent\n- \"Your Hired Agents\" dashboard with live status\n- Voice control interface for conversational commands\n- Kill switch and audit log viewer\n\n### 2. Cloud Orchestrator (Server)\n- LLM planner using private API keys (server-side only)\n- Policy engine for permission checking\n- Command signer with JWT/asymmetric signing\n- WebSocket server for real-time communication\n- Audit logging and user account management\n\n### 3. Browser Extension (Chrome MV3)\n- Background service worker for command handling\n- Content scripts for DOM manipulation\n- Popup for status and quick controls\n- Options page for per-domain permissions\n- Secure pairing with server authentication\n\n## User Experience Flow\n\n### Hiring Process\n```\n1. User clicks \"Hire Now\" on sub-agent\n2. Login/Signup (if needed)\n3. Company details form (minimal)\n4. Permission screen with examples:\n   \n   [AgentName] is requesting:\n   ‚Ä¢ Browse on your behalf (open pages, click links)\n     Example: \"Open CRM dashboard and search ticket #123\"\n   ‚Ä¢ Fill and submit forms on allowed domains\n     Example: \"Log into CRM page and update ticket\"\n   ‚Ä¢ Read page content (DOM) on allowed domains\n     Example: \"Extract order ID and status\"\n   ‚Ä¢ Download/upload files (browser downloads)\n     Example: \"Download invoice.pdf and attach to email\"\n   ‚Ä¢ Capture screenshots (optional)\n     Example: \"Take screenshot of confirmation page\"\n   \n   Choose autonomy: [Suggest] [Confirm] [Autonomous]\n   \n   [Run Safe Demo] [Accept & Install Extension]\n\n5. Extension installation and pairing\n6. Per-site consent for specific domains\n7. Safe demo execution\n8. Agent activated and working\n```\n\n## Command Schema\n\n### Signed Command Structure\n```json\n{\n  \"request_id\": \"req-abc-123\",\n  \"agent_id\": \"ops.customer_success_manager\", \n  \"issued_at\": \"2025-08-21T12:00:00Z\",\n  \"capability\": \"fill_and_submit\",\n  \"args\": {\n    \"tabId\": 123,\n    \"url\": \"https://crm.example.com/ticket/428\",\n    \"selectors\": { \n      \"replyBox\": \"#reply\", \n      \"submitBtn\": \".send\" \n    },\n    \"values\": { \n      \"replyBox\": \"Thanks ‚Äî we've scheduled your shipment.\" \n    },\n    \"submit\": true\n  },\n  \"expiry\": \"2025-08-21T12:05:00Z\",\n  \"signature\": \"BASE64_SIGNATURE\"\n}\n```\n\n## Extension Capabilities\n\n### Core Actions\n- **open_url**: Create new tabs, navigate to URLs\n- **fill_form**: Fill input fields using CSS selectors\n- **click_selector**: Click buttons, links, elements\n- **extract_content**: Read DOM content and data\n- **take_screenshot**: Capture page visuals (with consent)\n- **download_file**: Save files to user's downloads\n- **upload_file**: Select and upload files from local system\n\n### Security Features\n- Command signature verification\n- Per-domain permission enforcement  \n- Expiry-based replay attack prevention\n- Rate limiting and session management\n- Audit logging of all actions\n\n## Voice Integration\n\n### Voice Command Flow\n```\n1. User speaks: \"Hey Replivo, update ticket #123 with shipment info\"\n2. WebRTC streams audio to server STT\n3. LLM interprets intent and plans actions:\n   - Open CRM ticket page\n   - Extract shipment details\n   - Fill update form\n   - Submit changes\n4. Server asks for confirmation (voice/visual)\n5. User approves: \"Yes, do it\"\n6. Commands sent to extension for execution\n7. Agent reports back: \"Ticket updated successfully\"\n```\n\n## Implementation Priority\n\n### Phase 1: Foundation (Week 1-2)\n- [ ] Enhanced server with command signing\n- [ ] Basic Chrome extension with pairing\n- [ ] Permission system and consent UI\n- [ ] WebSocket communication channel\n\n### Phase 2: Core Actions (Week 3-4) \n- [ ] DOM manipulation capabilities\n- [ ] Form filling and submission\n- [ ] Content extraction and reading\n- [ ] Screenshot capture (optional)\n\n### Phase 3: Voice & Intelligence (Week 5-6)\n- [ ] WebRTC voice interface\n- [ ] LLM planning and command generation\n- [ ] Conversational interaction\n- [ ] Advanced error handling\n\n### Phase 4: Production Ready (Week 7-8)\n- [ ] Chrome Web Store publication\n- [ ] Enterprise security features\n- [ ] Comprehensive audit logging\n- [ ] Beta user testing and feedback\n\n## Security Requirements\n\n### Server-Side Security\n- LLM API keys stored as environment variables only\n- Asymmetric command signing (RS256)\n- JWT-based extension authentication\n- Rate limiting and abuse detection\n- Comprehensive audit trails\n\n### Extension Security\n- Minimal host permissions (user-granted only)\n- Command signature verification\n- Per-domain consent enforcement\n- Local storage encryption for sensitive data\n- Automatic token expiry and refresh\n\n### User Safety\n- Explicit consent for every capability\n- Per-domain permission granularity\n- Immediate kill switch in popup and web UI\n- Transparency in planned actions\n- Rollback capability where possible\n\n## Example Scenario: Customer Success Manager\n\n```\n1. User hires \"Customer Success Manager\" agent\n2. Grants permissions for CRM domain (crm.example.com)\n3. Agent receives task: \"Follow up on overdue invoice\"\n4. LLM plans steps:\n   - Open customer record\n   - Check payment status\n   - Draft follow-up email\n   - Schedule reminder call\n5. Extension executes commands:\n   - chrome.tabs.create({url: \"crm.example.com/customer/123\"})\n   - Fill email template with customer details\n   - Create calendar event for follow-up\n6. Agent reports: \"Follow-up sent, call scheduled for tomorrow 2pm\"\n```\n\nThis browser-first approach provides immediate value while maintaining security and building toward full device automation capabilities.","size_bytes":5865},"DEPLOY_TO_GITHUB.md":{"content":"# üöÄ Deploy Replivo to GitHub\n\n## Quick Deploy Commands\n\n```bash\n# Initialize git repository\ngit init\n\n# Add all files\ngit add .\n\n# Create initial commit\ngit commit -m \"feat: Complete Replivo AI Agent Marketplace with Browser Extension\"\n\n# Add GitHub repository (replace with your repo)\ngit remote add origin https://github.com/yourusername/replivo.git\n\n# Push to GitHub\ngit push -u origin main\n```\n\n## Repository Structure\n\nYour Replivo repository includes:\n\n### üìÅ Core Application\n```\n‚îú‚îÄ‚îÄ client/                 # React frontend application\n‚îú‚îÄ‚îÄ server/                 # Express.js backend API\n‚îú‚îÄ‚îÄ shared/                 # Shared TypeScript schemas\n‚îú‚îÄ‚îÄ chrome-extension/       # Browser extension for automation\n‚îî‚îÄ‚îÄ attached_assets/        # Documentation and assets\n```\n\n### üìÅ Documentation\n```\n‚îú‚îÄ‚îÄ README.md              # Main project documentation\n‚îú‚îÄ‚îÄ BROWSER_EXTENSION_SPEC.md    # Extension technical specs\n‚îú‚îÄ‚îÄ DEVICE_CONTROL_ROADMAP.md    # Future development roadmap\n‚îú‚îÄ‚îÄ IMPLEMENTATION_PLAN.md       # Detailed implementation guide\n‚îú‚îÄ‚îÄ DEPLOY_TO_GITHUB.md         # This deployment guide\n‚îî‚îÄ‚îÄ replit.md              # Project architecture overview\n```\n\n## Project Highlights\n\n### ‚ú® What's Included\n\n#### üéØ AI Agent Marketplace\n- **Modern React Frontend** with TypeScript and Tailwind CSS\n- **Interactive Agent Discovery** with live previews and sandbox testing\n- **Enhanced Visual Effects** including particle systems and smooth animations\n- **Companion Avatars** with dynamic expressions and voice interaction\n- **Professional UI/UX** built with shadcn/ui components\n\n#### üîß Backend Infrastructure\n- **Express.js API** with TypeScript for type safety\n- **In-Memory Storage** with sample data for immediate demo\n- **RESTful Architecture** with modular route organization\n- **WebSocket Support** for real-time communication\n\n#### üåê Browser Extension Platform\n- **Chrome Extension** with secure command execution\n- **WebSocket Communication** for real-time agent commands\n- **Command Signing** with JWT verification for security\n- **Permission System** with granular domain-based controls\n- **Extension Setup Flow** integrated into hiring process\n\n#### üìä Advanced Features\n- **Live Task Previews** showing agents working in real-time\n- **Sandbox Testing** for safe agent evaluation\n- **Voice Integration** foundations for conversational AI\n- **Audit Logging** for complete action traceability\n- **Kill Switch** for immediate agent termination\n\n### üèóÔ∏è Technical Architecture\n\n#### Frontend Stack\n- **React 18** with functional components and hooks\n- **Vite** for fast development and optimized builds\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management\n- **Framer Motion** for advanced animations\n- **Tailwind CSS** with custom design system\n\n#### Backend Stack\n- **Node.js + Express** for server-side logic\n- **TypeScript** for enhanced developer experience\n- **Drizzle ORM** ready for PostgreSQL integration\n- **WebSocket Server** for extension communication\n- **JWT** for secure command signing\n\n#### Browser Extension\n- **Chrome Manifest V3** for modern extension architecture\n- **Service Worker** for background command processing\n- **Content Scripts** for page manipulation\n- **Popup Interface** for user control and monitoring\n- **Secure Communication** with cryptographic verification\n\n## Environment Variables\n\nCreate `.env` file for production:\n\n```bash\n# Database (when switching from in-memory)\nDATABASE_URL=your_postgresql_url\n\n# Security\nJWT_SECRET=your_jwt_secret_key\nCOMMAND_PRIVATE_KEY=your_rsa_private_key\n\n# External APIs (for future integrations)\nOPENAI_API_KEY=your_openai_key\nGOOGLE_OAUTH_CLIENT_ID=your_google_client_id\n```\n\n## Deployment Options\n\n### üåê Replit (Current)\n```bash\n# Already deployed and running\n# Access at: https://your-repl-name.replit.app\n```\n\n### ‚òÅÔ∏è Vercel\n```bash\nnpm install -g vercel\nvercel --prod\n```\n\n### üöÄ Netlify\n```bash\nnpm run build\n# Deploy dist/ folder to Netlify\n```\n\n### üê≥ Docker\n```bash\n# Build container\ndocker build -t replivo .\n\n# Run container\ndocker run -p 5000:5000 replivo\n```\n\n## Browser Extension Deployment\n\n### Chrome Web Store\n1. **Package Extension**\n   ```bash\n   cd chrome-extension/\n   zip -r replivo-helper.zip *\n   ```\n\n2. **Submit to Store**\n   - Visit [Chrome Developer Dashboard](https://chrome.google.com/webstore/devconsole/)\n   - Upload replivo-helper.zip\n   - Fill in store listing details\n   - Submit for review\n\n3. **Code Signing** (Production)\n   - Get code signing certificate\n   - Sign extension package\n   - Update manifest with public key\n\n## GitHub Repository Setup\n\n### Repository Configuration\n\n1. **Create Repository**\n   ```bash\n   # Create new repository on GitHub\n   # Name: replivo\n   # Description: Advanced AI Agent Marketplace with Browser Automation\n   ```\n\n2. **Repository Settings**\n   - ‚úÖ Issues enabled\n   - ‚úÖ Wiki enabled  \n   - ‚úÖ Projects enabled\n   - ‚úÖ Discussions enabled\n\n3. **Branch Protection**\n   ```bash\n   # Protect main branch\n   # Require pull request reviews\n   # Require status checks\n   ```\n\n### README Badges\n\nAdd to your GitHub README.md:\n\n```markdown\n![React](https://img.shields.io/badge/React-18-blue)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0-blue)\n![Express](https://img.shields.io/badge/Express-4.18-green)\n![Chrome Extension](https://img.shields.io/badge/Chrome-Extension-orange)\n![License](https://img.shields.io/badge/License-MIT-yellow)\n```\n\n## Development Workflow\n\n### Local Development\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Server runs on http://localhost:5000\n```\n\n### Extension Development\n```bash\n# Load extension in Chrome\n# 1. Open chrome://extensions/\n# 2. Enable Developer mode\n# 3. Click \"Load unpacked\"\n# 4. Select chrome-extension/ folder\n```\n\n### Production Build\n```bash\n# Build for production\nnpm run build\n\n# Test production build\nnpm start\n```\n\n## Project Roadmap\n\n### Phase 1: Complete ‚úÖ\n- Modern AI agent marketplace\n- Browser extension foundation\n- Secure command system\n- Interactive UI with effects\n\n### Phase 2: Advanced Features üöß\n- Voice-first interaction\n- OAuth service integrations\n- Advanced agent capabilities\n- Enterprise security features\n\n### Phase 3: Scale & Growth üìà\n- Multi-platform support\n- Advanced analytics\n- Team collaboration\n- Enterprise deployment\n\n## Support & Community\n\n### Documentation\n- **Technical Specs**: See `BROWSER_EXTENSION_SPEC.md`\n- **Roadmap**: See `DEVICE_CONTROL_ROADMAP.md`\n- **Implementation**: See `IMPLEMENTATION_PLAN.md`\n\n### Contributing\n```bash\n# Fork repository\n# Create feature branch\n# Submit pull request\n```\n\n### License\nMIT License - see LICENSE file for details\n\n---\n\nüéâ **Congratulations!** You now have a complete AI agent marketplace with browser automation capabilities ready for GitHub deployment. The project demonstrates modern web development practices, security-first architecture, and innovative AI agent integration.","size_bytes":7078},"DEVICE_CONTROL_ROADMAP.md":{"content":"# ü§ñ Replivo Device Control Roadmap\n\n## Phase 1: Current State ‚úÖ\n- ‚úÖ AI Agent Marketplace with discovery and hiring\n- ‚úÖ Interactive UI with live previews and sandbox testing\n- ‚úÖ Enhanced visual effects and animations\n- ‚úÖ Modern tech stack (React + Express + TypeScript)\n- ‚úÖ Professional design and user experience\n\n## Phase 2: Foundation for Device Control üöß\n\n### 2.1 Cloud Orchestrator Enhancement\n- [ ] **LLM Planner Integration**: Task planning and decomposition\n- [ ] **Policy Engine**: Granular permission management system\n- [ ] **Secure Command API**: mTLS WebSocket for helper communication\n- [ ] **Audit System**: Immutable action logging with timestamps\n- [ ] **User Account System**: Enhanced user management and company profiles\n\n### 2.2 Permission & Scope System\n- [ ] **Permission Model**: Granular scopes (email:send, calendar:create, browser:fill, files:read, system.input)\n- [ ] **Autonomy Levels**: \n  - Suggest (propose actions only)\n  - Confirm (batch approval)\n  - Autonomous (scoped auto-execution)\n- [ ] **Time-limited Tokens**: Automatic expiration and daily/weekly limits\n- [ ] **Permission UI**: Clear consent screens with examples\n\n### 2.3 Enhanced Hiring Flow\n```\nUser clicks \"Hire Now\" \n‚Üí Login/Signup (if needed)\n‚Üí Company Details Form\n‚Üí Permissions & Scope Screen (MANDATORY)\n  - Show requested capabilities with examples\n  - Autonomy level selection\n  - Demo action button\n‚Üí Helper Installation (if not installed)\n‚Üí Payment & Confirmation\n‚Üí Agent added to dashboard\n```\n\n## Phase 3: Local Device Control üîÑ\n\n### 3.1 Local Helper Development\n**Core Requirements:**\n- [ ] **Cross-Platform Support**: macOS, Windows, Linux implementations\n- [ ] **Code Signing**: Notarized packages for security\n- [ ] **System Integration**: Keyboard, mouse, files, applications\n- [ ] **Browser Extension**: Web-only automation companion\n- [ ] **Secure Communication**: mTLS WebSocket with client certificates\n\n**Platform-Specific Implementation:**\n- [ ] **macOS**: Notarized .pkg/.app, Accessibility API, AppleScript/AXUI\n- [ ] **Windows**: Signed installer, UAC elevation, UIAutomation/PowerShell\n- [ ] **Linux**: Packaged snaps/debs, desktop environment compatibility\n- [ ] **Browser Extension**: Chrome/Edge/Firefox with native messaging\n\n### 3.2 Security & Hardening\n- [ ] **Command Whitelisting**: Helper executes only signed command types\n- [ ] **Rate Limiting**: Per-session and per-action limits\n- [ ] **Local Sandbox**: ACL-style path selections for file operations\n- [ ] **Auto-Updates**: Signature verification for helper updates\n- [ ] **Privacy Controls**: Encrypted local logs, optional screenshot consent\n\n## Phase 4: Voice-First Interaction üé§\n\n### 4.1 Voice Engine\n- [ ] **STT Pipeline**: Speech-to-text (cloud or local for privacy)\n- [ ] **TTS Pipeline**: Text-to-speech with low latency\n- [ ] **WebRTC Integration**: Real-time audio streaming\n- [ ] **Conversational Engine**: LLM-based intent parsing\n\n### 4.2 Voice UX\n- [ ] **Push-to-Talk**: Microphone activation system\n- [ ] **Live Transcription**: Real-time speech display\n- [ ] **Action Preview**: Show planned actions before execution\n- [ ] **Voice Confirmation**: Spoken approval for actions\n\n**Example Flow:**\n```\nUser: \"Hey Replivo, call the customer and confirm shipment\"\n‚Üí STT converts to text\n‚Üí LLM plans: \"I will call John at 2pm and send follow-up email\"\n‚Üí User confirms via voice or click\n‚Üí Orchestrator issues commands to helper\n```\n\n## Phase 5: Advanced Features üöÄ\n\n### 5.1 Enhanced Dashboard\n- [ ] **Live Action Feed**: Streaming text log with optional screenshots\n- [ ] **Agent Status**: Idle / Running / Needs Approval / Paused\n- [ ] **Kill Switch**: Immediate stop for all agents (UI + system tray)\n- [ ] **Permission Panel**: Real-time scope management per agent\n\n### 5.2 Integration Layer\n- [ ] **OAuth Integrations**: Gmail, Calendar, Drive, Slack, HubSpot\n- [ ] **API Adapters**: Standardized interfaces for external services\n- [ ] **Webhook Support**: Real-time notifications and triggers\n- [ ] **Custom Connectors**: User-defined integration points\n\n## Phase 6: Enterprise & Compliance üìã\n\n### 6.1 Safety & Audit\n- [ ] **Immutable Audit Log**: All actions with hash verification\n- [ ] **Screenshot System**: Opt-in visual confirmation\n- [ ] **Action Rollback**: Revert capability where possible\n- [ ] **Anomaly Detection**: Automatic stopping for suspicious behavior\n\n### 6.2 Compliance\n- [ ] **GDPR/CCPA Compliance**: Data minimization and user rights\n- [ ] **Consent Management**: Timestamped permission records\n- [ ] **Critical Action Gates**: Manual confirmation for payments, mass emails\n- [ ] **Insurance & Liability**: Legal framework for automated actions\n\n## Command Schema Example\n\n```json\n{\n  \"request_id\": \"req-123\",\n  \"agent_id\": \"growth.campaign_master\", \n  \"capability\": \"browser.fill_and_submit\",\n  \"args\": {\n    \"url\": \"https://ads.example.com/campaign\",\n    \"selectors\": {\"title\":\"#title\",\"budget\":\"#budget\"}, \n    \"values\": {\"title\":\"Promo\",\"budget\":\"500\"}\n  },\n  \"policy\": {\n    \"autonomy\": \"confirm\",\n    \"expiry\": \"2025-09-01T12:00:00Z\"\n  }\n}\n```\n\n## Permission Screen Copy\n\n```\nReplivo requests permission to help you automatically. Please review:\n\n‚Ä¢ Email (send/draft): Replivo will draft and send emails on your behalf. \n  Example: \"Send invoice to client@company.com\"\n\n‚Ä¢ Calendar (create/update): Replivo can schedule and modify meetings. \n  Example: \"Book follow-up call at 10am\"\n\n‚Ä¢ Browser control (open pages, fill forms): Replivo can perform actions in browser tabs you approve\n\n‚Ä¢ Files (read/write) only in folders you select\n\nChoose Autonomy: [Suggest] [Confirm] [Autonomous (critical actions need approval)]\n\n[Run safe demo] [I Understand & Install Helper]\n```\n\n## MVP Implementation Strategy\n\n### Start with OAuth + Browser Extension\n1. Implement OAuth integrations (Gmail, Calendar, etc.)\n2. Build browser extension for web automation\n3. Add voice interface for conversational control\n4. Test flows with simulated actions\n5. Gradually introduce local helper capabilities\n\n### Development Phases\n1. **Foundation** (4-6 weeks): Enhanced orchestrator, permission system\n2. **Browser Extension** (3-4 weeks): Web automation capabilities\n3. **Voice Interface** (3-4 weeks): STT/TTS integration\n4. **Local Helper** (6-8 weeks): Cross-platform device control\n5. **Enterprise Features** (4-6 weeks): Audit, compliance, advanced security\n\n## Security Priorities\n\n1. **Signed Code**: All helpers must be code-signed and notarized\n2. **Granular Permissions**: Never request more access than needed\n3. **User Consent**: Explicit approval for every capability\n4. **Kill Switch**: Always available emergency stop\n5. **Audit Trail**: Complete action logging for accountability\n6. **Time Limits**: Automatic expiration of permissions\n\n## Next Immediate Steps\n\n1. **Update Current Codebase**: Add permission system foundation\n2. **Design Database Schema**: Store user permissions and audit logs  \n3. **Build Permission UI**: Implement consent screens\n4. **OAuth Integration**: Start with Gmail/Calendar APIs\n5. **Voice Prototype**: Basic STT/TTS implementation\n\nThis roadmap transforms Replivo from a marketplace into a comprehensive AI automation platform with real device control capabilities while maintaining security and user trust.","size_bytes":7317},"IMPLEMENTATION_PLAN.md":{"content":"# üöÄ Replivo Implementation Plan\n\n## Current Status: Enhanced Marketplace Complete ‚úÖ\n\nWe have successfully built a modern AI agent marketplace with:\n- Interactive agent cards with live previews\n- Companion avatars and sandbox testing\n- Advanced visual effects and animations  \n- Professional UI/UX with modern tech stack\n- Type-safe development with TypeScript\n- Scalable architecture with React + Express\n\n## Next Phase: Device Control Foundation\n\nBased on the provided technical specification, here's the immediate implementation plan:\n\n### Week 1-2: Permission System Foundation\n\n#### 1. Enhanced Database Schema\n```typescript\n// Add to shared/schema.ts\nexport const permissions = pgTable(\"permissions\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull(),\n  agentId: text(\"agent_id\").notNull(),\n  scope: text(\"scope\").notNull(), // email:send, calendar:create, etc.\n  autonomyLevel: text(\"autonomy_level\").notNull(), // suggest, confirm, autonomous\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  revokedAt: timestamp(\"revoked_at\")\n});\n\nexport const auditLog = pgTable(\"audit_log\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull(),\n  agentId: text(\"agent_id\").notNull(),\n  action: text(\"action\").notNull(),\n  capability: text(\"capability\").notNull(),\n  args: json(\"args\"),\n  result: json(\"result\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  hash: text(\"hash\").notNull() // For immutability verification\n});\n```\n\n#### 2. Permission Management API\n```typescript\n// server/routes/permissions.ts\nexport const permissionRoutes = {\n  // GET /api/permissions/:userId - Get user permissions\n  // POST /api/permissions - Grant new permission\n  // DELETE /api/permissions/:id - Revoke permission\n  // POST /api/permissions/batch - Bulk permission management\n}\n```\n\n#### 3. Enhanced Hiring Flow UI\nCreate components:\n- `PermissionConsentScreen.tsx` - Detailed permission request with examples\n- `AutonomyLevelSelector.tsx` - Choose agent autonomy level\n- `HelperInstallGuide.tsx` - Helper installation instructions\n- `DemoActionRunner.tsx` - Safe action demonstration\n\n### Week 3-4: Voice Interface Foundation\n\n#### 1. WebRTC Audio Streaming\n```typescript\n// client/src/components/voice-interface.tsx\nexport function VoiceInterface() {\n  // WebRTC setup for real-time audio\n  // Push-to-talk functionality\n  // Live transcription display\n  // Action preview system\n}\n```\n\n#### 2. STT/TTS Integration\n```typescript\n// server/voice/\n- speech-to-text.ts     // Cloud STT service integration\n- text-to-speech.ts     // Cloud TTS service integration  \n- conversation-engine.ts // LLM-based intent parsing\n- voice-commands.ts     // Voice command processing\n```\n\n#### 3. Conversational Agent Logic\n```typescript\n// Enhanced agent system for voice interaction\nexport class ConversationalAgent {\n  async processVoiceInput(audioStream: Buffer): Promise<ActionPlan>\n  async generateVoiceResponse(text: string): Promise<AudioBuffer>\n  async planActions(intent: string): Promise<Action[]>\n}\n```\n\n### Week 5-6: OAuth Integration Layer\n\n#### 1. Service Integrations\n```typescript\n// server/integrations/\n- gmail.ts       // Email sending/drafting\n- calendar.ts    // Meeting scheduling\n- drive.ts       // File management\n- slack.ts       // Team communication\n- hubspot.ts     // CRM operations\n```\n\n#### 2. OAuth Flow Implementation\n```typescript\n// Enhanced user authentication with OAuth scopes\nexport const oauthRoutes = {\n  // Google Workspace integration\n  // Microsoft 365 integration\n  // Slack workspace connection\n  // HubSpot CRM connection\n}\n```\n\n### Week 7-8: Browser Extension MVP\n\n#### 1. Chrome Extension Structure\n```\nreplivo-extension/\n‚îú‚îÄ‚îÄ manifest.json       // Extension permissions\n‚îú‚îÄ‚îÄ background.js       // Service worker\n‚îú‚îÄ‚îÄ content-script.js   // DOM manipulation\n‚îú‚îÄ‚îÄ popup.html         // Extension UI\n‚îî‚îÄ‚îÄ native-messaging/   // Helper communication\n```\n\n#### 2. Web Automation Capabilities\n- Form filling and submission\n- Tab management and navigation\n- Data extraction from web pages\n- Cookie and session management\n- Screenshot capture (with consent)\n\n### Week 9-12: Local Helper Development\n\n#### 1. Helper Architecture\n```\nreplivo-helper/\n‚îú‚îÄ‚îÄ core/              # Cross-platform core logic\n‚îú‚îÄ‚îÄ platform/          # OS-specific implementations\n‚îÇ   ‚îú‚îÄ‚îÄ macos/        # AppleScript/AXUI integration\n‚îÇ   ‚îú‚îÄ‚îÄ windows/      # PowerShell/UIAutomation\n‚îÇ   ‚îî‚îÄ‚îÄ linux/        # Desktop environment adapters\n‚îú‚îÄ‚îÄ security/         # Crypto and signing\n‚îî‚îÄ‚îÄ communication/    # WebSocket client\n```\n\n#### 2. Security Implementation\n- Code signing and notarization\n- mTLS WebSocket communication\n- Command whitelisting and validation\n- Rate limiting and session management\n- Local encryption for sensitive data\n\n### Phase 2: Advanced Features (Months 4-6)\n\n#### Enhanced Dashboard\n- Real-time agent status monitoring\n- Live action feed with screenshots\n- Emergency kill switch (UI + system tray)\n- Permission management panel\n- Voice conversation history\n\n#### Enterprise Features\n- Multi-user team management\n- Advanced audit and compliance tools\n- Custom integration development\n- API access for enterprise customers\n- White-label deployment options\n\n## Technical Implementation Details\n\n### 1. Command Execution Flow\n```\nVoice Input ‚Üí STT ‚Üí LLM Planner ‚Üí Policy Check ‚Üí User Approval ‚Üí Helper Execution ‚Üí Audit Log\n```\n\n### 2. Security Layers\n- **Authentication**: OAuth + JWT tokens\n- **Authorization**: Granular permission scopes\n- **Communication**: mTLS WebSocket encryption\n- **Execution**: Signed command validation\n- **Audit**: Immutable logging with hash verification\n\n### 3. Error Handling & Recovery\n- Graceful degradation when helper unavailable\n- Automatic retry with exponential backoff\n- Rollback capability for reversible actions\n- User notification for failed operations\n- Support ticket integration for issues\n\n## Immediate Next Steps (This Week)\n\n1. **Update Current Schema**: Add permission and audit tables\n2. **Build Permission UI**: Implement consent screens\n3. **Voice Interface Prototype**: Basic WebRTC setup\n4. **OAuth Integration**: Start with Gmail API\n5. **Security Planning**: Define signing and encryption strategy\n\n## Success Metrics\n\n### Phase 1 (Foundation)\n- [ ] Permission system fully functional\n- [ ] Voice interface operational\n- [ ] OAuth integrations working\n- [ ] Browser extension installed by beta users\n\n### Phase 2 (Device Control)\n- [ ] Local helper installed on 3 platforms\n- [ ] Real device automation working\n- [ ] Security audit passed\n- [ ] Enterprise pilot customers onboarded\n\nThis plan transforms Replivo from a marketplace into a comprehensive AI automation platform while maintaining security, user trust, and regulatory compliance.","size_bytes":6872},"README.md":{"content":"# üöÄ Replivo - Advanced AI Agent Marketplace with Browser Automation\n\nReplivo is a cutting-edge AI agent marketplace that enables users to discover, hire, and manage AI agents capable of real-world browser automation. Built with a security-first approach, Replivo combines modern web technologies with innovative device control capabilities.\n\n![React](https://img.shields.io/badge/React-18-blue) ![TypeScript](https://img.shields.io/badge/TypeScript-5.0-blue) ![Express](https://img.shields.io/badge/Express-4.18-green) ![Chrome Extension](https://img.shields.io/badge/Chrome-Extension-orange) ![License](https://img.shields.io/badge/License-MIT-yellow)\n\n## ‚ú® Features\n\n### ü§ñ AI Agent Marketplace\n- **Interactive Agent Discovery** - Browse AI agents with live previews and capabilities\n- **Sandbox Testing** - Test agents safely before hiring with real-time demonstrations\n- **Companion Avatars** - Dynamic visual companions with voice interaction foundations\n- **Professional UI/UX** - Modern interface built with shadcn/ui and Tailwind CSS\n\n### üåê Browser Automation Platform\n- **Chrome Extension** - Secure browser helper for real device control\n- **Cryptographic Security** - JWT-signed commands with verification\n- **Permission System** - Granular domain-based access controls\n- **Real-time Communication** - WebSocket connections for instant command execution\n\n### üîí Enterprise Security\n- **Code Signing** - Cryptographically verified extension commands\n- **Audit Trail** - Complete logging of all agent actions\n- **Kill Switch** - Emergency stop for all operations\n- **Domain Restrictions** - Precise control over agent access\n\n## üèóÔ∏è Architecture\n\n### Frontend Stack\n- **React 18** with TypeScript for type safety\n- **Vite** for fast development and optimized builds\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management\n- **Framer Motion** for smooth animations\n- **Tailwind CSS** with custom design system\n\n### Backend Infrastructure\n- **Express.js** with TypeScript\n- **WebSocket Server** for real-time extension communication\n- **In-Memory Storage** with PostgreSQL readiness\n- **RESTful API** design with modular architecture\n\n### Browser Extension\n- **Chrome Manifest V3** for modern extension standards\n- **Service Worker** for background command processing\n- **Content Scripts** for page manipulation\n- **Secure Communication** with server verification\n\n## üöÄ Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- Chrome browser for extension testing\n\n### Installation\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/replivo.git\ncd replivo\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Server runs on http://localhost:5000\n```\n\n### Browser Extension Setup\n```bash\n# Load extension in Chrome\n# 1. Open chrome://extensions/\n# 2. Enable Developer mode\n# 3. Click \"Load unpacked\"\n# 4. Select chrome-extension/ folder\n```\n\n## üéØ Usage\n\n### 1. Explore Agents\nVisit the marketplace to browse available AI agents. Each agent shows:\n- Live capability demonstrations\n- Sandbox testing environment\n- Pricing and performance metrics\n- User reviews and ratings\n\n### 2. Hire an Agent\n1. Click \"Hire Now\" on any agent\n2. Provide company details\n3. Review requested permissions\n4. Install the Replivo Helper extension\n5. Complete the pairing process\n\n### 3. Agent Automation\nOnce paired, agents can:\n- Fill web forms automatically\n- Extract data from pages\n- Click buttons and navigate sites\n- Take screenshots (with permission)\n- Generate reports and insights\n\n## üîß Development\n\n### Project Structure\n```\n‚îú‚îÄ‚îÄ client/                 # React frontend\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Reusable UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/         # Application pages\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ lib/           # Utilities and configs\n‚îú‚îÄ‚îÄ server/                # Express.js backend\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts          # API endpoints\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts         # Data management\n‚îÇ   ‚îú‚îÄ‚îÄ websocket-server.ts # Extension communication\n‚îÇ   ‚îî‚îÄ‚îÄ command-signer.ts  # Security layer\n‚îú‚îÄ‚îÄ chrome-extension/      # Browser extension\n‚îÇ   ‚îú‚îÄ‚îÄ manifest.json      # Extension configuration\n‚îÇ   ‚îú‚îÄ‚îÄ background.js      # Service worker\n‚îÇ   ‚îú‚îÄ‚îÄ popup.html/js      # Extension interface\n‚îÇ   ‚îî‚îÄ‚îÄ content.js         # Page interaction\n‚îî‚îÄ‚îÄ shared/               # Shared schemas and types\n```\n\n### Environment Variables\nCreate `.env` for production:\n```bash\n# Database\nDATABASE_URL=your_postgresql_url\n\n# Security\nJWT_SECRET=your_jwt_secret\nCOMMAND_PRIVATE_KEY=your_rsa_private_key\n\n# External APIs\nOPENAI_API_KEY=your_openai_key\n```\n\n### Testing Extension Commands\n```bash\n# Generate pairing code\ncurl -X POST \"http://localhost:5000/api/extension/generate-code\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"userId\": \"demo-user\"}'\n\n# Check extension status\ncurl \"http://localhost:5000/api/extension/status/demo-user\"\n\n# Test capabilities\ncurl -X POST \"http://localhost:5000/api/extension/test/form_filling\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"userId\": \"demo-user\"}'\n```\n\n## üîê Security Model\n\n### Command Verification\nAll extension commands are signed with RS256:\n```javascript\n{\n  \"request_id\": \"req-123\",\n  \"agent_id\": \"customer_success_manager\", \n  \"capability\": \"fill_form\",\n  \"args\": { /* command parameters */ },\n  \"expiry\": \"2025-08-21T12:05:00Z\",\n  \"signature\": \"BASE64_RSA_SIGNATURE\"\n}\n```\n\n### Permission Scopes\n- `browser:navigate` - Open and navigate web pages\n- `browser:fill` - Fill forms on specified domains\n- `browser:read` - Extract content from approved pages\n- `browser:click` - Interact with page elements\n- `browser:screenshot` - Capture page images (optional)\n\n### Safety Features\n- Commands expire after 5 minutes\n- All actions logged for audit\n- Emergency disconnect available\n- Domain whitelist enforcement\n\n## üìä Agent Capabilities\n\n### Form Automation\n```javascript\n// Fill customer support form\n{\n  capability: 'fill_form',\n  args: {\n    selectors: {\n      name: '#customer-name',\n      email: '#customer-email',\n      issue: '#issue-description'\n    },\n    values: {\n      name: 'John Smith',\n      email: 'john@example.com', \n      issue: 'Billing inquiry'\n    }\n  }\n}\n```\n\n### Data Extraction\n```javascript\n// Extract customer information\n{\n  capability: 'extract_content',\n  args: {\n    selectors: {\n      customerName: '.customer-name',\n      accountStatus: '.account-status',\n      orderHistory: '.order-item'\n    },\n    includeText: true\n  }\n}\n```\n\n### Page Interaction\n```javascript\n// Click approval button\n{\n  capability: 'click_selector',\n  args: {\n    selector: '#approve-button',\n    waitFor: 1000\n  }\n}\n```\n\n## üö¢ Deployment\n\n### Production Build\n```bash\nnpm run build\nnpm start\n```\n\n### Platform Options\n- **Vercel**: `vercel --prod`\n- **Netlify**: Deploy `dist/` folder\n- **Docker**: Use included Dockerfile\n- **Replit**: Already configured for deployment\n\n### Chrome Web Store\n```bash\n# Package extension\ncd chrome-extension/\nzip -r replivo-helper.zip *\n\n# Submit to Chrome Web Store Developer Console\n```\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Development Guidelines\n- Follow TypeScript best practices\n- Maintain test coverage\n- Document new features\n- Follow security protocols\n\n## üìö Documentation\n\n- **[Browser Extension Spec](BROWSER_EXTENSION_SPEC.md)** - Technical specifications\n- **[Device Control Roadmap](DEVICE_CONTROL_ROADMAP.md)** - Future development plans\n- **[Implementation Plan](IMPLEMENTATION_PLAN.md)** - Detailed architecture guide\n- **[Deployment Guide](DEPLOY_TO_GITHUB.md)** - Platform deployment instructions\n\n## üó∫Ô∏è Roadmap\n\n### Phase 1: Foundation ‚úÖ\n- Modern AI agent marketplace\n- Browser extension platform\n- Secure command system\n- Interactive UI with effects\n\n### Phase 2: Advanced Features üöß\n- Voice-first interaction\n- OAuth service integrations  \n- Advanced agent capabilities\n- Enterprise security features\n\n### Phase 3: Scale & Growth üìà\n- Multi-platform support\n- Advanced analytics\n- Team collaboration\n- Enterprise deployment\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üÜò Support\n\n- **Issues**: Report bugs via GitHub Issues\n- **Documentation**: Check the `/docs` folder\n- **Community**: Join our Discord server\n- **Email**: support@replivo.com\n\n## üôè Acknowledgments\n\n- Built with modern web technologies\n- Inspired by the future of AI automation\n- Designed for security and user trust\n- Powered by the open source community\n\n---\n\n**Ready to revolutionize your workflow with AI agents?** \n\n[üöÄ Start Building](https://github.com/yourusername/replivo) | [üìñ Read Docs](IMPLEMENTATION_PLAN.md) | [üéÆ Try Demo](http://localhost:5000)","size_bytes":9057},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nReplivo is an advanced AI agent marketplace with device control capabilities for comprehensive business automation. The platform allows users to discover, hire, and manage AI agents that can perform real-world tasks on their devices. Features include agent discovery, secure local device control via signed helpers, voice-first interaction, granular permissions, and comprehensive audit trails. Built with professional UX/UI and enterprise-grade security.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDevelopment priority: Browser-first device control architecture complete with security-first approach.\nNext phase: Testing extension functionality, voice controls, or next development phase.\n\n# Recent Changes (August 21, 2025)\n\n‚úÖ Complete Browser Extension Foundation Implemented:\n- Chrome extension with secure command execution (manifest.json, background.js, popup.html/js, content.js)\n- WebSocket communication server for real-time commands (websocket-server.ts)\n- Command signing system with JWT tokens (command-signer.ts)\n- Extension API routes with pairing flow (/api/extension/*)\n- Permission system with domain-based controls\n- Agent hiring flow integration (agent-hiring.tsx)\n- Extension setup component with security-first UX\n- Comprehensive documentation and deployment guides\n\n‚úÖ Security Architecture Complete:\n- Cryptographically signed commands\n- Granular permission controls\n- Complete audit trails\n- Emergency kill switches\n- Domain-based access restrictions\n\n‚úÖ Testing Infrastructure Ready:\n- Test demo page (chrome-extension/test-demo.html)\n- Extension command testing endpoints\n- WebSocket server with connection management\n- Pairing code generation and verification system\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side application is built with React using Vite as the build tool and bundler. The application uses a file-based routing system with Wouter for lightweight client-side navigation. The UI is constructed with shadcn/ui components built on top of Radix UI primitives, providing a consistent and accessible design system. Framer Motion handles animations and transitions throughout the interface. TanStack Query manages server state and API interactions with built-in caching and synchronization.\n\n## Backend Architecture\nThe server is built with Express.js running on Node.js with TypeScript for type safety. The application follows a RESTful API design pattern with routes organized in a modular structure. The server handles static file serving in production and integrates with Vite's development server in development mode for hot module replacement. Middleware is implemented for request logging, JSON parsing, and error handling.\n\n## Data Storage Solutions\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations and migrations. The schema defines four main entities: agents (bundle packages), sub-agents (individual AI agents), custom requests (user-generated requirements), and users. For development and testing purposes, an in-memory storage implementation provides sample data without requiring database setup. The database connection utilizes Neon's serverless PostgreSQL service for scalability.\n\n## Authentication and Authorization\nThe codebase includes user authentication infrastructure with username/password-based login. Session management is handled through connect-pg-simple for PostgreSQL-backed sessions. The authentication system is prepared for future implementation but currently uses sample data for development purposes.\n\n## Styling and Design System\nThe application uses Tailwind CSS as the utility-first CSS framework with a custom design system configuration. CSS custom properties define a comprehensive color palette supporting both light and dark themes. Typography uses Inter font family for modern readability. The component library follows the shadcn/ui architecture pattern with Radix UI primitives as the foundation, ensuring accessibility compliance and consistent behavior across components.\n\n## Development Workflow\nThe project uses TypeScript across both client and server code for type safety and better developer experience. ESBuild handles server-side bundling for production builds while Vite manages client-side bundling and development server. Path aliases simplify imports with @ for client code and @shared for shared utilities and schemas.\n\n# External Dependencies\n\n## Database and ORM\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle ORM**: Type-safe database operations and schema management\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Frontend Libraries\n- **React**: Core UI library with hooks and functional components\n- **Vite**: Build tool and development server\n- **Wouter**: Lightweight client-side routing\n- **TanStack Query**: Server state management and API caching\n- **Framer Motion**: Animation and gesture library\n- **React Hook Form**: Form state management with validation\n\n## UI Component System\n- **Radix UI**: Accessible, unstyled component primitives\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework\n- **Class Variance Authority**: Type-safe variant styling\n- **Lucide React**: Icon library with React components\n\n## Backend Framework\n- **Express.js**: Web application framework for Node.js\n- **connect-pg-simple**: PostgreSQL session store for Express\n- **Zod**: Runtime type validation and schema definition\n\n## Development Tools\n- **TypeScript**: Static type checking for JavaScript\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing tool with Autoprefixer\n- **Date-fns**: Date manipulation and formatting utilities\n\n## Planned Device Control Stack\n- **WebRTC**: Real-time voice communication\n- **mTLS WebSocket**: Secure helper communication\n- **OAuth 2.0**: Service integrations (Gmail, Calendar, Slack)\n- **STT/TTS Services**: Speech processing pipelines\n- **Native Helpers**: Cross-platform device automation\n- **Code Signing**: Security for local helper distribution","size_bytes":6158},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          dark: \"var(--primary-dark)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        dark: \"var(--dark)\",\n        \"dark-lighter\": \"var(--dark-lighter)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"var(--font-display)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n        neiko: [\"Neiko\", \"Space Grotesk\", \"sans-serif\"],\n        space: [\"Space Grotesk\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        \"pulse-soft\": {\n          \"0%, 100%\": { opacity: \"0.8\" },\n          \"50%\": { opacity: \"1\" },\n        },\n        \"slide-up\": {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 6s ease-in-out infinite\",\n        \"pulse-soft\": \"pulse-soft 2s ease-in-out infinite\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3628},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"chrome-extension/README.md":{"content":"# Replivo Helper Chrome Extension\n\n## Overview\nThe Replivo Helper is a secure Chrome extension that enables AI agents to interact with web pages on behalf of users. It provides browser automation capabilities while maintaining strict security and user consent protocols.\n\n## Features\n\n### üîí Security-First Design\n- **Code Signing**: All commands are cryptographically signed by the server\n- **Permission Scoping**: Granular permissions per domain and capability\n- **User Consent**: Explicit approval required for all actions\n- **Audit Trail**: Complete logging of all executed commands\n\n### ü§ñ Browser Automation Capabilities\n- **Form Filling**: Automatically fill and submit web forms\n- **Element Interaction**: Click buttons, links, and page elements  \n- **Content Extraction**: Read and parse page content\n- **Navigation**: Open tabs and navigate between pages\n- **Screenshot Capture**: Take page screenshots (with consent)\n\n### üîó Real-Time Communication\n- **WebSocket Connection**: Live communication with Replivo orchestrator\n- **Command Verification**: Server-signed command validation\n- **Status Monitoring**: Real-time connection and execution status\n\n## Installation\n\n### For Development\n1. Clone the Replivo repository\n2. Navigate to the `chrome-extension` directory\n3. Open Chrome and go to `chrome://extensions/`\n4. Enable \"Developer mode\"\n5. Click \"Load unpacked\" and select the `chrome-extension` folder\n\n### For Production\n1. Download from Chrome Web Store (coming soon)\n2. Click \"Add to Chrome\" to install\n3. Pin the extension to your toolbar for easy access\n\n## Usage\n\n### 1. Initial Setup\n1. Install the Replivo Helper extension\n2. Visit the Replivo web app and hire an AI agent\n3. Follow the pairing flow to connect your extension\n4. Grant permissions for the domains the agent will work with\n\n### 2. Pairing Process\n1. When hiring an agent, you'll receive a pairing code\n2. Click the Replivo Helper extension icon\n3. Enter the pairing code to establish connection\n4. The extension will show \"Connected\" status when successful\n\n### 3. Agent Operations\n- Agents will send commands through the secure WebSocket connection\n- All commands are verified and executed automatically\n- You can monitor activity through the extension popup\n- Use the kill switch to stop all operations immediately\n\n## Security Model\n\n### Command Verification\n```javascript\n// All commands are signed with RS256\n{\n  \"request_id\": \"req-123\",\n  \"agent_id\": \"customer_success_manager\",\n  \"capability\": \"fill_form\",\n  \"args\": { ... },\n  \"expiry\": \"2025-08-21T12:05:00Z\",\n  \"signature\": \"BASE64_SIGNATURE\"\n}\n```\n\n### Permission System\n- **browser:navigate** - Open and navigate web pages\n- **browser:fill** - Fill forms on specified domains\n- **browser:read** - Extract content from approved domains\n- **browser:click** - Interact with page elements\n- **browser:screenshot** - Capture page images (optional)\n\n### Safety Features\n- Commands expire after 5 minutes to prevent replay attacks\n- All actions are logged for audit purposes\n- Emergency disconnect available at any time\n- Domain restrictions prevent unauthorized access\n\n## API Reference\n\n### Background Script Events\n```javascript\n// Pairing with server\nchrome.runtime.sendMessage({\n  type: 'PAIR_EXTENSION',\n  code: 'ABC123XY'\n});\n\n// Check connection status\nchrome.runtime.sendMessage({\n  type: 'GET_STATUS'\n});\n\n// Disconnect from server\nchrome.runtime.sendMessage({\n  type: 'DISCONNECT'\n});\n```\n\n### Content Script Functions\n```javascript\n// Fill form fields\nfillForm({\n  selectors: { email: '#email', name: '#name' },\n  values: { email: 'user@example.com', name: 'John Doe' },\n  submit: true\n});\n\n// Click page element\nclickElement({\n  selector: '#submit-button',\n  waitFor: 1000\n});\n\n// Extract page content\nextractContent({\n  selectors: { title: 'h1', price: '.price' },\n  includeText: true\n});\n```\n\n## Development\n\n### Building\n```bash\n# No build step required for Chrome MV3\n# Extension files are served directly\n```\n\n### Testing\n```bash\n# Load extension in developer mode\n# Test with Replivo development server\n# Monitor console for debug information\n```\n\n### Architecture\n```\n‚îú‚îÄ‚îÄ manifest.json       # Extension configuration\n‚îú‚îÄ‚îÄ background.js       # Service worker for commands\n‚îú‚îÄ‚îÄ popup.html/js       # Extension popup interface  \n‚îú‚îÄ‚îÄ content.js          # Page interaction script\n‚îú‚îÄ‚îÄ options.html        # Settings page (future)\n‚îî‚îÄ‚îÄ icons/             # Extension icons\n```\n\n## Troubleshooting\n\n### Connection Issues\n- Ensure Replivo server is running on localhost:5000\n- Check if pairing code is valid and not expired\n- Verify WebSocket connection in browser DevTools\n\n### Permission Errors\n- Confirm extension has permissions for target domains\n- Check if user granted necessary permissions during setup\n- Verify agent has proper scopes for requested actions\n\n### Command Failures\n- Commands may fail if page elements change\n- Check browser console for detailed error messages\n- Verify selectors are correct for target page\n\n## Privacy & Data\n\n### Data Collection\n- Only executes commands explicitly sent by paired agents\n- No automatic data collection or background monitoring\n- All activity logs stored locally with user consent\n\n### Data Storage\n- Extension stores minimal pairing information locally\n- No sensitive data transmitted to external servers\n- User can clear all data by disconnecting extension\n\n## Support\n\nFor issues with the Replivo Helper extension:\n1. Check the troubleshooting section above\n2. Review browser console for error messages\n3. Contact Replivo support with debugging information\n4. Report bugs through the GitHub repository\n\n## License\n\nThis extension is part of the Replivo project and follows the same licensing terms.","size_bytes":5757},"chrome-extension/background.js":{"content":"// Replivo Helper Background Service Worker\nlet wsConnection = null;\nlet pairedAccount = null;\nlet isAuthenticated = false;\n\n// Extension installation and setup\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Replivo Helper installed');\n});\n\n// Message handling from popup and content scripts\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  switch (message.type) {\n    case 'PAIR_EXTENSION':\n      handlePairing(message.code)\n        .then(result => {\n          sendResponse(result);\n          // Update popup if it's open by broadcasting status change\n          broadcastStatusUpdate();\n        })\n        .catch(error => sendResponse({ success: false, error: error.message }));\n      return true; // Keep channel open for async response\n\n    case 'GET_STATUS':\n      sendResponse({\n        isAuthenticated,\n        pairedAccount,\n        connectionStatus: wsConnection ? wsConnection.readyState : 'disconnected',\n        wsConnected: wsConnection && wsConnection.readyState === WebSocket.OPEN\n      });\n      break;\n\n    case 'DISCONNECT':\n      handleDisconnect();\n      sendResponse({ success: true });\n      break;\n\n    case 'EXECUTE_COMMAND':\n      executeCommand(message.command, sender.tab)\n        .then(result => sendResponse(result))\n        .catch(error => sendResponse({ success: false, error: error.message }));\n      return true;\n\n    case 'START_AGENT_WORK':\n      handleAgentStartWork(message.userId);\n      sendResponse({ success: true });\n      break;\n\n    default:\n      console.warn('Unknown message type:', message.type);\n  }\n});\n\n// Get the current Replit URL dynamically\nasync function getReplicaUrl() {\n  // First, try stored URL\n  try {\n    const data = await chrome.storage.local.get(['lastReplicaUrl']);\n    if (data.lastReplicaUrl) {\n      console.log('Using stored Replit URL:', data.lastReplicaUrl);\n      return data.lastReplicaUrl;\n    }\n  } catch (error) {\n    console.log('No stored URL found');\n  }\n\n  // Try to detect from active tab\n  try {\n    const tabs = await chrome.tabs.query({active: true, currentWindow: true});\n    const activeTab = tabs[0];\n    if (activeTab && (activeTab.url.includes('replit') || activeTab.url.includes('.dev') || activeTab.url.includes('repl.co'))) {\n      const url = new URL(activeTab.url);\n      console.log('Detected Replit URL:', url.origin);\n      await chrome.storage.local.set({ lastReplicaUrl: url.origin });\n      return url.origin;\n    }\n  } catch (error) {\n    console.log('Could not get active tab, using fallback');\n  }\n  \n  // Test known working URLs - get current Replit URL dynamically  \n  const testUrls = [\n    'http://localhost:5000'  // Start with localhost for development\n  ];\n  \n  for (const testUrl of testUrls) {\n    try {\n      console.log('Testing URL:', testUrl);\n      const response = await fetch(`${testUrl}/api/agents/featured`, {\n        method: 'GET',\n        mode: 'cors'\n      });\n      if (response.ok) {\n        console.log('Found working URL:', testUrl);\n        await chrome.storage.local.set({ lastReplicaUrl: testUrl });\n        return testUrl;\n      }\n    } catch (e) {\n      console.log(`Failed to connect to ${testUrl}:`, e.message);\n      continue;\n    }\n  }\n  \n  return 'http://localhost:5000'; // Fallback for local development\n}\n\n// Extension pairing flow\nasync function handlePairing(code) {\n  try {\n    const baseUrl = await getReplicaUrl();\n    console.log('Pairing with base URL:', baseUrl);\n    \n    // Store the URL for future use\n    await chrome.storage.local.set({ lastReplicaUrl: baseUrl });\n    \n    const response = await fetch(`${baseUrl}/api/extension/pair`, {\n      method: 'POST',\n      headers: { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({ \n        code, \n        extensionId: chrome.runtime.id \n      })\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Pairing response error:', response.status, errorText);\n      throw new Error(`Server error: ${response.status}`);\n    }\n\n    const result = await response.json();\n    \n    if (result.success) {\n      // Store account info\n      pairedAccount = result.userId;\n      await chrome.storage.local.set({ \n        pairedAccount: result.userId,\n        lastPaired: Date.now()\n      });\n\n      // Connect WebSocket\n      connectWebSocket();\n      \n      // Update icon to show connected state\n      updateIcon('connected');\n      \n      return { success: true, userId: result.userId };\n    } else {\n      throw new Error(result.error || 'Pairing failed');\n    }\n  } catch (error) {\n    console.error('Pairing error:', error);\n    throw error;\n  }\n}\n\n// WebSocket connection for real-time commands\nasync function connectWebSocket() {\n  try {\n    const baseUrl = await getReplicaUrl();\n    let wsUrl;\n    \n    if (baseUrl.startsWith('https://')) {\n      wsUrl = baseUrl.replace('https://', 'wss://') + '/extension-ws';\n    } else if (baseUrl.startsWith('http://')) {\n      wsUrl = baseUrl.replace('http://', 'ws://') + '/extension-ws';\n    } else {\n      // Fallback: assume http for localhost\n      wsUrl = `ws://${baseUrl}/extension-ws`;\n    }\n    \n    console.log('Connecting to WebSocket:', wsUrl);\n    wsConnection = new WebSocket(wsUrl);\n    \n    wsConnection.onopen = () => {\n      console.log('Connected to Replivo orchestrator');\n      isAuthenticated = true;\n      \n      // Send authentication\n      wsConnection.send(JSON.stringify({\n        type: 'authenticate',\n        extensionId: chrome.runtime.id,\n        userId: pairedAccount\n      }));\n      \n      updateIcon('connected');\n    };\n\n    wsConnection.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    wsConnection.onclose = () => {\n      console.log('WebSocket connection closed');\n      isAuthenticated = false;\n      updateIcon('disconnected');\n      \n      // Attempt reconnection after delay\n      setTimeout(() => {\n        if (pairedAccount) {\n          connectWebSocket();\n        }\n      }, 5000);\n    };\n\n    wsConnection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      isAuthenticated = false;\n      updateIcon('error');\n    };\n\n  } catch (error) {\n    console.error('WebSocket connection failed:', error);\n  }\n}\n\n// Handle incoming WebSocket messages\nasync function handleWebSocketMessage(message) {\n  switch (message.type) {\n    case 'auth_success':\n      console.log('Authentication successful');\n      break;\n\n    case 'command':\n      await handleSignedCommand(message.signed_command);\n      break;\n\n    case 'ping':\n      wsConnection.send(JSON.stringify({ type: 'pong' }));\n      break;\n\n    default:\n      console.warn('Unknown WebSocket message type:', message.type);\n  }\n}\n\n// Execute signed commands from orchestrator\nasync function handleSignedCommand(signedCommand) {\n  try {\n    // Verify command signature (simplified for demo)\n    const command = JSON.parse(atob(signedCommand.split('.')[1]));\n    \n    // Check expiry\n    if (new Date(command.expiry) < new Date()) {\n      throw new Error('Command expired');\n    }\n\n    // Execute command based on capability\n    const result = await executeCapability(command);\n    \n    // Send result back to orchestrator\n    wsConnection.send(JSON.stringify({\n      type: 'command_result',\n      request_id: command.request_id,\n      status: 'success',\n      result\n    }));\n\n  } catch (error) {\n    console.error('Command execution failed:', error);\n    \n    wsConnection.send(JSON.stringify({\n      type: 'command_result',\n      request_id: command.request_id,\n      status: 'failed',\n      error: error.message\n    }));\n  }\n}\n\n// Execute specific capability\nasync function executeCapability(command) {\n  const { capability, args } = command;\n\n  switch (capability) {\n    case 'open_url':\n      return await openUrl(args);\n    \n    case 'compose_email':\n      return await composeEmail(args);\n    \n    case 'fill_form':\n      return await fillForm(args);\n    \n    case 'click_selector':\n      return await clickSelector(args);\n    \n    case 'extract_content':\n      return await extractContent(args);\n    \n    case 'take_screenshot':\n      return await takeScreenshot(args);\n    \n    default:\n      throw new Error(`Unknown capability: ${capability}`);\n  }\n}\n\n// Capability implementations\nasync function openUrl(args) {\n  const tab = await chrome.tabs.create({ url: args.url });\n  return { tabId: tab.id, url: args.url };\n}\n\nasync function composeEmail(args) {\n  // Open Gmail compose window with pre-filled content\n  const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${encodeURIComponent(args.recipient)}&subject=${encodeURIComponent(args.subject)}&body=${encodeURIComponent(args.body)}`;\n  const tab = await chrome.tabs.create({ url: gmailUrl });\n  \n  // Wait a moment for Gmail to load, then attempt to send\n  setTimeout(async () => {\n    try {\n      await chrome.scripting.executeScript({\n        target: { tabId: tab.id },\n        func: () => {\n          // Try to find and click the send button in Gmail\n          const sendButtons = document.querySelectorAll('[data-tooltip=\"Send ‚åò+Enter, Ctrl+Enter\"], [aria-label*=\"Send\"], [data-testid=\"send-button\"], .T-I.J-J5-Ji.aoO.v7.T-I-atl.L3');\n          if (sendButtons.length > 0) {\n            sendButtons[0].click();\n            return 'Email sent successfully';\n          }\n          return 'Gmail compose window opened - please review and send manually';\n        }\n      });\n    } catch (error) {\n      console.log('Could not auto-send email, user needs to send manually');\n    }\n  }, 3000);\n  \n  return { \n    tabId: tab.id, \n    recipient: args.recipient, \n    subject: args.subject,\n    status: 'Email composed and ready to send'\n  };\n}\n\nasync function fillForm(args) {\n  const tabId = args.tabId || (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id;\n  \n  const result = await chrome.scripting.executeScript({\n    target: { tabId },\n    func: fillFormInPage,\n    args: [args.selectors, args.values, args.submit]\n  });\n  \n  return result[0].result;\n}\n\nasync function clickSelector(args) {\n  const tabId = args.tabId || (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id;\n  \n  const result = await chrome.scripting.executeScript({\n    target: { tabId },\n    func: clickElementInPage,\n    args: [args.selector, args.waitFor]\n  });\n  \n  return result[0].result;\n}\n\nasync function extractContent(args) {\n  const tabId = args.tabId || (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id;\n  \n  const result = await chrome.scripting.executeScript({\n    target: { tabId },\n    func: extractContentFromPage,\n    args: [args.selectors, args.includeText, args.includeAttributes]\n  });\n  \n  return result[0].result;\n}\n\nasync function takeScreenshot(args) {\n  const screenshot = await chrome.tabs.captureVisibleTab(null, {\n    format: 'png',\n    quality: args.quality || 90\n  });\n  \n  return { screenshot, timestamp: new Date().toISOString() };\n}\n\n// Injected functions for page manipulation\nfunction fillFormInPage(selectors, values, submit) {\n  const results = {};\n  \n  for (const [field, selector] of Object.entries(selectors)) {\n    const element = document.querySelector(selector);\n    if (element) {\n      element.value = values[field] || '';\n      element.dispatchEvent(new Event('input', { bubbles: true }));\n      element.dispatchEvent(new Event('change', { bubbles: true }));\n      results[field] = 'filled';\n    } else {\n      results[field] = 'not_found';\n    }\n  }\n  \n  if (submit && selectors.submitBtn) {\n    const submitBtn = document.querySelector(selectors.submitBtn);\n    if (submitBtn) {\n      submitBtn.click();\n      results.submitted = true;\n    }\n  }\n  \n  return results;\n}\n\nfunction clickElementInPage(selector, waitFor = 0) {\n  const element = document.querySelector(selector);\n  \n  if (!element) {\n    throw new Error(`Element not found: ${selector}`);\n  }\n  \n  if (waitFor > 0) {\n    setTimeout(() => element.click(), waitFor);\n  } else {\n    element.click();\n  }\n  \n  return { \n    clicked: true, \n    element: selector,\n    tagName: element.tagName,\n    text: element.textContent?.slice(0, 100)\n  };\n}\n\nfunction extractContentFromPage(selectors, includeText = true, includeAttributes = []) {\n  const results = {};\n  \n  for (const [key, selector] of Object.entries(selectors)) {\n    const element = document.querySelector(selector);\n    \n    if (element) {\n      const data = {};\n      \n      if (includeText) {\n        data.text = element.textContent?.trim();\n        data.innerHTML = element.innerHTML;\n      }\n      \n      for (const attr of includeAttributes || []) {\n        data[attr] = element.getAttribute(attr);\n      }\n      \n      results[key] = data;\n    } else {\n      results[key] = null;\n    }\n  }\n  \n  return results;\n}\n\n// Utility functions\nfunction updateIcon(status) {\n  // Skip icon updates since we don't have custom icons\n  console.log(`Status changed to: ${status}`);\n}\n\nfunction handleDisconnect() {\n  if (wsConnection) {\n    wsConnection.close();\n    wsConnection = null;\n  }\n  \n  isAuthenticated = false;\n  pairedAccount = null;\n  \n  chrome.storage.local.clear();\n  updateIcon('disconnected');\n}\n\nfunction showStatus() {\n  chrome.action.openPopup();\n}\n\n// Broadcast status updates to popup and other parts of extension\nfunction broadcastStatusUpdate() {\n  // Force popup refresh if it's open\n  chrome.runtime.sendMessage({\n    type: 'STATUS_UPDATED',\n    status: {\n      isAuthenticated,\n      pairedAccount,\n      wsConnected: wsConnection && wsConnection.readyState === WebSocket.OPEN\n    }\n  }).catch(() => {\n    // Popup might not be open, ignore error\n  });\n}\n\n// Handle agent start work signal\nasync function handleAgentStartWork(userId) {\n  console.log('Agent starting work for user:', userId);\n  \n  if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\n    // Send a signal to the server that the agent should start working\n    wsConnection.send(JSON.stringify({\n      type: 'agent_ready',\n      userId: userId,\n      message: 'Extension connected and ready for automation tasks'\n    }));\n    \n    // Simulate some initial automation tasks\n    setTimeout(() => {\n      simulateAgentWork();\n    }, 2000);\n  }\n}\n\n// Simulate agent performing initial tasks\nfunction simulateAgentWork() {\n  console.log('Agent starting automated tasks...');\n  \n  // Example: Check current page and perform basic analysis\n  chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {\n    if (tabs[0]) {\n      chrome.scripting.executeScript({\n        target: { tabId: tabs[0].id },\n        func: () => {\n          // Simple page analysis that an agent might do\n          const pageInfo = {\n            title: document.title,\n            url: window.location.href,\n            hasforms: document.forms.length > 0,\n            hasInputs: document.querySelectorAll('input').length,\n            links: document.links.length\n          };\n          \n          console.log('Agent analyzed page:', pageInfo);\n          return pageInfo;\n        }\n      }, (results) => {\n        if (results && results[0]) {\n          console.log('Agent page analysis complete:', results[0].result);\n          \n          // Send analysis back to server\n          if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\n            wsConnection.send(JSON.stringify({\n              type: 'agent_analysis',\n              data: results[0].result,\n              message: 'Page analysis completed successfully'\n            }));\n          }\n        }\n      });\n    }\n  });\n}\n\n// Load saved account on startup\nchrome.runtime.onStartup.addListener(async () => {\n  const data = await chrome.storage.local.get(['pairedAccount']);\n  if (data.pairedAccount) {\n    pairedAccount = data.pairedAccount;\n    connectWebSocket();\n  }\n});","size_bytes":15981},"chrome-extension/config.js":{"content":"// Configuration for the Replivo Helper Extension\n// This file handles dynamic URL detection for different environments\n\nfunction getBaseUrl() {\n  // Try to get the Replit URL from the current context\n  if (typeof window !== 'undefined' && window.location.origin.includes('replit')) {\n    return window.location.origin;\n  }\n  \n  // For extension context, try to determine from tab URL\n  return chrome.tabs.query({active: true, currentWindow: true}).then(tabs => {\n    const activeTab = tabs[0];\n    if (activeTab && activeTab.url.includes('replit')) {\n      const url = new URL(activeTab.url);\n      return url.origin;\n    }\n    return 'http://localhost:5000'; // Fallback for local development\n  });\n}\n\n// Export for use in background script\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { getBaseUrl };\n} else if (typeof window !== 'undefined') {\n  window.ReplicoConfig = { getBaseUrl };\n}","size_bytes":919},"chrome-extension/content.js":{"content":"// Replivo Helper Content Script\n(function() {\n  'use strict';\n\n  // Prevent multiple injections\n  if (window.replivoHelperInjected) {\n    return;\n  }\n  window.replivoHelperInjected = true;\n\n  console.log('Replivo Helper content script loaded');\n\n  // Listen for messages from background script\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    switch (message.type) {\n      case 'EXECUTE_COMMAND':\n        executeCommand(message.command)\n          .then(result => sendResponse({ success: true, result }))\n          .catch(error => sendResponse({ success: false, error: error.message }));\n        return true; // Keep channel open for async response\n\n      case 'CHECK_PAGE_READY':\n        sendResponse({ \n          ready: document.readyState === 'complete',\n          url: window.location.href,\n          title: document.title\n        });\n        break;\n\n      case 'HIGHLIGHT_ELEMENT':\n        highlightElement(message.selector);\n        sendResponse({ success: true });\n        break;\n\n      default:\n        console.warn('Unknown content script message:', message.type);\n    }\n  });\n\n  // Command execution functions\n  async function executeCommand(command) {\n    const { capability, args } = command;\n\n    switch (capability) {\n      case 'fill_form':\n        return fillForm(args);\n      \n      case 'click_selector':\n        return clickElement(args);\n      \n      case 'extract_content':\n        return extractContent(args);\n      \n      case 'wait_for_element':\n        return waitForElement(args);\n      \n      case 'scroll_to_element':\n        return scrollToElement(args);\n      \n      case 'get_page_info':\n        return getPageInfo();\n      \n      case 'compose_email':\n        return composeEmailOnPage(args);\n      \n      default:\n        throw new Error(`Unknown capability: ${capability}`);\n    }\n  }\n\n  function fillForm(args) {\n    const { selectors, values, submit = false } = args;\n    const results = {};\n\n    for (const [field, selector] of Object.entries(selectors)) {\n      const element = document.querySelector(selector);\n      \n      if (element) {\n        const value = values[field] || '';\n        \n        // Handle different input types\n        if (element.type === 'checkbox' || element.type === 'radio') {\n          element.checked = Boolean(value);\n        } else {\n          element.value = value;\n        }\n        \n        // Trigger events to notify frameworks\n        element.dispatchEvent(new Event('input', { bubbles: true }));\n        element.dispatchEvent(new Event('change', { bubbles: true }));\n        element.dispatchEvent(new Event('blur', { bubbles: true }));\n        \n        results[field] = {\n          status: 'filled',\n          value: element.value,\n          type: element.type\n        };\n      } else {\n        results[field] = {\n          status: 'not_found',\n          selector\n        };\n      }\n    }\n\n    // Submit form if requested\n    if (submit) {\n      const submitSelector = selectors.submitBtn || 'input[type=\"submit\"], button[type=\"submit\"]';\n      const submitButton = document.querySelector(submitSelector);\n      \n      if (submitButton) {\n        submitButton.click();\n        results.submitted = true;\n      } else {\n        // Try to find and submit the parent form\n        const form = document.querySelector('form');\n        if (form) {\n          form.submit();\n          results.submitted = true;\n        } else {\n          results.submitted = false;\n          results.submitError = 'No submit button or form found';\n        }\n      }\n    }\n\n    return results;\n  }\n\n  function clickElement(args) {\n    const { selector, waitFor = 0, scrollIntoView = true } = args;\n    \n    return new Promise((resolve, reject) => {\n      const element = document.querySelector(selector);\n      \n      if (!element) {\n        reject(new Error(`Element not found: ${selector}`));\n        return;\n      }\n\n      // Scroll element into view if requested\n      if (scrollIntoView) {\n        element.scrollIntoView({ \n          behavior: 'smooth', \n          block: 'center' \n        });\n      }\n\n      const clickAction = () => {\n        // Check if element is still visible and clickable\n        const rect = element.getBoundingClientRect();\n        const isVisible = rect.width > 0 && rect.height > 0;\n        \n        if (!isVisible) {\n          reject(new Error('Element is not visible'));\n          return;\n        }\n\n        element.click();\n        \n        resolve({\n          clicked: true,\n          element: selector,\n          tagName: element.tagName,\n          text: element.textContent?.slice(0, 100),\n          location: {\n            x: rect.left + rect.width / 2,\n            y: rect.top + rect.height / 2\n          }\n        });\n      };\n\n      if (waitFor > 0) {\n        setTimeout(clickAction, waitFor);\n      } else {\n        clickAction();\n      }\n    });\n  }\n\n  function extractContent(args) {\n    const { selectors, includeText = true, includeAttributes = [], includeStyles = false } = args;\n    const results = {};\n\n    for (const [key, selector] of Object.entries(selectors)) {\n      const elements = document.querySelectorAll(selector);\n      \n      if (elements.length === 0) {\n        results[key] = null;\n        continue;\n      }\n\n      const extractedData = Array.from(elements).map(element => {\n        const data = {};\n\n        if (includeText) {\n          data.text = element.textContent?.trim();\n          data.innerHTML = element.innerHTML;\n        }\n\n        // Extract specific attributes\n        for (const attr of includeAttributes) {\n          data[attr] = element.getAttribute(attr);\n        }\n\n        // Extract computed styles if requested\n        if (includeStyles) {\n          const styles = window.getComputedStyle(element);\n          data.styles = {\n            display: styles.display,\n            visibility: styles.visibility,\n            opacity: styles.opacity,\n            position: styles.position\n          };\n        }\n\n        // Include element position\n        const rect = element.getBoundingClientRect();\n        data.position = {\n          x: rect.left,\n          y: rect.top,\n          width: rect.width,\n          height: rect.height\n        };\n\n        return data;\n      });\n\n      results[key] = elements.length === 1 ? extractedData[0] : extractedData;\n    }\n\n    return results;\n  }\n\n  function waitForElement(args) {\n    const { selector, timeout = 10000, visible = true } = args;\n    \n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      const checkElement = () => {\n        const element = document.querySelector(selector);\n        \n        if (element) {\n          if (!visible) {\n            resolve({ found: true, element: selector });\n            return;\n          }\n          \n          const rect = element.getBoundingClientRect();\n          const isVisible = rect.width > 0 && rect.height > 0;\n          \n          if (isVisible) {\n            resolve({ \n              found: true, \n              element: selector,\n              position: {\n                x: rect.left,\n                y: rect.top,\n                width: rect.width,\n                height: rect.height\n              }\n            });\n            return;\n          }\n        }\n        \n        if (Date.now() - startTime >= timeout) {\n          reject(new Error(`Element not found within ${timeout}ms: ${selector}`));\n          return;\n        }\n        \n        setTimeout(checkElement, 100);\n      };\n      \n      checkElement();\n    });\n  }\n\n  function scrollToElement(args) {\n    const { selector, behavior = 'smooth', block = 'center' } = args;\n    \n    const element = document.querySelector(selector);\n    \n    if (!element) {\n      throw new Error(`Element not found: ${selector}`);\n    }\n    \n    element.scrollIntoView({ behavior, block });\n    \n    const rect = element.getBoundingClientRect();\n    return {\n      scrolled: true,\n      element: selector,\n      position: {\n        x: rect.left,\n        y: rect.top,\n        width: rect.width,\n        height: rect.height\n      }\n    };\n  }\n\n  function getPageInfo() {\n    return {\n      url: window.location.href,\n      title: document.title,\n      readyState: document.readyState,\n      userAgent: navigator.userAgent,\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight\n      },\n      scroll: {\n        x: window.scrollX,\n        y: window.scrollY\n      },\n      forms: Array.from(document.forms).map((form, index) => ({\n        index,\n        action: form.action,\n        method: form.method,\n        elements: form.elements.length\n      }))\n    };\n  }\n\n  function highlightElement(selector) {\n    // Remove existing highlights\n    document.querySelectorAll('.replivo-highlight').forEach(el => {\n      el.classList.remove('replivo-highlight');\n    });\n\n    const element = document.querySelector(selector);\n    if (element) {\n      // Add highlight styles\n      if (!document.getElementById('replivo-highlight-styles')) {\n        const style = document.createElement('style');\n        style.id = 'replivo-highlight-styles';\n        style.textContent = `\n          .replivo-highlight {\n            outline: 3px solid #3b82f6 !important;\n            outline-offset: 2px !important;\n            background-color: rgba(59, 130, 246, 0.1) !important;\n            transition: all 0.3s ease !important;\n          }\n        `;\n        document.head.appendChild(style);\n      }\n\n      element.classList.add('replivo-highlight');\n      \n      // Remove highlight after 3 seconds\n      setTimeout(() => {\n        element.classList.remove('replivo-highlight');\n      }, 3000);\n    }\n  }\n\n  // Page monitoring for dynamic content\n  let lastUrl = window.location.href;\n  \n  function checkForNavigation() {\n    if (window.location.href !== lastUrl) {\n      lastUrl = window.location.href;\n      \n      // Notify background script of navigation\n      chrome.runtime.sendMessage({\n        type: 'PAGE_NAVIGATION',\n        url: lastUrl,\n        title: document.title\n      });\n    }\n  }\n\n  // Monitor for navigation changes\n  setInterval(checkForNavigation, 1000);\n\n  // Monitor for DOM changes\n  const observer = new MutationObserver((mutations) => {\n    // Debounce DOM change notifications\n    clearTimeout(window.replivoDomChangeTimeout);\n    window.replivoDomChangeTimeout = setTimeout(() => {\n      chrome.runtime.sendMessage({\n        type: 'DOM_CHANGED',\n        url: window.location.href,\n        mutations: mutations.length\n      });\n    }, 1000);\n  });\n\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false\n  });\n\n  // Listen for auto-pairing messages from the web page\n  window.addEventListener('message', async (event) => {\n    if (event.data.type === 'REPLIVO_AUTO_PAIR' && event.data.source === 'replivo-web') {\n      try {\n        const response = await chrome.runtime.sendMessage({\n          type: 'PAIR_EXTENSION',\n          code: event.data.pairingCode\n        });\n        \n        // Send response back to web page\n        window.postMessage({\n          type: 'REPLIVO_PAIR_RESPONSE',\n          success: response.success,\n          error: response.error\n        }, '*');\n        \n        if (response.success) {\n          console.log('Extension auto-paired successfully!');\n          \n          // Notify the agent to start working\n          setTimeout(() => {\n            chrome.runtime.sendMessage({\n              type: 'START_AGENT_WORK',\n              userId: response.userId\n            });\n          }, 1000);\n        }\n      } catch (error) {\n        console.error('Auto-pairing failed:', error);\n        window.postMessage({\n          type: 'REPLIVO_PAIR_RESPONSE',\n          success: false,\n          error: error.message\n        }, '*');\n      }\n    }\n  });\n\n  // Email composition function for content script\n  function composeEmailOnPage(args) {\n    const { recipient, subject, body } = args;\n    \n    // Check if we're on Gmail\n    if (window.location.hostname.includes('mail.google.com')) {\n      // Try to find compose button and click it\n      const composeButton = document.querySelector('[data-tooltip=\"Compose\"], [data-tooltip*=\"Compose\"], .T-I.T-I-KE.L3');\n      if (composeButton) {\n        composeButton.click();\n        \n        // Wait for compose window to appear, then fill it\n        setTimeout(() => {\n          // Fill recipient\n          const toField = document.querySelector('input[aria-label*=\"To\"], textarea[aria-label*=\"To\"], input[name=\"to\"]');\n          if (toField) {\n            toField.value = recipient;\n            toField.dispatchEvent(new Event('input', { bubbles: true }));\n          }\n          \n          // Fill subject\n          const subjectField = document.querySelector('input[aria-label*=\"Subject\"], input[name=\"subject\"]');\n          if (subjectField) {\n            subjectField.value = subject;\n            subjectField.dispatchEvent(new Event('input', { bubbles: true }));\n          }\n          \n          // Fill body\n          const bodyField = document.querySelector('[aria-label*=\"Message body\"], [role=\"textbox\"]');\n          if (bodyField) {\n            bodyField.innerHTML = body.replace(/\\n/g, '<br>');\n            bodyField.dispatchEvent(new Event('input', { bubbles: true }));\n          }\n        }, 1000);\n        \n        return { success: true, message: 'Email compose initiated on Gmail' };\n      }\n    }\n    \n    // Fallback: redirect to mailto\n    window.location.href = `mailto:${recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n    return { success: true, message: 'Opened email client with pre-filled data' };\n  }\n\n  console.log('Replivo Helper content script initialized');\n})();","size_bytes":13722},"chrome-extension/popup.js":{"content":"// Replivo Helper Popup Script\ndocument.addEventListener('DOMContentLoaded', () => {\n  const elements = {\n    loading: document.getElementById('loading'),\n    notPaired: document.getElementById('not-paired'),\n    paired: document.getElementById('paired'),\n    error: document.getElementById('error'),\n    pairingCode: document.getElementById('pairing-code'),\n    pairButton: document.getElementById('pair-button'),\n    pairingError: document.getElementById('pairing-error'),\n    pairedUser: document.getElementById('paired-user'),\n    pairedTime: document.getElementById('paired-time'),\n    openDashboard: document.getElementById('open-dashboard'),\n    disconnectButton: document.getElementById('disconnect-button'),\n    retryButton: document.getElementById('retry-button')\n  };\n\n  // Initialize popup\n  initializePopup();\n\n  // Listen for status updates from background script\n  chrome.runtime.onMessage.addListener((message) => {\n    if (message.type === 'STATUS_UPDATED') {\n      if (message.status.isAuthenticated && message.status.pairedAccount) {\n        showPairedState(message.status);\n      } else {\n        showState('notPaired');\n      }\n    }\n  });\n\n  // Event listeners\n  elements.pairButton.addEventListener('click', handlePairing);\n  elements.disconnectButton.addEventListener('click', handleDisconnect);\n  elements.openDashboard.addEventListener('click', openDashboard);\n  elements.retryButton.addEventListener('click', initializePopup);\n\n  // Enter key handling for pairing code\n  elements.pairingCode.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') {\n      handlePairing();\n    }\n  });\n\n  // Auto-format pairing code as user types\n  elements.pairingCode.addEventListener('input', (e) => {\n    let value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');\n    if (value.length > 8) value = value.slice(0, 8);\n    e.target.value = value;\n    \n    // Clear any previous errors\n    hideError();\n  });\n\n  async function initializePopup() {\n    showState('loading');\n    \n    try {\n      // Get current status from background script\n      const status = await sendMessage({ type: 'GET_STATUS' });\n      \n      if (status.isAuthenticated && status.pairedAccount) {\n        showPairedState(status);\n      } else {\n        showState('notPaired');\n      }\n    } catch (error) {\n      console.error('Error initializing popup:', error);\n      showState('error');\n    }\n  }\n\n  async function handlePairing() {\n    const code = elements.pairingCode.value.trim();\n    \n    if (!code) {\n      showError('Please enter a pairing code');\n      return;\n    }\n\n    if (code.length < 6) {\n      showError('Pairing code must be at least 6 characters');\n      return;\n    }\n\n    elements.pairButton.disabled = true;\n    elements.pairButton.textContent = 'Connecting...';\n    hideError();\n\n    try {\n      const result = await sendMessage({ \n        type: 'PAIR_EXTENSION', \n        code \n      });\n\n      if (result.success) {\n        showSuccess('Successfully connected!');\n        setTimeout(() => {\n          showPairedState({ \n            pairedAccount: result.userId,\n            isAuthenticated: true \n          });\n        }, 1000);\n      } else {\n        showError(result.error || 'Pairing failed');\n      }\n    } catch (error) {\n      console.error('Pairing error:', error);\n      showError('Connection failed. Please try again.');\n    } finally {\n      elements.pairButton.disabled = false;\n      elements.pairButton.textContent = 'Connect to Replivo';\n    }\n  }\n\n  async function handleDisconnect() {\n    elements.disconnectButton.disabled = true;\n    elements.disconnectButton.textContent = 'Disconnecting...';\n\n    try {\n      await sendMessage({ type: 'DISCONNECT' });\n      showState('notPaired');\n      elements.pairingCode.value = '';\n    } catch (error) {\n      console.error('Disconnect error:', error);\n    } finally {\n      elements.disconnectButton.disabled = false;\n      elements.disconnectButton.textContent = 'Disconnect';\n    }\n  }\n\n  async function openDashboard() {\n    // Get the current Replit URL\n    try {\n      const tabs = await chrome.tabs.query({active: true, currentWindow: true});\n      const activeTab = tabs[0];\n      let dashboardUrl = 'http://localhost:5000/'; // fallback\n      \n      if (activeTab && activeTab.url.includes('replit')) {\n        const url = new URL(activeTab.url);\n        dashboardUrl = url.origin + '/';\n      }\n      \n      chrome.tabs.create({ url: dashboardUrl });\n    } catch (error) {\n      chrome.tabs.create({ url: 'http://localhost:5000/' });\n    }\n    window.close();\n  }\n\n  function showPairedState(status) {\n    elements.pairedUser.textContent = `Connected to ${status.pairedAccount || 'account'}`;\n    elements.pairedTime.textContent = `Last seen: ${new Date().toLocaleTimeString()}`;\n    showState('paired');\n  }\n\n  function showState(state) {\n    // Hide all states\n    elements.loading.classList.add('hidden');\n    elements.notPaired.classList.add('hidden');\n    elements.paired.classList.add('hidden');\n    elements.error.classList.add('hidden');\n\n    // Show requested state\n    switch (state) {\n      case 'loading':\n        elements.loading.classList.remove('hidden');\n        break;\n      case 'notPaired':\n        elements.notPaired.classList.remove('hidden');\n        break;\n      case 'paired':\n        elements.paired.classList.remove('hidden');\n        break;\n      case 'error':\n        elements.error.classList.remove('hidden');\n        break;\n    }\n  }\n\n  function showError(message) {\n    elements.pairingError.textContent = message;\n    elements.pairingError.classList.remove('hidden');\n  }\n\n  function hideError() {\n    elements.pairingError.classList.add('hidden');\n  }\n\n  function showSuccess(message) {\n    elements.pairingError.textContent = message;\n    elements.pairingError.className = 'success-text';\n    elements.pairingError.classList.remove('hidden');\n  }\n\n  function sendMessage(message) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage(message, (response) => {\n        if (chrome.runtime.lastError) {\n          reject(new Error(chrome.runtime.lastError.message));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n  }\n});","size_bytes":6201},"server/command-signer.ts":{"content":"import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\n// Command signing for secure browser extension communication\nexport class CommandSigner {\n  private static instance: CommandSigner;\n  private privateKey: string;\n  private publicKey: string;\n\n  constructor() {\n    // In production, load from environment variables\n    // For development, generate a key pair\n    this.privateKey = process.env.COMMAND_PRIVATE_KEY || this.generatePrivateKey();\n    this.publicKey = this.derivePublicKey(this.privateKey);\n  }\n\n  static getInstance(): CommandSigner {\n    if (!CommandSigner.instance) {\n      CommandSigner.instance = new CommandSigner();\n    }\n    return CommandSigner.instance;\n  }\n\n  private generatePrivateKey(): string {\n    // Generate RSA key pair for development\n    const { publicKey, privateKey } = crypto.generateKeyPairSync('rsa', {\n      modulusLength: 2048,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    });\n    \n    console.warn('Using generated RSA key for development. Set COMMAND_PRIVATE_KEY in production.');\n    return privateKey;\n  }\n\n  private derivePublicKey(privateKey: string): string {\n    const keyObject = crypto.createPrivateKey(privateKey);\n    return crypto.createPublicKey(keyObject).export({ type: 'spki', format: 'pem' }) as string;\n  }\n\n  signCommand(command: ExtensionCommand): string {\n    const payload = {\n      ...command,\n      issued_at: new Date().toISOString(),\n      expiry: new Date(Date.now() + 5 * 60 * 1000).toISOString() // 5 minutes\n    };\n\n    return jwt.sign(payload, this.privateKey, { \n      algorithm: 'RS256',\n      expiresIn: '5m'\n    });\n  }\n\n  verifyCommand(signedCommand: string): ExtensionCommand | null {\n    try {\n      const decoded = jwt.verify(signedCommand, this.publicKey, { \n        algorithms: ['RS256'] \n      }) as ExtensionCommand;\n      \n      return decoded;\n    } catch (error) {\n      console.error('Command verification failed:', error);\n      return null;\n    }\n  }\n\n  getPublicKey(): string {\n    return this.publicKey;\n  }\n}\n\n// Command interface for browser extension\nexport interface ExtensionCommand {\n  request_id: string;\n  agent_id: string;\n  capability: string;\n  args: Record<string, any>;\n  issued_at?: string;\n  expiry?: string;\n}\n\n// Supported browser capabilities\nexport enum BrowserCapability {\n  OPEN_URL = 'open_url',\n  FILL_FORM = 'fill_form', \n  CLICK_SELECTOR = 'click_selector',\n  EXTRACT_CONTENT = 'extract_content',\n  TAKE_SCREENSHOT = 'take_screenshot',\n  DOWNLOAD_FILE = 'download_file',\n  UPLOAD_FILE = 'upload_file',\n  NAVIGATE_BACK = 'navigate_back',\n  CLOSE_TAB = 'close_tab',\n  SWITCH_TAB = 'switch_tab'\n}\n\n// Command argument types\nexport interface OpenUrlArgs {\n  url: string;\n  newTab?: boolean;\n}\n\nexport interface FillFormArgs {\n  tabId?: number;\n  selectors: Record<string, string>;\n  values: Record<string, string>;\n  submit?: boolean;\n}\n\nexport interface ClickSelectorArgs {\n  tabId?: number;\n  selector: string;\n  waitFor?: number;\n}\n\nexport interface ExtractContentArgs {\n  tabId?: number;\n  selectors: Record<string, string>;\n  includeText?: boolean;\n  includeAttributes?: string[];\n}\n\nexport interface TakeScreenshotArgs {\n  tabId?: number;\n  fullPage?: boolean;\n  quality?: number;\n}\n\n// Command result interface\nexport interface CommandResult {\n  request_id: string;\n  status: 'success' | 'failed' | 'rejected';\n  result?: any;\n  error?: string;\n  timestamp: string;\n}","size_bytes":3475},"server/device-scanner.ts":{"content":"// Device tool detection system for real-time scanning of user's applications and services\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nexport interface DetectedTool {\n  name: string;\n  category: string;\n  executable: string;\n  version?: string;\n  installed: boolean;\n  permissions: string[];\n  icon?: string;\n}\n\nexport interface BrowserTool {\n  name: string;\n  category: string;\n  url: string;\n  isLoggedIn: boolean;\n  permissions: string[];\n}\n\nexport class DeviceScanner {\n  private static instance: DeviceScanner;\n  private detectedTools: DetectedTool[] = [];\n  private browserTools: BrowserTool[] = [];\n\n  public static getInstance(): DeviceScanner {\n    if (!DeviceScanner.instance) {\n      DeviceScanner.instance = new DeviceScanner();\n    }\n    return DeviceScanner.instance;\n  }\n\n  // Scan system for installed applications\n  public async scanInstalledApplications(): Promise<DetectedTool[]> {\n    const tools: DetectedTool[] = [];\n    \n    try {\n      // Windows applications\n      if (process.platform === 'win32') {\n        tools.push(...await this.scanWindowsApps());\n      }\n      // macOS applications  \n      else if (process.platform === 'darwin') {\n        tools.push(...await this.scanMacApps());\n      }\n      // Linux applications\n      else if (process.platform === 'linux') {\n        tools.push(...await this.scanLinuxApps());\n      }\n\n      // Cross-platform browser-based tools\n      tools.push(...await this.scanBrowserTools());\n      \n    } catch (error) {\n      console.error('Error scanning applications:', error);\n    }\n\n    this.detectedTools = tools;\n    return tools;\n  }\n\n  private async scanWindowsApps(): Promise<DetectedTool[]> {\n    const tools: DetectedTool[] = [];\n    \n    try {\n      // Check for common business applications\n      const commonApps = [\n        { name: 'Microsoft Excel', path: 'excel.exe', category: 'productivity' },\n        { name: 'Microsoft Word', path: 'winword.exe', category: 'productivity' },\n        { name: 'Microsoft PowerPoint', path: 'powerpnt.exe', category: 'productivity' },\n        { name: 'Microsoft Outlook', path: 'outlook.exe', category: 'email' },\n        { name: 'Google Chrome', path: 'chrome.exe', category: 'browser' },\n        { name: 'Mozilla Firefox', path: 'firefox.exe', category: 'browser' },\n        { name: 'Slack', path: 'Slack.exe', category: 'communication' },\n        { name: 'Zoom', path: 'Zoom.exe', category: 'communication' },\n        { name: 'Adobe Acrobat', path: 'Acrobat.exe', category: 'productivity' },\n        { name: 'Notepad++', path: 'notepad++.exe', category: 'development' }\n      ];\n\n      for (const app of commonApps) {\n        try {\n          const { stdout } = await execAsync(`where ${app.path}`);\n          if (stdout.trim()) {\n            tools.push({\n              name: app.name,\n              category: app.category,\n              executable: app.path,\n              installed: true,\n              permissions: this.getAppPermissions(app.category)\n            });\n          }\n        } catch (error) {\n          // App not found, continue\n        }\n      }\n    } catch (error) {\n      console.error('Error scanning Windows apps:', error);\n    }\n\n    return tools;\n  }\n\n  private async scanMacApps(): Promise<DetectedTool[]> {\n    const tools: DetectedTool[] = [];\n    \n    try {\n      const commonApps = [\n        { name: 'Microsoft Excel', bundle: 'com.microsoft.Excel', category: 'productivity' },\n        { name: 'Microsoft Word', bundle: 'com.microsoft.Word', category: 'productivity' },\n        { name: 'Microsoft PowerPoint', bundle: 'com.microsoft.PowerPoint', category: 'productivity' },\n        { name: 'Microsoft Outlook', bundle: 'com.microsoft.Outlook', category: 'email' },\n        { name: 'Google Chrome', bundle: 'com.google.Chrome', category: 'browser' },\n        { name: 'Safari', bundle: 'com.apple.Safari', category: 'browser' },\n        { name: 'Slack', bundle: 'com.tinyspeck.slackmacgap', category: 'communication' },\n        { name: 'Zoom', bundle: 'us.zoom.xos', category: 'communication' },\n        { name: 'Adobe Acrobat DC', bundle: 'com.adobe.Acrobat.Pro', category: 'productivity' }\n      ];\n\n      for (const app of commonApps) {\n        try {\n          const { stdout } = await execAsync(`mdfind \"kMDItemCFBundleIdentifier == '${app.bundle}'\"`);\n          if (stdout.trim()) {\n            tools.push({\n              name: app.name,\n              category: app.category,\n              executable: app.bundle,\n              installed: true,\n              permissions: this.getAppPermissions(app.category)\n            });\n          }\n        } catch (error) {\n          // App not found, continue\n        }\n      }\n    } catch (error) {\n      console.error('Error scanning macOS apps:', error);\n    }\n\n    return tools;\n  }\n\n  private async scanLinuxApps(): Promise<DetectedTool[]> {\n    const tools: DetectedTool[] = [];\n    \n    try {\n      const commonApps = [\n        { name: 'LibreOffice Calc', cmd: 'libreoffice', category: 'productivity' },\n        { name: 'LibreOffice Writer', cmd: 'libreoffice', category: 'productivity' },\n        { name: 'Google Chrome', cmd: 'google-chrome', category: 'browser' },\n        { name: 'Mozilla Firefox', cmd: 'firefox', category: 'browser' },\n        { name: 'Slack', cmd: 'slack', category: 'communication' },\n        { name: 'Visual Studio Code', cmd: 'code', category: 'development' },\n        { name: 'Git', cmd: 'git', category: 'development' }\n      ];\n\n      for (const app of commonApps) {\n        try {\n          const { stdout } = await execAsync(`which ${app.cmd}`);\n          if (stdout.trim()) {\n            tools.push({\n              name: app.name,\n              category: app.category,\n              executable: app.cmd,\n              installed: true,\n              permissions: this.getAppPermissions(app.category)\n            });\n          }\n        } catch (error) {\n          // App not found, continue\n        }\n      }\n    } catch (error) {\n      console.error('Error scanning Linux apps:', error);\n    }\n\n    return tools;\n  }\n\n  private async scanBrowserTools(): Promise<DetectedTool[]> {\n    const tools: DetectedTool[] = [];\n    \n    // These will be detected via browser extension\n    const browserServices = [\n      { name: 'Gmail', category: 'email', permissions: ['email:send', 'email:read'] },\n      { name: 'Google Calendar', category: 'productivity', permissions: ['calendar:create', 'calendar:read'] },\n      { name: 'Google Drive', category: 'storage', permissions: ['file:read', 'file:write'] },\n      { name: 'Microsoft 365', category: 'productivity', permissions: ['office:edit', 'email:send'] },\n      { name: 'Slack Web', category: 'communication', permissions: ['message:send', 'channel:read'] },\n      { name: 'Trello', category: 'productivity', permissions: ['board:edit', 'card:create'] },\n      { name: 'Asana', category: 'productivity', permissions: ['task:create', 'project:edit'] },\n      { name: 'Salesforce', category: 'crm', permissions: ['contact:edit', 'lead:create'] },\n      { name: 'HubSpot', category: 'crm', permissions: ['contact:edit', 'deal:create'] },\n      { name: 'WordPress', category: 'cms', permissions: ['post:create', 'page:edit'] },\n      { name: 'Shopify', category: 'ecommerce', permissions: ['product:edit', 'order:read'] }\n    ];\n\n    // Mark as available but not verified (browser extension will verify)\n    for (const service of browserServices) {\n      tools.push({\n        name: service.name,\n        category: service.category,\n        executable: 'browser',\n        installed: true,\n        permissions: service.permissions\n      });\n    }\n\n    return tools;\n  }\n\n  private getAppPermissions(category: string): string[] {\n    const permissionMap: Record<string, string[]> = {\n      'productivity': ['file:read', 'file:write', 'document:edit'],\n      'email': ['email:send', 'email:read', 'contact:read'],\n      'browser': ['web:navigate', 'web:click', 'web:form'],\n      'communication': ['message:send', 'call:start', 'meeting:join'],\n      'development': ['code:edit', 'git:commit', 'deploy:execute'],\n      'crm': ['contact:edit', 'lead:create', 'deal:update'],\n      'cms': ['post:create', 'page:edit', 'media:upload'],\n      'ecommerce': ['product:edit', 'order:process', 'inventory:update']\n    };\n    \n    return permissionMap[category] || ['basic:access'];\n  }\n\n  // Get tools detected by browser extension\n  public async getBrowserDetectedTools(userId: string): Promise<BrowserTool[]> {\n    // This would typically query the browser extension via WebSocket\n    // For now, return cached browser tools\n    return this.browserTools;\n  }\n\n  // Update browser tools from extension\n  public updateBrowserTools(tools: BrowserTool[]): void {\n    this.browserTools = tools;\n  }\n\n  // Get all detected tools for a user\n  public async getDetectedTools(userId: string): Promise<{\n    installed: DetectedTool[],\n    browser: BrowserTool[]\n  }> {\n    const installed = await this.scanInstalledApplications();\n    const browser = await this.getBrowserDetectedTools(userId);\n    \n    return {\n      installed,\n      browser\n    };\n  }\n\n  // Get tools by category\n  public getToolsByCategory(category: string): DetectedTool[] {\n    return this.detectedTools.filter(tool => tool.category === category);\n  }\n}","size_bytes":9393},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { ExtensionWebSocketServer } from \"./websocket-server\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Setup WebSocket server for browser extension communication\n  const wsServer = new ExtensionWebSocketServer(server);\n  console.log('Extension WebSocket server initialized');\n  \n  // Make WebSocket server available to routes\n  const { setExtensionWebSocketServer } = await import('./routes');\n  setExtensionWebSocketServer(wsServer);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2467},"server/llmClient.ts":{"content":"// LLM Client for Replivo Agents - OpenRouter/Deepseek Integration\n// Each agent type uses its dedicated API key for quota isolation and key rotation\n\nexport type AgentType = 'business-growth' | 'operations' | 'people-finance';\n\nexport interface LLMMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface LLMResponse {\n  choices: Array<{\n    message: {\n      content: string;\n      role: string;\n    };\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\n// Map agent types to their corresponding API keys\nfunction getAgentAPIKey(agentType: AgentType): string {\n  const keyMap: Record<AgentType, string | undefined> = {\n    'business-growth': process.env.OPENAI_API_KEY1,\n    'operations': process.env.OPENAI_API_KEY2,\n    'people-finance': process.env.OPENAI_API_KEY3\n  };\n\n  const key = keyMap[agentType];\n  if (!key) {\n    console.error(`No API key found for agent type: ${agentType}`);\n    console.error(`Available env vars: ${Object.keys(process.env).filter(k => k.includes('OPENAI_API_KEY')).join(', ')}`);\n    throw new Error(`No API key configured for agent type: ${agentType}`);\n  }\n  \n  console.log(`Using API key for ${agentType}: ${key.substring(0, 8)}...`);\n  return key;\n}\n\n// Main LLM call function using OpenRouter API\nexport async function callAgentLLM(\n  agentType: AgentType,\n  messages: LLMMessage[],\n  model: string = 'openai/gpt-3.5-turbo'\n): Promise<LLMResponse> {\n  const agentKey = getAgentAPIKey(agentType);\n  \n  if (!agentKey) {\n    throw new Error(`API key not found for agent type: ${agentType}`);\n  }\n\n  const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${agentKey}`,\n      'HTTP-Referer': process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co` : 'http://localhost:5000',\n      'X-Title': 'Replivo Agent System'\n    },\n    body: JSON.stringify({\n      model,\n      messages,\n      max_tokens: 200,\n      temperature: 0.7\n    })\n  });\n\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error(`LLM API Error [${agentType}]:`, {\n      status: res.status,\n      statusText: res.statusText,\n      error: errorText,\n      model,\n      messageCount: messages.length\n    });\n    throw new Error(`LLM call failed ${res.status}: ${errorText}`);\n  }\n\n  return res.json();\n}\n\n// Agent-specific LLM calls with predefined personas\nexport async function callBusinessGrowthAgent(\n  userPrompt: string,\n  context?: string,\n  subAgent?: string,\n  conversationHistory?: any[]\n): Promise<string> {\n  // Get conversation context instead of always introducing\n  const hasHistory = conversationHistory && conversationHistory.length > 0;\n  const isFirstMessage = !hasHistory;\n  \n  const systemPrompt = isFirstMessage \n    ? `You are ${subAgent || 'Business Growth'} agent with SECURE EXECUTION POWERS.\n\nüîí SECURITY-FIRST APPROACH:\n- I ALWAYS ask permission for sensitive actions (emails, payments, posting, deleting)\n- I can safely open websites and browse information immediately\n- For actions that affect data or send messages, I request approval first\n- I explain what I want to do and wait for your \"yes\" before proceeding\n\n‚ö° CAPABILITIES WITH PERMISSION LEVELS:\nüü¢ IMMEDIATE (No permission needed):\n- Open websites (LinkedIn, Gmail, Salesforce, etc.)\n- Browse and search for information\n- Take screenshots for analysis\n- Navigate between pages\n\nüü° REQUIRES APPROVAL (Sensitive actions):\n- Send emails or messages\n- Post content to social media\n- Make purchases or payments\n- Delete or modify files\n- Submit forms with your data\n- Make calls or schedule meetings\n\nüéØ EXECUTION EXAMPLES:\nUser: \"Send email about our services\"\nMe: \"I can help you send an email about your services. I need a few details:\n- Who should I send it to? (recipient email)\n- What's the subject line?\n- Which email account should I use to send it?\n- Any specific points to include about your services?\nOnce you provide these details, I'll compose and send the real email.\"\n\nUser: \"Send email to john@company.com about our services\"\nMe: \"I'll send an email to john@company.com about your services. A couple of questions:\n- Which email account should I send from?\n- What subject line would you like?\n- Should I include any specific service details or pricing?\nOnce confirmed, I'll compose and send the actual email.\"\n\nUser: \"Open LinkedIn\"  \nMe: \"Opening LinkedIn now to access your professional network...\"\n\nüöÄ MY APPROACH: Ask permission for sensitive actions, execute safe navigation immediately.\n\nI prioritize your security while helping you accomplish your business goals efficiently.`\n    : `Continue our conversation as your Business Growth agent. I'm here to help with marketing, sales, and growth tasks. I remember our previous discussions and can reference them as needed. For actions requiring approval, I'll format as: \"ACTION_REQUIRED: [task description]\"`;\n\n  const fullPrompt = context ? `Context: ${context}\\n\\nUser Request: ${userPrompt}` : userPrompt;\n\n  const messages: LLMMessage[] = [\n    { role: 'system', content: systemPrompt },\n    ...(conversationHistory || []),\n    { role: 'user', content: fullPrompt }\n  ];\n\n  const response = await callAgentLLM('business-growth', messages, 'openai/gpt-3.5-turbo');\n  return response.choices[0].message.content;\n}\n\nexport async function callOperationsAgent(\n  userPrompt: string,\n  context?: string,\n  subAgent?: string,\n  conversationHistory?: any[]\n): Promise<string> {\n  const systemPrompt = `You are ${subAgent || 'Operations'} agent with SECURE operational capabilities. You ONLY handle workflow automation, data analysis, process optimization, and operational efficiency tasks.\n\nüîí SECURITY-FIRST OPERATIONS:\nüü¢ IMMEDIATE (No permission needed):\n- Open productivity tools (Excel, Google Sheets, Trello, Asana)\n- Browse and analyze existing files/data\n- Generate reports from existing data\n- Monitor system performance\n\nüü° REQUIRES APPROVAL (Data-sensitive actions):\n- Create, modify, or delete files\n- Upload or download documents  \n- Submit forms or send data\n- Make changes to databases\n- Set up automated workflows\n- Backup or sync operations\n\nEXECUTION APPROACH:\n- I'll clearly describe what data I need access to\n- I'll explain what changes I want to make\n- I'll wait for your approval before modifying anything\n- I'll provide progress updates during execution\n\nEXAMPLE INTERACTIONS:\nUser: \"Create a sales report\"\nMe: \"I'll create a sales report for you. I need some details:\n- Which data source should I use? (Excel file, database, CRM system)\n- What time period? (this month, quarter, year)\n- What specific metrics do you want? (revenue, units sold, top customers)\n- What format? (Excel, PDF, presentation)\nOnce you clarify, I'll access the real data and generate your actual report.\"\n\nUser: \"Update our inventory spreadsheet\"\nMe: \"I can update your inventory spreadsheet. Please tell me:\n- Which spreadsheet file should I update?\n- What changes need to be made? (new items, quantity updates, price changes)\n- Should I backup the current version first?\nI'll make the real changes to your actual spreadsheet once confirmed.\"\n\nUser: \"Open Excel\"\nMe: \"Opening Microsoft Excel now...\"\n\nSTRICT SECURITY RULES:\n- ALWAYS ask permission before modifying data\n- Never access sensitive files without explicit approval\n- Focus only on operational efficiency within my scope\n- Refuse tasks outside operations (marketing, HR, finance, customer support)\n\nI help optimize your operations while keeping your data secure.`;\n\n  const fullPrompt = context ? `Context: ${context}\\n\\nUser Request: ${userPrompt}` : userPrompt;\n\n  const messages: LLMMessage[] = [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: fullPrompt }\n  ];\n\n  const response = await callAgentLLM('operations', messages, 'openai/gpt-3.5-turbo');\n  return response.choices[0].message.content;\n}\n\nexport async function callPeopleFinanceAgent(\n  userPrompt: string,\n  context?: string,\n  subAgent?: string,\n  conversationHistory?: any[]\n): Promise<string> {\n  const systemPrompt = `You are ${subAgent || 'People & Finance'} agent with MAXIMUM SECURITY protocols. You ONLY handle HR, recruiting, payroll, financial management, and people-related tasks.\n\nüîí ULTRA-SECURE FINANCE & HR OPERATIONS:\nüü¢ IMMEDIATE (No permission needed):\n- Open HR/finance tools (QuickBooks, PayPal, Excel, LinkedIn)\n- Browse job boards for candidate research\n- View existing reports and dashboards\n\nüî¥ REQUIRES EXPLICIT APPROVAL (High-sensitivity):\n- Process any financial transactions\n- Access employee personal data\n- Send emails to candidates or employees  \n- Modify payroll or benefits data\n- Generate reports with sensitive information\n- Update financial records\n- Calculate wages or process expenses\n- Submit tax or compliance documents\n\nULTRA-SECURE APPROACH:\n- I NEVER access financial data without explicit permission\n- I clearly explain what data I need and why\n- I describe exactly what changes I'll make\n- I wait for your \"YES\" before touching any sensitive information\n- I provide detailed logs of all actions taken\n\nEXAMPLE INTERACTIONS:\nUser: \"Process this month's payroll\"\nMe: \"I'll process this month's payroll. I need to confirm:\n- Which payroll system should I access? (QuickBooks, ADP, etc.)\n- Are there any special adjustments this month? (bonuses, deductions, new hires)\n- Should I review the calculations with you before processing payments?\nThis involves real financial transactions, so I'll show you the summary before executing.\"\n\nUser: \"Send offer letter to John Smith\"\nMe: \"I'll send an offer letter to John Smith. I need these details:\n- What position are we offering?\n- What's the salary/compensation package?\n- What's the start date?\n- Which email should I send from?\n- Should I include specific benefits information?\nOnce you provide these details, I'll send the actual offer letter.\"\n\nUser: \"Find candidates for marketing role\"\nMe: \"I'll search for marketing candidates. Tell me:\n- What specific marketing role? (digital marketing, content, growth, etc.)\n- Experience level needed? (junior, mid-level, senior)\n- Location requirements? (remote, specific city, hybrid)\n- Key skills or qualifications?\nI'll search real job boards and professional networks for actual candidates.\"\n\nCRITICAL SECURITY RULES:\n- NEVER process payments without explicit approval\n- NEVER access employee data without permission\n- ALWAYS explain financial implications\n- Maintain strict confidentiality and compliance\n- Focus only on HR/Finance scope\n\nI protect your financial and employee data while helping you manage these critical business functions.`;\n\n  const fullPrompt = context ? `Context: ${context}\\n\\nUser Request: ${userPrompt}` : userPrompt;\n\n  const messages: LLMMessage[] = [\n    { role: 'system', content: systemPrompt },\n    { role: 'user', content: fullPrompt }\n  ];\n\n  const response = await callAgentLLM('people-finance', messages, 'openai/gpt-3.5-turbo');\n  return response.choices[0].message.content;\n}","size_bytes":11146},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { deviceToolsRouter } from \"./routes/device-tools\";\nimport { agentConfigRouter } from \"./routes/agent-config\";\nimport extensionRouter from \"./routes/extension\";\nimport { insertCustomRequestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport {\n  callBusinessGrowthAgent,\n  callOperationsAgent,\n  callPeopleFinanceAgent,\n  type AgentType\n} from \"./llmClient\";\nimport { DeviceScanner } from \"./device-scanner\";\nimport { ExtensionWebSocketServer } from \"./websocket-server\";\n\n// Global WebSocket server instance\nlet extensionWS: ExtensionWebSocketServer | null = null;\n\nexport function setExtensionWebSocketServer(ws: ExtensionWebSocketServer) {\n  extensionWS = ws;\n}\n\n// Helper functions for device control\nfunction getAgentRecommendedTools(agentType: AgentType, allTools: any[]) {\n  const recommendations: Record<AgentType, string[]> = {\n    'business-growth': ['Gmail', 'LinkedIn', 'Slack', 'HubSpot', 'Salesforce', 'Google Calendar', 'Trello'],\n    'operations': ['Microsoft Excel', 'Google Sheets', 'Asana', 'Trello', 'Google Drive', 'Slack'],\n    'people-finance': ['QuickBooks', 'PayPal', 'Microsoft Excel', 'Gmail', 'Google Calendar', 'LinkedIn']\n  };\n  \n  return allTools.filter(tool => \n    recommendations[agentType].some(rec => tool.name.includes(rec))\n  );\n}\n\nfunction formatActionDescription(action: string, toolName: string, parameters?: any): string {\n  const descriptions: Record<string, string> = {\n    'email:send': `Send email via ${toolName}`,\n    'contact:add': `Add new contact in ${toolName}`,\n    'post:create': `Create post in ${toolName}`,\n    'file:upload': `Upload file to ${toolName}`,\n    'calendar:create': `Create calendar event in ${toolName}`,\n    'message:send': `Send message via ${toolName}`,\n    'payment:process': `Process payment through ${toolName}`,\n    'task:create': `Create task in ${toolName}`\n  };\n  \n  const baseDescription = descriptions[action] || `Execute ${action} in ${toolName}`;\n  \n  if (parameters && parameters.subject) {\n    return `${baseDescription}: ${parameters.subject}`;\n  }\n  if (parameters && parameters.content) {\n    return `${baseDescription}: ${parameters.content.substring(0, 50)}...`;\n  }\n  \n  return baseDescription;\n}\n\nasync function executeToolAction(toolName: string, action: string, parameters?: any): Promise<any> {\n  // Execute real actions via browser extension\n  console.log(`Executing REAL ${action} on ${toolName} with parameters:`, parameters);\n  \n  // This connects to actual browser extension for real execution\n  const command = {\n    request_id: `tool-${Date.now()}`,\n    agent_id: 'system',\n    capability: action,\n    args: parameters || {}\n  };\n\n  // Send command to extension for real execution\n  if (extensionWS) {\n    const success = await extensionWS.sendCommand(parameters?.userId || 'demo-user', command);\n    if (success) {\n      return { \n        status: 'executed', \n        action, \n        tool: toolName, \n        timestamp: new Date().toISOString(),\n        real: true \n      };\n    }\n  }\n  \n  return { status: 'failed', error: 'Extension not connected', action, tool: toolName };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all agents\n  app.get(\"/api/agents\", async (req, res) => {\n    try {\n      const agents = await storage.getAllAgents();\n      res.json(agents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agents\" });\n    }\n  });\n\n  // Get featured agents\n  app.get(\"/api/agents/featured\", async (req, res) => {\n    try {\n      const agents = await storage.getFeaturedAgents();\n      res.json(agents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch featured agents\" });\n    }\n  });\n\n  // Get single agent\n  app.get(\"/api/agents/:id\", async (req, res) => {\n    try {\n      const agent = await storage.getAgent(req.params.id);\n      if (!agent) {\n        return res.status(404).json({ message: \"Agent not found\" });\n      }\n      res.json(agent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch agent\" });\n    }\n  });\n\n  // Get all sub-agents\n  app.get(\"/api/sub-agents\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      let subAgents;\n      \n      if (category && typeof category === \"string\") {\n        subAgents = await storage.getSubAgentsByCategory(category);\n      } else {\n        subAgents = await storage.getAllSubAgents();\n      }\n      \n      res.json(subAgents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sub-agents\" });\n    }\n  });\n\n  // Get single sub-agent\n  app.get(\"/api/sub-agents/:id\", async (req, res) => {\n    try {\n      const subAgent = await storage.getSubAgent(req.params.id);\n      if (!subAgent) {\n        return res.status(404).json({ message: \"Sub-agent not found\" });\n      }\n      res.json(subAgent);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch sub-agent\" });\n    }\n  });\n\n  // Create custom agent request\n  app.post(\"/api/custom-requests\", async (req, res) => {\n    try {\n      const validatedData = insertCustomRequestSchema.parse(req.body);\n      const request = await storage.createCustomRequest(validatedData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create custom request\" });\n    }\n  });\n\n  // Get all custom requests\n  app.get(\"/api/custom-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getAllCustomRequests();\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch custom requests\" });\n    }\n  });\n\n  // Extension API routes\n  app.post(\"/api/extension/pair\", async (req, res) => {\n    try {\n      const { code, extensionId } = req.body;\n      \n      if (!code || !extensionId) {\n        return res.status(400).json({ error: 'Code and extensionId required' });\n      }\n\n      const pairing = await storage.getPairingByCode(code);\n      if (!pairing) {\n        return res.status(404).json({ error: 'Invalid or expired pairing code' });\n      }\n\n      await storage.updateExtensionPairing(pairing.id, { \n        extensionId,\n        isActive: true,  // Now mark as active when extension actually connects\n        lastSeen: new Date().toISOString()\n      });\n\n      res.json({\n        success: true,\n        userId: pairing.userId,\n        websocketUrl: `/extension-ws`\n      });\n\n    } catch (error) {\n      console.error('Extension pairing error:', error);\n      res.status(500).json({ error: 'Pairing failed' });\n    }\n  });\n\n  app.post(\"/api/extension/generate-code\", async (req, res) => {\n    try {\n      const userId = req.body.userId || 'demo-user';\n      const pairingCode = Math.random().toString(36).substr(2, 8).toUpperCase();\n      \n      const pairing = await storage.createExtensionPairing({\n        userId,\n        extensionId: '',\n        pairingCode,\n        isActive: false  // Only activate when extension actually connects\n      });\n\n      res.json({\n        pairingCode,\n        pairingId: pairing.id,\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000).toISOString()\n      });\n\n    } catch (error) {\n      console.error('Code generation error:', error);\n      res.status(500).json({ error: 'Failed to generate pairing code' });\n    }\n  });\n\n  app.get(\"/api/extension/status/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      const pairings = await storage.getExtensionPairings(userId);\n      const activePairings = pairings.filter(p => p.isActive);\n\n      res.json({\n        hasPairedExtension: activePairings.length > 0 && activePairings.some(p => p.extensionId),\n        extensions: activePairings.map(p => ({\n          id: p.id,\n          extensionId: p.extensionId,\n          lastSeen: p.lastSeen,\n          isOnline: p.lastSeen && new Date(p.lastSeen).getTime() > Date.now() - 5 * 60 * 1000\n        }))\n      });\n\n    } catch (error) {\n      console.error('Status check error:', error);\n      res.status(500).json({ error: 'Failed to check status' });\n    }\n  });\n\n  // Test extension commands (for demonstration)\n  app.post(\"/api/extension/test/:capability\", async (req, res) => {\n    try {\n      const { capability } = req.params;\n      const { userId = 'demo-user' } = req.body;\n\n      // These would be handled by the WebSocket server in a real implementation\n      // For now, just return a success response\n      res.json({\n        success: true,\n        message: `Test ${capability} command queued for user ${userId}`,\n        capability,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Test command error:', error);\n      res.status(500).json({ error: 'Failed to execute test command' });\n    }\n  });\n\n  // Agent hiring and execution endpoints\n  const hireAgentSchema = z.object({\n    agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n    subAgent: z.string().optional(),\n    task: z.string(),\n    context: z.string().optional(),\n    userId: z.string().default('demo-user')\n  });\n\n  // Hire and execute agent task\n  app.post(\"/api/agents/hire\", async (req, res) => {\n    try {\n      const validatedData = hireAgentSchema.parse(req.body);\n      const { agentType, subAgent, task, context, userId } = validatedData;\n\n      // Call the appropriate agent LLM based on type\n      let agentResponse: string;\n      switch (agentType) {\n        case 'business-growth':\n          agentResponse = await callBusinessGrowthAgent(task, context, subAgent);\n          break;\n        case 'operations':\n          agentResponse = await callOperationsAgent(task, context, subAgent);\n          break;\n        case 'people-finance':\n          agentResponse = await callPeopleFinanceAgent(task, context, subAgent);\n          break;\n        default:\n          throw new Error(`Unknown agent type: ${agentType}`);\n      }\n\n      // Check if agent response requires approval\n      const needsApproval = agentResponse.includes('ACTION_REQUIRED:');\n      let cleanResponse = agentResponse;\n      let actionDescription = '';\n      \n      if (needsApproval) {\n        const actionMatch = agentResponse.match(/ACTION_REQUIRED: (.+?)(?:\\n|$)/);\n        if (actionMatch) {\n          actionDescription = actionMatch[1];\n          cleanResponse = agentResponse.replace(/ACTION_REQUIRED: .+?(?:\\n|$)/, '').trim();\n        }\n      }\n\n      // Store the task execution for audit\n      await storage.createTaskExecution({\n        userId,\n        agentType,\n        subAgent: subAgent || '',\n        task,\n        context: context || '',\n        response: agentResponse,\n        status: needsApproval ? 'pending_approval' : 'completed'\n      });\n\n      // Define sensitive actions that require approval\n      const sensitiveActions = [\n        'send', 'email', 'compose', 'post', 'publish', 'delete', 'remove',\n        'payment', 'buy', 'purchase', 'transfer', 'withdraw', 'deposit',\n        'hire', 'fire', 'terminate', 'cancel', 'refund', 'charge',\n        'share', 'invite', 'message', 'call', 'contact', 'submit'\n      ];\n\n      const isSensitiveTask = sensitiveActions.some(action => \n        task.toLowerCase().includes(action) || agentResponse.toLowerCase().includes(action)\n      );\n\n      // Only auto-execute non-sensitive navigation tasks\n      const shouldExecute = !isSensitiveTask && (\n        task.toLowerCase().includes('open') ||\n        task.toLowerCase().includes('navigate') ||\n        task.toLowerCase().includes('go to') ||\n        task.toLowerCase().includes('visit')\n      );\n\n      let executed = false;\n      let executionStatus = '';\n\n      // Check if the agent is asking for more information\n      const isAskingForInfo = agentResponse.toLowerCase().includes('i need') || \n                             agentResponse.toLowerCase().includes('please tell me') ||\n                             agentResponse.toLowerCase().includes('which') ||\n                             agentResponse.toLowerCase().includes('what') ||\n                             agentResponse.toLowerCase().includes('details:') ||\n                             agentResponse.toLowerCase().includes('questions:');\n\n      // Handle sensitive tasks that require approval\n      if (isSensitiveTask && !isAskingForInfo) {\n        // Store task as pending approval  \n        const sensitiveAction = sensitiveActions.find(action => \n          task.toLowerCase().includes(action) || agentResponse.toLowerCase().includes(action)\n        );\n        \n        cleanResponse += `\\n\\nüîí **READY TO EXECUTE**\\nThis will perform a real \"${sensitiveAction}\" action.\\n\\n**Confirm to proceed with actual execution.**`;\n        \n        return res.json({\n          success: true,\n          agentType,\n          subAgent,\n          response: cleanResponse,\n          needsApproval: true,\n          sensitiveAction,\n          actionDescription: `Execute: ${task}`,\n          executed: false,\n          executionStatus: 'Ready for real execution - awaiting confirmation',\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      if (shouldExecute && !needsApproval) {\n        // Only execute safe navigation tasks\n        let command = null;\n        \n        if (task.toLowerCase().includes('linkedin')) {\n          command = {\n            request_id: `hire-${Date.now()}`,\n            agent_id: agentType,\n            capability: 'open_url',\n            args: { url: 'https://linkedin.com' }\n          };\n          executionStatus = 'Opening LinkedIn...';\n        } else if (task.toLowerCase().includes('salesforce') || task.toLowerCase().includes('crm')) {\n          command = {\n            request_id: `hire-${Date.now()}`,\n            agent_id: agentType,\n            capability: 'open_url',\n            args: { url: 'https://salesforce.com' }\n          };\n          executionStatus = 'Opening Salesforce...';\n        } else if (task.toLowerCase().includes('calendar')) {\n          command = {\n            request_id: `hire-${Date.now()}`,\n            agent_id: agentType,\n            capability: 'open_url',\n            args: { url: 'https://calendar.google.com' }\n          };\n          executionStatus = 'Opening Google Calendar...';\n        } else if (task.toLowerCase().includes('gmail') && !task.toLowerCase().includes('send')) {\n          // Only open Gmail, don't compose\n          command = {\n            request_id: `hire-${Date.now()}`,\n            agent_id: agentType,\n            capability: 'open_url',\n            args: { url: 'https://gmail.com' }\n          };\n          executionStatus = 'Opening Gmail...';\n        }\n\n        if (command) {\n          try {\n            const success = extensionWS ? await extensionWS.sendCommand(userId, command) : false;\n            if (success) {\n              executed = true;\n              cleanResponse += `\\n\\n‚úÖ **Executing now:** ${executionStatus}`;\n            } else {\n              cleanResponse += `\\n\\n‚ö†Ô∏è **Extension not connected.** Please pair your browser extension first.`;\n            }\n          } catch (error) {\n            console.error('Command execution error:', error);\n            cleanResponse += `\\n\\n‚ùå **Execution failed:** ${(error as Error).message}`;\n          }\n        }\n      }\n\n      res.json({\n        success: true,\n        agentType,\n        subAgent,\n        response: cleanResponse,\n        needsApproval,\n        actionDescription,\n        executed,\n        executionStatus,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Agent hire error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n\n      if (error instanceof Error && error.message.includes('API key not found')) {\n        return res.status(500).json({ \n          message: \"Agent configuration error\", \n          error: \"API key not properly configured for this agent type\" \n        });\n      }\n\n      if (error instanceof Error && error.message.includes('LLM call failed')) {\n        return res.status(502).json({ \n          message: \"External service error\", \n          error: \"Failed to connect to AI service\" \n        });\n      }\n\n      res.status(500).json({ message: \"Failed to execute agent task\" });\n    }\n  });\n\n  // Get user's hired agents and task history\n  app.get(\"/api/agents/hired/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { limit = 50, offset = 0 } = req.query;\n      \n      const taskHistory = await storage.getUserTaskHistory(\n        userId, \n        parseInt(limit as string), \n        parseInt(offset as string)\n      );\n\n      res.json({\n        tasks: taskHistory.map(task => ({\n          id: task.id,\n          agentType: task.agentType,\n          subAgent: task.subAgent,\n          task: task.task,\n          status: task.status,\n          createdAt: task.createdAt,\n          executedAt: task.executedAt\n        }))\n      });\n\n    } catch (error) {\n      console.error('Task history error:', error);\n      res.status(500).json({ error: 'Failed to get task history' } as any);\n    }\n  });\n\n  // Test agent connectivity (for debugging)\n  app.post(\"/api/agents/test/:agentType\", async (req, res) => {\n    try {\n      const { agentType } = req.params;\n      \n      if (!['business-growth', 'operations', 'people-finance'].includes(agentType)) {\n        return res.status(400).json({ error: 'Invalid agent type' });\n      }\n\n      const testPrompt = \"Respond with a simple JSON object containing 'status': 'online' and 'agent': your agent type.\";\n      \n      let response: string;\n      switch (agentType as AgentType) {\n        case 'business-growth':\n          response = await callBusinessGrowthAgent(testPrompt);\n          break;\n        case 'operations':\n          response = await callOperationsAgent(testPrompt);\n          break;\n        case 'people-finance':\n          response = await callPeopleFinanceAgent(testPrompt);\n          break;\n      }\n\n      res.json({\n        success: true,\n        agentType,\n        response,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Agent test error:', error);\n      res.status(500).json({ \n        error: 'Agent test failed',\n        agentType: req.params.agentType,\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Real-time agent chat endpoint\n  const agentChatSchema = z.object({\n    agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n    message: z.string(),\n    conversationId: z.string().optional(),\n    userId: z.string().default('demo-user')\n  });\n\n  app.post(\"/api/agents/chat\", async (req, res) => {\n    try {\n      const validatedData = agentChatSchema.parse(req.body);\n      const { agentType, message, conversationId, userId } = validatedData;\n\n      // Get conversation history for context\n      const conversationHistory = await storage.getConversationHistory(userId, agentType);\n      const historyMessages = conversationHistory?.messages || [];\n\n      // Call the appropriate agent LLM with conversation context\n      let agentResponse: string;\n      switch (agentType) {\n        case 'business-growth':\n          agentResponse = await callBusinessGrowthAgent(message, `Conversation ID: ${conversationId}`, undefined, historyMessages);\n          break;\n        case 'operations':\n          agentResponse = await callOperationsAgent(message, `Conversation ID: ${conversationId}`, undefined, historyMessages);\n          break;\n        case 'people-finance':\n          agentResponse = await callPeopleFinanceAgent(message, `Conversation ID: ${conversationId}`, undefined, historyMessages);\n          break;\n        default:\n          throw new Error(`Unknown agent type: ${agentType}`);\n      }\n\n      // Update conversation history\n      const newMessages = [\n        ...historyMessages.slice(-10), // Keep last 10 messages for context\n        { role: 'user', content: message },\n        { role: 'assistant', content: agentResponse }\n      ];\n      \n      if (conversationHistory) {\n        await storage.updateConversationHistory(conversationHistory.id, {\n          messages: newMessages\n        });\n      } else {\n        await storage.createConversationHistory({\n          userId,\n          agentType,\n          conversationId: conversationId || Date.now().toString(),\n          messages: newMessages,\n          context: `lastInteraction: ${new Date().toISOString()}`\n        });\n      }\n\n      // Check if response needs approval\n      const needsApproval = agentResponse.includes('ACTION_REQUIRED:');\n      let cleanResponse = agentResponse;\n      let actionDescription = '';\n      \n      if (needsApproval) {\n        const actionMatch = agentResponse.match(/ACTION_REQUIRED: (.+?)(?:\\n|$)/);\n        if (actionMatch) {\n          actionDescription = actionMatch[1];\n          cleanResponse = agentResponse.replace(/ACTION_REQUIRED: .+?(?:\\n|$)/, '').trim();\n        }\n      }\n\n      // Check if chat message should trigger immediate execution\n      const shouldExecute = message.toLowerCase().includes('execute') || \n                           message.toLowerCase().includes('do it') ||\n                           message.toLowerCase().includes('start now') ||\n                           message.toLowerCase().includes('run') ||\n                           message.toLowerCase().includes('send') ||\n                           message.toLowerCase().includes('email') ||\n                           message.toLowerCase().includes('open') ||\n                           message.toLowerCase().includes('compose') ||\n                           agentResponse.toLowerCase().includes('sending') ||\n                           agentResponse.toLowerCase().includes('opening') ||\n                           agentResponse.toLowerCase().includes('executing');\n\n      let executed = false;\n      let executionStatus = '';\n\n      if (shouldExecute && !needsApproval) {\n        // Determine appropriate command based on message content\n        let command = null;\n        \n        if (message.toLowerCase().includes('gmail') || message.toLowerCase().includes('email') || message.toLowerCase().includes('send')) {\n          // Check if this is a specific email sending task\n          const emailMatch = message.match(/send.*email.*to\\s+([^\\s]+@[^\\s]+)/i) || message.match(/email.*([^\\s]+@[^\\s]+)/i);\n          \n          if (emailMatch) {\n            const recipient = emailMatch[1];\n            command = {\n              request_id: `chat-${Date.now()}`,\n              capability: 'compose_email',\n              args: { \n                recipient: recipient,\n                subject: message.includes('business') || message.includes('services') ? 'Business Services Inquiry' : 'Email from Agent',\n                body: message.includes('business') || message.includes('services') ? 'Hello,\\n\\nI hope this email finds you well. I wanted to reach out to discuss our business services and how we can help your organization.\\n\\nWe offer comprehensive solutions that can drive growth and efficiency for your business. I would love to schedule a time to discuss your specific needs and how we can support your goals.\\n\\nPlease let me know if you would be interested in learning more.\\n\\nBest regards,\\nBusiness Development Team' : 'Hello,\\n\\nThis is an automated email from your business agent.\\n\\nBest regards'\n              }\n            };\n            executionStatus = `Composing and sending email to ${recipient}...`;\n          } else {\n            command = {\n              request_id: `chat-${Date.now()}`,\n              capability: 'open_url',\n              args: { url: 'https://gmail.com' }\n            };\n            executionStatus = 'Opening Gmail...';\n          }\n        } else if (message.toLowerCase().includes('linkedin')) {\n          command = {\n            request_id: `chat-${Date.now()}`,\n            capability: 'open_url',\n            args: { url: 'https://linkedin.com' }\n          };\n          executionStatus = 'Opening LinkedIn...';\n        } else if (message.toLowerCase().includes('salesforce')) {\n          command = {\n            request_id: `chat-${Date.now()}`,\n            capability: 'open_url',\n            args: { url: 'https://salesforce.com' }\n          };\n          executionStatus = 'Opening Salesforce...';\n        }\n\n        if (command) {\n          try {\n            const success = extensionWS ? await extensionWS.sendCommand(userId, command) : false;\n            if (success) {\n              executed = true;\n              cleanResponse += `\\n\\n‚úÖ **Executing:** ${executionStatus}`;\n            } else {\n              cleanResponse += `\\n\\n‚ö†Ô∏è **Extension not connected.** Please pair your browser extension first.`;\n            }\n          } catch (error) {\n            console.error('Command execution error:', error);\n          }\n        }\n      }\n\n      res.json({\n        success: true,\n        agentType,\n        response: cleanResponse,\n        needsApproval,\n        actionDescription,\n        executed,\n        executionStatus,\n        conversationId: conversationId || Date.now().toString(),\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Agent chat error:', error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Task approval endpoint\n  const approvalSchema = z.object({\n    taskId: z.string(),\n    approved: z.boolean(),\n    userId: z.string().default('demo-user')\n  });\n\n  app.post(\"/api/agents/approve\", async (req, res) => {\n    try {\n      const validatedData = approvalSchema.parse(req.body);\n      const { taskId, approved, userId } = validatedData;\n\n      console.log(`Task ${taskId} ${approved ? 'approved' : 'rejected'} by ${userId}`);\n      \n      if (approved) {\n        // Send task to browser extension for execution\n        // This would be handled by the WebSocket server\n        console.log(`Sending task ${taskId} to extension for execution`);\n      }\n\n      res.json({\n        success: true,\n        taskId,\n        approved,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Approval error:', error);\n      res.status(500).json({ message: \"Failed to process approval\" });\n    }\n  });\n\n  // Voice chat endpoint (text-to-speech simulation)\n  app.post(\"/api/agents/voice\", async (req, res) => {\n    try {\n      const { text, voice = 'agent' } = req.body;\n      \n      if (!text) {\n        return res.status(400).json({ error: 'Text is required' });\n      }\n\n      // For now, just return the text with voice metadata\n      // In a full implementation, you'd use a TTS service like ElevenLabs or Azure\n      res.json({\n        success: true,\n        text,\n        voice,\n        audioUrl: null, // Would be actual audio URL in production\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Voice endpoint error:', error);\n      res.status(500).json({ error: 'Voice processing failed' });\n    }\n  });\n\n  // Device permission and auto-detection endpoint\n  const devicePermissionSchema = z.object({\n    userId: z.string().default('demo-user'),\n    agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n    requestPermissions: z.boolean().default(true)\n  });\n\n  app.post(\"/api/device/auto-detect\", async (req, res) => {\n    try {\n      const validatedData = devicePermissionSchema.parse(req.body);\n      const { userId, agentType, requestPermissions } = validatedData;\n\n      // Auto-detect all available tools on the device\n      const scanner = DeviceScanner.getInstance();\n      const detectedTools = await scanner.getDetectedTools(userId);\n      \n      // Categorize tools by sensitivity and capability\n      const categorizedTools = {\n        safe: detectedTools.installed.filter(tool => \n          ['productivity', 'browser', 'development'].includes(tool.category)\n        ),\n        sensitive: detectedTools.installed.filter(tool => \n          ['email', 'communication', 'crm', 'ecommerce'].includes(tool.category)\n        ),\n        browser: detectedTools.browser\n      };\n\n      // Get agent-specific tool recommendations\n      const recommendedTools = getAgentRecommendedTools(agentType, detectedTools.installed.concat(\n        detectedTools.browser.map(bt => ({\n          name: bt.name,\n          category: bt.category,\n          executable: 'browser',\n          installed: true,\n          permissions: bt.permissions\n        }))\n      ));\n\n      // Store detection results for this user-agent combination\n      await storage.saveDetectedTools(userId, detectedTools.installed.map(tool => ({\n        userId,\n        toolName: tool.name,\n        category: tool.category,\n        executable: tool.executable,\n        version: tool.version,\n        installed: tool.installed,\n        permissions: tool.permissions\n      })));\n\n      res.json({\n        success: true,\n        autoDetected: {\n          totalTools: detectedTools.installed.length + detectedTools.browser.length,\n          safeTools: categorizedTools.safe,\n          sensitiveTools: categorizedTools.sensitive,\n          browserTools: categorizedTools.browser,\n          recommendedForAgent: recommendedTools\n        },\n        permissionsRequired: requestPermissions,\n        message: `Detected ${detectedTools.installed.length + detectedTools.browser.length} tools for ${agentType} agent. Review and approve tool access below.`,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Auto-detection error:', error);\n      res.status(500).json({ error: 'Failed to auto-detect device tools' });\n    }\n  });\n\n  // Grant tool permissions to agent\n  const grantPermissionSchema = z.object({\n    userId: z.string().default('demo-user'),\n    agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n    approvedTools: z.array(z.object({\n      toolName: z.string(),\n      permissions: z.array(z.string()),\n      category: z.string()\n    }))\n  });\n\n  app.post(\"/api/device/grant-permissions\", async (req, res) => {\n    try {\n      const validatedData = grantPermissionSchema.parse(req.body);\n      const { userId, agentType, approvedTools } = validatedData;\n\n      // Store approved permissions\n      for (const tool of approvedTools) {\n        await storage.createToolPermission({\n          userId,\n          agentType,\n          toolName: tool.toolName,\n          permissions: tool.permissions,\n          category: tool.category,\n          granted: true,\n          grantedAt: new Date().toISOString()\n        });\n      }\n\n      // Notify WebSocket clients about permission grants\n      // This would be handled by the WebSocket server in production\n      console.log(`Permissions granted to ${agentType} agent for ${approvedTools.length} tools`);\n\n      res.json({\n        success: true,\n        message: `${agentType} agent can now access ${approvedTools.length} approved tools`,\n        approvedTools: approvedTools.map(t => t.toolName),\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Permission grant error:', error);\n      res.status(500).json({ error: 'Failed to grant tool permissions' });\n    }\n  });\n\n  // Background task execution endpoint\n  const backgroundTaskSchema = z.object({\n    userId: z.string().default('demo-user'),\n    agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n    taskId: z.string(),\n    toolName: z.string(),\n    action: z.string(),\n    parameters: z.record(z.any()).optional(),\n    requiresApproval: z.boolean().default(false)\n  });\n\n  app.post(\"/api/agents/execute-background\", async (req, res) => {\n    try {\n      const validatedData = backgroundTaskSchema.parse(req.body);\n      const { userId, agentType, taskId, toolName, action, parameters, requiresApproval } = validatedData;\n\n      // Check if agent has permission for this tool\n      const hasPermission = await storage.checkToolPermission(userId, agentType, toolName);\n      if (!hasPermission) {\n        return res.status(403).json({ \n          error: 'Agent does not have permission to use this tool',\n          requiresPermission: true,\n          toolName \n        });\n      }\n\n      // Check if action requires explicit approval\n      const sensitiveActions = ['email:send', 'payment:process', 'file:delete', 'contact:add', 'post:publish'];\n      const isSensitive = sensitiveActions.some(sa => action.includes(sa));\n      \n      if (isSensitive || requiresApproval) {\n        // Store pending action for approval\n        await storage.createPendingAction({\n          userId,\n          agentType,\n          taskId,\n          toolName,\n          action,\n          parameters: JSON.stringify(parameters || {}),\n          status: 'pending_approval',\n          requiresApproval: true\n        });\n\n        return res.json({\n          success: true,\n          status: 'pending_approval',\n          message: `Action \"${action}\" on ${toolName} requires your approval before execution`,\n          taskId,\n          actionDescription: formatActionDescription(action, toolName, parameters),\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Execute non-sensitive action immediately\n      const executionResult = await executeToolAction(toolName, action, parameters);\n      \n      // Store execution record\n      await storage.createActionExecution({\n        userId,\n        agentType,\n        taskId,\n        toolName,\n        action,\n        parameters: JSON.stringify(parameters || {}),\n        result: JSON.stringify(executionResult),\n        status: 'completed',\n        executedAt: new Date().toISOString()\n      });\n\n      // Notify user of completed action\n      await storage.createActionNotification({\n        userId,\n        agentType,\n        message: `${agentType} agent completed: ${formatActionDescription(action, toolName, parameters)}`,\n        actionType: action,\n        toolName,\n        timestamp: new Date().toISOString()\n      });\n\n      res.json({\n        success: true,\n        status: 'completed',\n        result: executionResult,\n        message: `Action completed on ${toolName}`,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Background execution error:', error);\n      res.status(500).json({ error: 'Failed to execute background task' });\n    }\n  });\n\n  // Action approval endpoint\n  const actionApprovalSchema = z.object({\n    userId: z.string().default('demo-user'),\n    actionId: z.string(),\n    approved: z.boolean(),\n    note: z.string().optional()\n  });\n\n  app.post(\"/api/agents/approve-action\", async (req, res) => {\n    try {\n      const validatedData = actionApprovalSchema.parse(req.body);\n      const { userId, actionId, approved, note } = validatedData;\n\n      const pendingAction = await storage.getPendingAction(actionId);\n      if (!pendingAction) {\n        return res.status(404).json({ error: 'Pending action not found' });\n      }\n\n      if (approved) {\n        // Execute the approved action\n        const executionResult = await executeToolAction(\n          pendingAction.toolName, \n          pendingAction.action, \n          JSON.parse(pendingAction.parameters)\n        );\n\n        // Update pending action status\n        await storage.updatePendingAction(actionId, {\n          status: 'approved_executed',\n          result: JSON.stringify(executionResult),\n          approvedAt: new Date().toISOString(),\n          note\n        });\n\n        // Create execution record\n        await storage.createActionExecution({\n          userId,\n          agentType: pendingAction.agentType,\n          taskId: pendingAction.taskId,\n          toolName: pendingAction.toolName,\n          action: pendingAction.action,\n          parameters: pendingAction.parameters,\n          result: JSON.stringify(executionResult),\n          status: 'completed',\n          executedAt: new Date().toISOString()\n        });\n\n        res.json({\n          success: true,\n          status: 'approved_executed',\n          result: executionResult,\n          message: `Action approved and executed successfully`,\n          timestamp: new Date().toISOString()\n        });\n      } else {\n        // Reject the action\n        await storage.updatePendingAction(actionId, {\n          status: 'rejected',\n          rejectedAt: new Date().toISOString(),\n          note\n        });\n\n        res.json({\n          success: true,\n          status: 'rejected',\n          message: 'Action rejected by user',\n          timestamp: new Date().toISOString()\n        });\n      }\n\n    } catch (error) {\n      console.error('Action approval error:', error);\n      res.status(500).json({ error: 'Failed to process action approval' });\n    }\n  });\n\n  // Get user notifications\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { limit = 20, offset = 0 } = req.query;\n      \n      const notifications = await storage.getUserNotifications(\n        userId, \n        parseInt(limit as string), \n        parseInt(offset as string)\n      );\n\n      res.json({\n        success: true,\n        notifications,\n        count: notifications.length\n      });\n\n    } catch (error) {\n      console.error('Notifications error:', error);\n      res.status(500).json({ error: 'Failed to fetch notifications' });\n    }\n  });\n\n  // Get pending actions for approval\n  app.get(\"/api/agents/pending-actions/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const pendingActions = await storage.getPendingActions(userId);\n\n      const formattedActions = pendingActions.map(action => ({\n        id: action.id,\n        agentType: action.agentType,\n        taskId: action.taskId,\n        toolName: action.toolName,\n        action: action.action,\n        description: formatActionDescription(action.action, action.toolName, JSON.parse(action.parameters)),\n        createdAt: action.createdAt,\n        requiresApproval: action.requiresApproval\n      }));\n\n      res.json({\n        success: true,\n        pendingActions: formattedActions,\n        count: formattedActions.length\n      });\n\n    } catch (error) {\n      console.error('Pending actions error:', error);\n      res.status(500).json({ error: 'Failed to fetch pending actions' });\n    }\n  });\n\n  // Device tool detection and agent configuration routes\n  app.use(\"/api/device-tools\", deviceToolsRouter);\n  app.use(\"/api/agent-config\", agentConfigRouter);\n  app.use(\"/api/extension\", extensionRouter);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":38963},"server/storage.ts":{"content":"import { type User, type InsertUser, type Agent, type InsertAgent, type SubAgent, type InsertSubAgent, type CustomRequest, type InsertCustomRequest, type UserPermission, type InsertUserPermission, type ExtensionPairing, type InsertExtensionPairing, type CommandLog, type InsertCommandLog, type VoiceInteraction, type InsertVoiceInteraction, type TaskExecution, type InsertTaskExecution, type AgentConfiguration, type InsertAgentConfiguration, type ConversationHistory, type InsertConversationHistory, type DetectedTool, type InsertDetectedTool, type ToolPermission, type InsertToolPermission, type PendingAction, type InsertPendingAction, type ActionExecution, type InsertActionExecution, type ActionNotification, type InsertActionNotification } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { DeviceScanner } from './device-scanner';\nimport { defaultAgentTasks } from '../shared/agent-config';\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getAllAgents(): Promise<Agent[]>;\n  getFeaturedAgents(): Promise<Agent[]>;\n  getAgent(id: string): Promise<Agent | undefined>;\n  createAgent(agent: InsertAgent): Promise<Agent>;\n  \n  getAllSubAgents(): Promise<SubAgent[]>;\n  getSubAgentsByCategory(category: string): Promise<SubAgent[]>;\n  getSubAgent(id: string): Promise<SubAgent | undefined>;\n  createSubAgent(subAgent: InsertSubAgent): Promise<SubAgent>;\n  \n  createCustomRequest(request: InsertCustomRequest): Promise<CustomRequest>;\n  getAllCustomRequests(): Promise<CustomRequest[]>;\n  \n  // Extension and permission management\n  createUserPermission(permission: InsertUserPermission): Promise<UserPermission>;\n  getUserPermissions(userId: string): Promise<UserPermission[]>;\n  updateUserPermission(id: string, updates: Partial<UserPermission>): Promise<void>;\n  \n  createExtensionPairing(pairing: InsertExtensionPairing): Promise<ExtensionPairing>;\n  getExtensionPairings(userId: string): Promise<ExtensionPairing[]>;\n  getPairingByCode(code: string): Promise<ExtensionPairing | undefined>;\n  updateExtensionPairing(id: string, updates: Partial<ExtensionPairing>): Promise<void>;\n  updateExtensionLastSeen(id: string): Promise<void>;\n  \n  createCommandLog(command: InsertCommandLog): Promise<CommandLog>;\n  getCommandLog(userId: string, limit?: number, offset?: number): Promise<CommandLog[]>;\n  updateCommandResult(requestId: string, updates: { status: string; result?: any; error?: string; executedAt: string }): Promise<void>;\n  \n  createVoiceInteraction(interaction: InsertVoiceInteraction): Promise<VoiceInteraction>;\n  getVoiceInteractions(userId: string, limit?: number): Promise<VoiceInteraction[]>;\n  \n  createTaskExecution(task: InsertTaskExecution): Promise<TaskExecution>;\n  getUserTaskHistory(userId: string, limit?: number, offset?: number): Promise<TaskExecution[]>;\n  \n  // Agent configuration management\n  createAgentConfiguration(config: InsertAgentConfiguration): Promise<AgentConfiguration>;\n  getAgentConfiguration(userId: string, agentType: string): Promise<AgentConfiguration | undefined>;\n  updateAgentConfiguration(id: string, updates: Partial<AgentConfiguration>): Promise<void>;\n  \n  // Conversation history management\n  createConversationHistory(conversation: InsertConversationHistory): Promise<ConversationHistory>;\n  getConversationHistory(userId: string, agentType: string): Promise<ConversationHistory | undefined>;\n  updateConversationHistory(id: string, updates: Partial<ConversationHistory>): Promise<void>;\n  \n  // Device tool detection\n  saveDetectedTools(userId: string, tools: InsertDetectedTool[]): Promise<void>;\n  getDetectedTools(userId: string): Promise<DetectedTool[]>;\n  updateDetectedTool(id: string, updates: Partial<DetectedTool>): Promise<void>;\n  \n  // Device control and permissions\n  createToolPermission(permission: InsertToolPermission): Promise<ToolPermission>;\n  checkToolPermission(userId: string, agentType: string, toolName: string): Promise<boolean>;\n  getToolPermissions(userId: string, agentType?: string): Promise<ToolPermission[]>;\n  \n  createPendingAction(action: InsertPendingAction): Promise<PendingAction>;\n  getPendingAction(actionId: string): Promise<PendingAction | undefined>;\n  getPendingActions(userId: string): Promise<PendingAction[]>;\n  updatePendingAction(actionId: string, updates: Partial<PendingAction>): Promise<void>;\n  \n  createActionExecution(execution: InsertActionExecution): Promise<ActionExecution>;\n  getActionExecutions(userId: string, limit?: number): Promise<ActionExecution[]>;\n  \n  createActionNotification(notification: InsertActionNotification): Promise<ActionNotification>;\n  getUserNotifications(userId: string, limit?: number, offset?: number): Promise<ActionNotification[]>;\n  markNotificationRead(notificationId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private agents: Map<string, Agent>;\n  private subAgents: Map<string, SubAgent>;\n  private customRequests: Map<string, CustomRequest>;\n  private userPermissions: Map<string, UserPermission>;\n  private extensionPairings: Map<string, ExtensionPairing>;\n  private commandLogs: Map<string, CommandLog>;\n  private voiceInteractions: Map<string, VoiceInteraction>;\n  private taskExecutions: Map<string, TaskExecution>;\n  private agentConfigurations: Map<string, AgentConfiguration>;\n  private conversationHistories: Map<string, ConversationHistory>;\n  private detectedTools: Map<string, DetectedTool>;\n  private toolPermissions: Map<string, ToolPermission>;\n  private pendingActions: Map<string, PendingAction>;\n  private actionExecutions: Map<string, ActionExecution>;\n  private actionNotifications: Map<string, ActionNotification>;\n  private deviceScanner: DeviceScanner;\n\n  constructor() {\n    this.users = new Map();\n    this.agents = new Map();\n    this.subAgents = new Map();\n    this.customRequests = new Map();\n    this.userPermissions = new Map();\n    this.extensionPairings = new Map();\n    this.commandLogs = new Map();\n    this.voiceInteractions = new Map();\n    this.taskExecutions = new Map();\n    this.agentConfigurations = new Map();\n    this.conversationHistories = new Map();\n    this.detectedTools = new Map();\n    this.toolPermissions = new Map();\n    this.pendingActions = new Map();\n    this.actionExecutions = new Map();\n    this.actionNotifications = new Map();\n    this.deviceScanner = DeviceScanner.getInstance();\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize sample sub-agents with enhanced data\n    const subAgents: InsertSubAgent[] = [\n      {\n        name: \"Content Creator\",\n        description: \"Creates engaging blog posts, articles, and web copy with SEO optimization\",\n        icon: \"fas fa-pen-fancy\",\n        price: 2900,\n        category: \"content\",\n        currentTask: \"Writing blog post about AI trends...\",\n        taskStatus: \"working\",\n        rating: 47,\n        reviewCount: 284,\n        recentUpdates: [\"Enhanced writing quality\", \"Added SEO optimization\", \"Improved speed\"],\n        demoScript: \"I can help you create compelling content that engages your audience and drives conversions.\",\n        integrations: [\"WordPress\", \"HubSpot\", \"Google Docs\", \"Notion\"],\n        totalHires: 342\n      },\n      {\n        name: \"Social Media Manager\",\n        description: \"Schedules posts and manages social presence across all platforms\",\n        icon: \"fab fa-instagram\",\n        price: 3900,\n        category: \"content\",\n        currentTask: \"Scheduling posts for next week...\",\n        taskStatus: \"working\",\n        rating: 45,\n        reviewCount: 192,\n        recentUpdates: [\"Multi-platform posting\", \"Analytics integration\", \"Content calendar\"],\n        demoScript: \"I'll manage your social media presence and grow your audience engagement.\",\n        integrations: [\"Instagram\", \"Twitter\", \"LinkedIn\", \"Facebook\", \"TikTok\"],\n        totalHires: 256\n      },\n      {\n        name: \"SEO Specialist\",\n        description: \"Optimizes content for search engines and tracks rankings\",\n        icon: \"fas fa-search\",\n        price: 4900,\n        category: \"content\",\n        currentTask: \"Analyzing keyword opportunities...\",\n        taskStatus: \"working\",\n        rating: 48,\n        reviewCount: 367,\n        recentUpdates: [\"Advanced keyword research\", \"Competitor analysis\", \"SERP tracking\"],\n        demoScript: \"I'll boost your search rankings and drive organic traffic to your site.\",\n        integrations: [\"Google Analytics\", \"SEMrush\", \"Ahrefs\", \"Search Console\"],\n        totalHires: 428\n      },\n      {\n        name: \"Data Analyst\",\n        description: \"Generates detailed performance reports and business insights\",\n        icon: \"fas fa-chart-line\",\n        price: 3500,\n        category: \"analytics\",\n        currentTask: \"Creating monthly performance report...\",\n        taskStatus: \"working\",\n        rating: 46,\n        reviewCount: 156,\n        recentUpdates: [\"Real-time dashboards\", \"Predictive analytics\", \"Custom metrics\"],\n        demoScript: \"I'll analyze your data and provide actionable insights for business growth.\",\n        integrations: [\"Google Analytics\", \"Tableau\", \"Power BI\", \"Salesforce\"],\n        totalHires: 189\n      },\n      {\n        name: \"Database Manager\",\n        description: \"Processes and cleans large datasets with automated workflows\",\n        icon: \"fas fa-database\",\n        price: 5900,\n        category: \"analytics\",\n        currentTask: \"Processing customer data...\",\n        taskStatus: \"working\",\n        rating: 44,\n        reviewCount: 89,\n        recentUpdates: [\"Automated data cleaning\", \"Real-time processing\", \"Data validation\"],\n        demoScript: \"I'll manage your databases and ensure data quality and security.\",\n        integrations: [\"MySQL\", \"PostgreSQL\", \"MongoDB\", \"Redis\"],\n        totalHires: 143\n      },\n      {\n        name: \"Report Generator\",\n        description: \"Creates charts and interactive dashboards for data visualization\",\n        icon: \"fas fa-chart-pie\",\n        price: 4500,\n        category: \"analytics\",\n        currentTask: \"Building interactive dashboard...\",\n        taskStatus: \"working\",\n        rating: 45,\n        reviewCount: 203,\n        recentUpdates: [\"Interactive charts\", \"Real-time updates\", \"Mobile responsive\"],\n        demoScript: \"I'll create stunning visualizations that make your data easy to understand.\",\n        integrations: [\"D3.js\", \"Chart.js\", \"Plotly\", \"Grafana\"],\n        totalHires: 267\n      },\n      {\n        name: \"Ticket Manager\",\n        description: \"Manages and routes support tickets with intelligent prioritization\",\n        icon: \"fas fa-inbox\",\n        price: 3200,\n        category: \"support\",\n        currentTask: \"Managing support queue...\",\n        taskStatus: \"working\",\n        rating: 43,\n        reviewCount: 178,\n        recentUpdates: [\"Smart routing\", \"Priority detection\", \"Auto-responses\"],\n        demoScript: \"I'll manage your support tickets and ensure customers get quick responses.\",\n        integrations: [\"Zendesk\", \"Freshdesk\", \"Intercom\", \"ServiceNow\"],\n        totalHires: 234\n      },\n      {\n        name: \"Customer Support\",\n        description: \"Provides 24/7 customer chat support with personalized responses\",\n        icon: \"fas fa-comments\",\n        price: 4200,\n        category: \"support\",\n        currentTask: \"Helping customer with refund...\",\n        taskStatus: \"working\",\n        rating: 48,\n        reviewCount: 445,\n        recentUpdates: [\"Natural language processing\", \"Sentiment analysis\", \"Multi-language\"],\n        demoScript: \"I'll provide excellent customer support and resolve issues quickly.\",\n        integrations: [\"Slack\", \"Discord\", \"WhatsApp\", \"Live Chat\"],\n        totalHires: 578\n      }\n    ];\n\n    subAgents.forEach(subAgent => {\n      const id = randomUUID();\n      const fullSubAgent: SubAgent = { \n        rating: 45,\n        reviewCount: 0,\n        recentUpdates: [],\n        demoScript: null,\n        integrations: [],\n        totalHires: 0,\n        taskStatus: 'idle',\n        currentTask: null,\n        ...subAgent, \n        id \n      };\n      this.subAgents.set(id, fullSubAgent);\n    });\n\n    // Initialize sample main agents\n    const agents: InsertAgent[] = [\n      {\n        name: \"Business Growth\",\n        description: \"Scale your revenue with intelligent lead generation, sales automation, and growth optimization strategies.\",\n        icon: \"fas fa-bullhorn\",\n        price: 9900,\n        rating: 49,\n        reviewCount: 127,\n        category: \"growth\",\n        isBundle: true,\n        subAgentIds: Array.from(this.subAgents.values())\n          .filter(sa => sa.category === \"content\")\n          .map(sa => sa.id),\n        tasks: [\n          \"Generating qualified leads...\",\n          \"Optimizing conversion funnels...\",\n          \"Running A/B tests...\",\n          \"Analyzing growth metrics...\",\n          \"Scaling successful campaigns...\"\n        ],\n        featured: true\n      },\n      {\n        name: \"Operations\",\n        description: \"Streamline workflows, automate processes, and optimize operational efficiency across your entire organization.\",\n        icon: \"fas fa-cogs\",\n        price: 14900,\n        rating: 47,\n        reviewCount: 89,\n        category: \"operations\",\n        isBundle: true,\n        subAgentIds: Array.from(this.subAgents.values())\n          .filter(sa => sa.category === \"analytics\")\n          .map(sa => sa.id),\n        tasks: [\n          \"Automating workflows...\",\n          \"Managing resources...\",\n          \"Monitoring performance...\",\n          \"Optimizing processes...\",\n          \"Ensuring quality control...\"\n        ],\n        featured: true\n      },\n      {\n        name: \"People & Finance\",\n        description: \"Manage your team and finances with automated HR processes, payroll management, and financial planning.\",\n        icon: \"fas fa-users-cog\",\n        price: 7900,\n        rating: 48,\n        reviewCount: 203,\n        category: \"people-finance\",\n        isBundle: true,\n        subAgentIds: Array.from(this.subAgents.values())\n          .filter(sa => sa.category === \"support\")\n          .map(sa => sa.id),\n        tasks: [\n          \"Processing payroll...\",\n          \"Managing benefits...\",\n          \"Tracking expenses...\",\n          \"Recruiting talent...\",\n          \"Analyzing budgets...\"\n        ],\n        featured: true\n      }\n    ];\n\n    agents.forEach(agent => {\n      this.createAgent(agent);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllAgents(): Promise<Agent[]> {\n    return Array.from(this.agents.values());\n  }\n\n  async getFeaturedAgents(): Promise<Agent[]> {\n    return Array.from(this.agents.values()).filter(agent => agent.featured);\n  }\n\n  async getAgent(id: string): Promise<Agent | undefined> {\n    return this.agents.get(id);\n  }\n\n  async createAgent(insertAgent: InsertAgent): Promise<Agent> {\n    const id = randomUUID();\n    const agent: Agent = { \n      rating: 45,\n      reviewCount: 0,\n      isBundle: true,\n      subAgentIds: [],\n      tasks: [],\n      featured: false,\n      ...insertAgent, \n      id \n    };\n    this.agents.set(id, agent);\n    return agent;\n  }\n\n  async getAllSubAgents(): Promise<SubAgent[]> {\n    return Array.from(this.subAgents.values());\n  }\n\n  async getSubAgentsByCategory(category: string): Promise<SubAgent[]> {\n    return Array.from(this.subAgents.values()).filter(\n      subAgent => subAgent.category === category\n    );\n  }\n\n  async getSubAgent(id: string): Promise<SubAgent | undefined> {\n    return this.subAgents.get(id);\n  }\n\n  async createSubAgent(insertSubAgent: InsertSubAgent): Promise<SubAgent> {\n    const id = randomUUID();\n    const subAgent: SubAgent = { \n      rating: 45,\n      reviewCount: 0,\n      recentUpdates: [],\n      demoScript: null,\n      integrations: [],\n      totalHires: 0,\n      taskStatus: 'idle',\n      currentTask: null,\n      ...insertSubAgent, \n      id \n    };\n    this.subAgents.set(id, subAgent);\n    return subAgent;\n  }\n\n  async createCustomRequest(insertRequest: InsertCustomRequest): Promise<CustomRequest> {\n    const id = randomUUID();\n    const request: CustomRequest = { \n      status: 'pending',\n      industry: null,\n      budgetRange: null,\n      allowPooling: false,\n      ...insertRequest, \n      id \n    };\n    this.customRequests.set(id, request);\n    return request;\n  }\n\n  async getAllCustomRequests(): Promise<CustomRequest[]> {\n    return Array.from(this.customRequests.values());\n  }\n\n  // Extension and permission management implementation\n  async createUserPermission(insertPermission: InsertUserPermission): Promise<UserPermission> {\n    const id = randomUUID();\n    const permission: UserPermission = { \n      isActive: true,\n      createdAt: new Date().toISOString(),\n      ...insertPermission, \n      id \n    };\n    this.userPermissions.set(id, permission);\n    return permission;\n  }\n\n  async getUserPermissions(userId: string): Promise<UserPermission[]> {\n    return Array.from(this.userPermissions.values()).filter(p => p.userId === userId);\n  }\n\n  async updateUserPermission(id: string, updates: Partial<UserPermission>): Promise<void> {\n    const permission = this.userPermissions.get(id);\n    if (permission) {\n      this.userPermissions.set(id, { ...permission, ...updates });\n    }\n  }\n\n  async createExtensionPairing(insertPairing: InsertExtensionPairing): Promise<ExtensionPairing> {\n    const id = randomUUID();\n    const pairing: ExtensionPairing = { \n      isActive: true,\n      lastSeen: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      ...insertPairing, \n      id \n    };\n    this.extensionPairings.set(id, pairing);\n    return pairing;\n  }\n\n  async getExtensionPairings(userId: string): Promise<ExtensionPairing[]> {\n    return Array.from(this.extensionPairings.values()).filter(p => p.userId === userId);\n  }\n\n  async getPairingByCode(code: string): Promise<ExtensionPairing | undefined> {\n    return Array.from(this.extensionPairings.values()).find(p => p.pairingCode === code);\n  }\n\n  async updateExtensionPairing(id: string, updates: Partial<ExtensionPairing>): Promise<void> {\n    const pairing = this.extensionPairings.get(id);\n    if (pairing) {\n      this.extensionPairings.set(id, { ...pairing, ...updates });\n    }\n  }\n\n  async updateExtensionLastSeen(id: string): Promise<void> {\n    const pairing = this.extensionPairings.get(id);\n    if (pairing) {\n      this.extensionPairings.set(id, { ...pairing, lastSeen: new Date().toISOString() });\n    }\n  }\n\n  async createCommandLog(insertCommand: InsertCommandLog): Promise<CommandLog> {\n    const id = randomUUID();\n    const command: CommandLog = { \n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      ...insertCommand, \n      id \n    };\n    this.commandLogs.set(id, command);\n    return command;\n  }\n\n  async getCommandLog(userId: string, limit = 50, offset = 0): Promise<CommandLog[]> {\n    const userCommands = Array.from(this.commandLogs.values())\n      .filter(c => c.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    \n    return userCommands.slice(offset, offset + limit);\n  }\n\n  async updateCommandResult(requestId: string, updates: { status: string; result?: any; error?: string; executedAt: string }): Promise<void> {\n    const command = Array.from(this.commandLogs.values()).find(c => c.requestId === requestId);\n    if (command) {\n      this.commandLogs.set(command.id, { ...command, ...updates });\n    }\n  }\n\n  async createVoiceInteraction(insertInteraction: InsertVoiceInteraction): Promise<VoiceInteraction> {\n    const id = randomUUID();\n    const interaction: VoiceInteraction = { \n      createdAt: new Date().toISOString(),\n      ...insertInteraction, \n      id \n    };\n    this.voiceInteractions.set(id, interaction);\n    return interaction;\n  }\n\n  async getVoiceInteractions(userId: string, limit = 50): Promise<VoiceInteraction[]> {\n    return Array.from(this.voiceInteractions.values())\n      .filter(v => v.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  async createTaskExecution(insertTask: InsertTaskExecution): Promise<TaskExecution> {\n    const id = randomUUID();\n    const task: TaskExecution = { \n      status: 'pending',\n      executedAt: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      ...insertTask, \n      id \n    };\n    this.taskExecutions.set(id, task);\n    return task;\n  }\n\n  async getUserTaskHistory(userId: string, limit = 50, offset = 0): Promise<TaskExecution[]> {\n    const userTasks = Array.from(this.taskExecutions.values())\n      .filter(t => t.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    \n    return userTasks.slice(offset, offset + limit);\n  }\n\n  // Agent configuration management\n  async createAgentConfiguration(config: InsertAgentConfiguration): Promise<AgentConfiguration> {\n    const id = randomUUID();\n    const fullConfig: AgentConfiguration = {\n      id,\n      lastUpdated: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      ...config,\n    };\n    this.agentConfigurations.set(id, fullConfig);\n    return fullConfig;\n  }\n\n  async getAgentConfiguration(userId: string, agentType: string): Promise<AgentConfiguration | undefined> {\n    for (const config of this.agentConfigurations.values()) {\n      if (config.userId === userId && config.agentType === agentType) {\n        return config;\n      }\n    }\n    return undefined;\n  }\n\n  async updateAgentConfiguration(id: string, updates: Partial<AgentConfiguration>): Promise<void> {\n    const config = this.agentConfigurations.get(id);\n    if (config) {\n      const updatedConfig = {\n        ...config,\n        ...updates,\n        lastUpdated: new Date().toISOString(),\n      };\n      this.agentConfigurations.set(id, updatedConfig);\n    }\n  }\n\n  // Conversation history management\n  async createConversationHistory(conversation: InsertConversationHistory): Promise<ConversationHistory> {\n    const id = randomUUID();\n    const fullConversation: ConversationHistory = {\n      id,\n      lastActivity: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      ...conversation,\n    };\n    this.conversationHistories.set(id, fullConversation);\n    return fullConversation;\n  }\n\n  async getConversationHistory(userId: string, agentType: string): Promise<ConversationHistory | undefined> {\n    for (const conversation of this.conversationHistories.values()) {\n      if (conversation.userId === userId && conversation.agentType === agentType) {\n        return conversation;\n      }\n    }\n    return undefined;\n  }\n\n  async updateConversationHistory(id: string, updates: Partial<ConversationHistory>): Promise<void> {\n    const conversation = this.conversationHistories.get(id);\n    if (conversation) {\n      const updatedConversation = {\n        ...conversation,\n        ...updates,\n        lastActivity: new Date().toISOString(),\n      };\n      this.conversationHistories.set(id, updatedConversation);\n    }\n  }\n\n  // Device tool detection\n  async saveDetectedTools(userId: string, tools: InsertDetectedTool[]): Promise<void> {\n    // Clear existing tools for this user\n    const existingKeys = Array.from(this.detectedTools.keys());\n    for (const key of existingKeys) {\n      const tool = this.detectedTools.get(key);\n      if (tool && tool.userId === userId) {\n        this.detectedTools.delete(key);\n      }\n    }\n\n    // Add new tools\n    for (const toolData of tools) {\n      const id = randomUUID();\n      const tool: DetectedTool = {\n        id,\n        lastDetected: new Date().toISOString(),\n        createdAt: new Date().toISOString(),\n        ...toolData,\n      };\n      this.detectedTools.set(id, tool);\n    }\n  }\n\n  async getDetectedTools(userId: string): Promise<DetectedTool[]> {\n    const userTools = Array.from(this.detectedTools.values())\n      .filter(tool => tool.userId === userId)\n      .sort((a, b) => a.toolName.localeCompare(b.toolName));\n    \n    return userTools;\n  }\n\n  async updateDetectedTool(id: string, updates: Partial<DetectedTool>): Promise<void> {\n    const tool = this.detectedTools.get(id);\n    if (tool) {\n      const updatedTool = {\n        ...tool,\n        ...updates,\n        lastDetected: new Date().toISOString(),\n      };\n      this.detectedTools.set(id, updatedTool);\n    }\n  }\n\n  // Device control and permissions\n  async createToolPermission(permission: InsertToolPermission): Promise<ToolPermission> {\n    const newPermission: ToolPermission = {\n      id: randomUUID(),\n      ...permission,\n      createdAt: new Date().toISOString()\n    };\n    this.toolPermissions.set(newPermission.id, newPermission);\n    return newPermission;\n  }\n\n  async checkToolPermission(userId: string, agentType: string, toolName: string): Promise<boolean> {\n    const permissions = Array.from(this.toolPermissions.values());\n    return permissions.some(p => \n      p.userId === userId && \n      p.agentType === agentType && \n      p.toolName === toolName && \n      p.granted\n    );\n  }\n\n  async getToolPermissions(userId: string, agentType?: string): Promise<ToolPermission[]> {\n    const permissions = Array.from(this.toolPermissions.values());\n    return permissions.filter(p => {\n      if (p.userId !== userId) return false;\n      if (agentType && p.agentType !== agentType) return false;\n      return true;\n    });\n  }\n\n  async createPendingAction(action: InsertPendingAction): Promise<PendingAction> {\n    const newAction: PendingAction = {\n      id: randomUUID(),\n      ...action,\n      createdAt: new Date().toISOString()\n    };\n    this.pendingActions.set(newAction.id, newAction);\n    return newAction;\n  }\n\n  async getPendingAction(actionId: string): Promise<PendingAction | undefined> {\n    return this.pendingActions.get(actionId);\n  }\n\n  async getPendingActions(userId: string): Promise<PendingAction[]> {\n    const actions = Array.from(this.pendingActions.values());\n    return actions.filter(a => a.userId === userId && a.status === 'pending_approval');\n  }\n\n  async updatePendingAction(actionId: string, updates: Partial<PendingAction>): Promise<void> {\n    const action = this.pendingActions.get(actionId);\n    if (action) {\n      Object.assign(action, updates);\n      this.pendingActions.set(actionId, action);\n    }\n  }\n\n  async createActionExecution(execution: InsertActionExecution): Promise<ActionExecution> {\n    const newExecution: ActionExecution = {\n      id: randomUUID(),\n      ...execution,\n      createdAt: new Date().toISOString()\n    };\n    this.actionExecutions.set(newExecution.id, newExecution);\n    return newExecution;\n  }\n\n  async getActionExecutions(userId: string, limit: number = 50): Promise<ActionExecution[]> {\n    const executions = Array.from(this.actionExecutions.values());\n    return executions\n      .filter(e => e.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, limit);\n  }\n\n  async createActionNotification(notification: InsertActionNotification): Promise<ActionNotification> {\n    const newNotification: ActionNotification = {\n      id: randomUUID(),\n      ...notification,\n      read: false,\n      createdAt: new Date().toISOString()\n    };\n    this.actionNotifications.set(newNotification.id, newNotification);\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string, limit: number = 20, offset: number = 0): Promise<ActionNotification[]> {\n    const notifications = Array.from(this.actionNotifications.values());\n    return notifications\n      .filter(n => n.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(offset, offset + limit);\n  }\n\n  async markNotificationRead(notificationId: string): Promise<void> {\n    const notification = this.actionNotifications.get(notificationId);\n    if (notification) {\n      notification.read = true;\n      this.actionNotifications.set(notificationId, notification);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":28611},"server/test-extension-commands.ts":{"content":"// Test script for demonstrating browser extension commands\nimport { ExtensionWebSocketServer } from './websocket-server';\nimport { storage } from './storage';\n\nexport class ExtensionTestCommands {\n  constructor(private wsServer: ExtensionWebSocketServer) {}\n\n  // Test form filling capability\n  async testFormFilling(userId: string) {\n    const command = {\n      request_id: `test-form-${Date.now()}`,\n      agent_id: 'customer_success_manager',\n      capability: 'fill_form',\n      args: {\n        selectors: {\n          'customer-name': '#customer-name',\n          'customer-email': '#customer-email',\n          'issue-type': '#issue-type',\n          'issue-description': '#issue-description',\n          'priority': '#priority'\n        },\n        values: {\n          'customer-name': 'Sarah Johnson',\n          'customer-email': 'sarah.johnson@example.com',\n          'issue-type': 'billing',\n          'issue-description': 'Customer requesting refund for order #ORD-78901 due to billing error.',\n          'priority': 'high'\n        },\n        submit: false\n      },\n      expiry: new Date(Date.now() + 5 * 60 * 1000).toISOString() // 5 minutes\n    };\n\n    console.log('Sending form filling command...');\n    const success = await this.wsServer.sendCommand(userId, command);\n    \n    if (success) {\n      // Log the command in storage\n      await storage.createCommandLog({\n        requestId: command.request_id,\n        userId,\n        agentId: command.agent_id,\n        capability: command.capability,\n        args: command.args,\n        status: 'sent'\n      });\n      console.log('Form filling command sent successfully');\n    } else {\n      console.log('Failed to send form filling command - no active extensions');\n    }\n\n    return success;\n  }\n\n  // Test content extraction capability\n  async testContentExtraction(userId: string) {\n    const command = {\n      request_id: `test-extract-${Date.now()}`,\n      agent_id: 'data_analyst',\n      capability: 'extract_content',\n      args: {\n        selectors: {\n          customerName: '#display-name',\n          accountId: '#account-id',\n          accountStatus: '#account-status',\n          orderNumber: '#order-number',\n          orderAmount: '#order-amount',\n          orderStatus: '#order-status'\n        },\n        includeText: true,\n        includeAttributes: ['id', 'class']\n      },\n      expiry: new Date(Date.now() + 5 * 60 * 1000).toISOString()\n    };\n\n    console.log('Sending content extraction command...');\n    const success = await this.wsServer.sendCommand(userId, command);\n    \n    if (success) {\n      await storage.createCommandLog({\n        requestId: command.request_id,\n        userId,\n        agentId: command.agent_id,\n        capability: command.capability,\n        args: command.args,\n        status: 'sent'\n      });\n      console.log('Content extraction command sent successfully');\n    } else {\n      console.log('Failed to send content extraction command - no active extensions');\n    }\n\n    return success;\n  }\n\n  // Test element clicking capability\n  async testElementClicking(userId: string) {\n    const command = {\n      request_id: `test-click-${Date.now()}`,\n      agent_id: 'customer_success_manager',\n      capability: 'click_selector',\n      args: {\n        selector: '#action-approve',\n        waitFor: 1000,\n        scrollIntoView: true\n      },\n      expiry: new Date(Date.now() + 5 * 60 * 1000).toISOString()\n    };\n\n    console.log('Sending click command...');\n    const success = await this.wsServer.sendCommand(userId, command);\n    \n    if (success) {\n      await storage.createCommandLog({\n        requestId: command.request_id,\n        userId,\n        agentId: command.agent_id,\n        capability: command.capability,\n        args: command.args,\n        status: 'sent'\n      });\n      console.log('Click command sent successfully');\n    } else {\n      console.log('Failed to send click command - no active extensions');\n    }\n\n    return success;\n  }\n\n  // Test page navigation capability\n  async testNavigation(userId: string, url: string) {\n    const command = {\n      request_id: `test-nav-${Date.now()}`,\n      agent_id: 'general_assistant',\n      capability: 'open_url',\n      args: {\n        url,\n        focus: true\n      },\n      expiry: new Date(Date.now() + 5 * 60 * 1000).toISOString()\n    };\n\n    console.log(`Sending navigation command to: ${url}`);\n    const success = await this.wsServer.sendCommand(userId, command);\n    \n    if (success) {\n      await storage.createCommandLog({\n        requestId: command.request_id,\n        userId,\n        agentId: command.agent_id,\n        capability: command.capability,\n        args: command.args,\n        status: 'sent'\n      });\n      console.log('Navigation command sent successfully');\n    } else {\n      console.log('Failed to send navigation command - no active extensions');\n    }\n\n    return success;\n  }\n\n  // Test comprehensive customer service workflow\n  async testCustomerServiceWorkflow(userId: string) {\n    console.log('Starting customer service workflow simulation...');\n    \n    // Step 1: Extract customer information\n    await this.testContentExtraction(userId);\n    \n    // Wait a bit between commands\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Step 2: Fill support form with extracted data\n    await this.testFormFilling(userId);\n    \n    // Wait a bit more\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Step 3: Approve the refund request\n    await this.testElementClicking(userId);\n    \n    console.log('Customer service workflow completed');\n  }\n\n  // Get command execution status\n  async getCommandStatus(userId: string) {\n    const commands = await storage.getCommandLog(userId, 10);\n    return commands.map(cmd => ({\n      requestId: cmd.requestId,\n      capability: cmd.capability,\n      status: cmd.status,\n      createdAt: cmd.createdAt,\n      executedAt: cmd.executedAt,\n      result: cmd.result,\n      error: cmd.error\n    }));\n  }\n\n  // Check if user has active extensions\n  isUserConnected(userId: string): boolean {\n    return this.wsServer.isUserConnected(userId);\n  }\n\n  // Get active extension connections for a user\n  getUserConnections(userId: string) {\n    return this.wsServer.getUserConnections(userId).map(conn => ({\n      extensionId: conn.extensionId,\n      lastSeen: conn.lastSeen,\n      isAuthenticated: conn.isAuthenticated\n    }));\n  }\n}","size_bytes":6408},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket-server.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { storage } from './storage';\nimport { CommandSigner } from './command-signer';\n\ninterface ExtensionConnection {\n  ws: WebSocket;\n  extensionId: string;\n  userId: string;\n  isAuthenticated: boolean;\n  lastSeen: Date;\n}\n\nexport class ExtensionWebSocketServer {\n  private wss: WebSocketServer;\n  private connections: Map<string, ExtensionConnection> = new Map();\n  private commandSigner: CommandSigner;\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/extension-ws',\n      verifyClient: (info: any) => {\n        // Basic verification - could add more sophisticated checks\n        return true;\n      }\n    });\n\n    this.commandSigner = new CommandSigner();\n    this.setupWebSocketServer();\n    \n    console.log('Extension WebSocket server initialized on /extension-ws');\n  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws, request) => {\n      console.log('New extension connection attempt');\n\n      ws.on('message', async (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n          ws.send(JSON.stringify({\n            type: 'error',\n            message: 'Invalid message format'\n          }));\n        }\n      });\n\n      ws.on('close', () => {\n        this.handleDisconnection(ws);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.handleDisconnection(ws);\n      });\n\n      // Send initial ping to verify connection\n      ws.send(JSON.stringify({\n        type: 'ping',\n        timestamp: new Date().toISOString()\n      }));\n    });\n  }\n\n  private async handleMessage(ws: WebSocket, message: any) {\n    switch (message.type) {\n      case 'authenticate':\n        await this.handleAuthentication(ws, message);\n        break;\n\n      case 'dashboard_connect':\n        // Handle dashboard WebSocket connection\n        console.log('Dashboard connected for user:', message.userId);\n        break;\n\n      case 'pong':\n        this.handlePong(ws, message);\n        break;\n\n      case 'command_result':\n        await this.handleCommandResult(message);\n        break;\n\n      case 'task_result':\n        await this.handleTaskResult(message);\n        break;\n\n      case 'execute_task':\n        await this.handleTaskExecution(ws, message);\n        break;\n\n      case 'heartbeat':\n        this.handleHeartbeat(ws, message);\n        break;\n\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  private async handleAuthentication(ws: WebSocket, message: any) {\n    const { extensionId, userId } = message;\n\n    if (!extensionId || !userId) {\n      ws.send(JSON.stringify({\n        type: 'auth_error',\n        message: 'Missing extensionId or userId'\n      }));\n      return;\n    }\n\n    // Verify the extension is paired with this user\n    const pairings = await storage.getExtensionPairings(userId);\n    const validPairing = pairings.find(p => \n      p.extensionId === extensionId && p.isActive\n    );\n\n    if (!validPairing) {\n      ws.send(JSON.stringify({\n        type: 'auth_error',\n        message: 'Extension not paired with this user'\n      }));\n      return;\n    }\n\n    // Store connection\n    const connectionId = `${userId}_${extensionId}`;\n    this.connections.set(connectionId, {\n      ws,\n      extensionId,\n      userId,\n      isAuthenticated: true,\n      lastSeen: new Date()\n    });\n\n    // Update last seen in storage\n    await storage.updateExtensionLastSeen(validPairing.id);\n\n    ws.send(JSON.stringify({\n      type: 'auth_success',\n      message: 'Extension authenticated successfully'\n    }));\n\n    console.log(`Extension authenticated: ${extensionId} for user ${userId}`);\n  }\n\n  private handlePong(ws: WebSocket, message: any) {\n    // Update last seen for this connection\n    const entries = Array.from(this.connections.entries());\n    for (const [connectionId, connection] of entries) {\n      if (connection.ws === ws) {\n        connection.lastSeen = new Date();\n        break;\n      }\n    }\n  }\n\n  private async handleCommandResult(message: any) {\n    const { request_id, status, result, error } = message;\n\n    if (!request_id) {\n      console.warn('Command result missing request_id');\n      return;\n    }\n\n    // Update command result in storage\n    await storage.updateCommandResult(request_id, {\n      status,\n      result,\n      error,\n      executedAt: new Date().toISOString()\n    });\n\n    console.log(`Command result received: ${request_id} - ${status}`);\n  }\n\n  private handleHeartbeat(ws: WebSocket, message: any) {\n    // Update connection last seen and respond\n    const entries = Array.from(this.connections.entries());\n    for (const [connectionId, connection] of entries) {\n      if (connection.ws === ws) {\n        connection.lastSeen = new Date();\n        ws.send(JSON.stringify({\n          type: 'heartbeat_ack',\n          timestamp: new Date().toISOString()\n        }));\n        break;\n      }\n    }\n  }\n\n  private handleDisconnection(ws: WebSocket) {\n    // Remove connection from active connections\n    const entries = Array.from(this.connections.entries());\n    for (const [connectionId, connection] of entries) {\n      if (connection.ws === ws) {\n        this.connections.delete(connectionId);\n        console.log(`Extension disconnected: ${connectionId}`);\n        break;\n      }\n    }\n  }\n\n  // Public methods for sending commands to extensions\n  public async sendCommand(userId: string, command: any): Promise<boolean> {\n    const userConnections = Array.from(this.connections.values())\n      .filter(conn => conn.userId === userId && conn.isAuthenticated);\n\n    if (userConnections.length === 0) {\n      console.warn(`No active extensions for user: ${userId}`);\n      return false;\n    }\n\n    // Sign the command\n    const signedCommand = this.commandSigner.signCommand(command);\n\n    // Send to all user's extensions\n    const promises = userConnections.map(connection => {\n      return new Promise<boolean>((resolve) => {\n        try {\n          connection.ws.send(JSON.stringify({\n            type: 'command',\n            signed_command: signedCommand\n          }));\n          resolve(true);\n        } catch (error) {\n          console.error('Error sending command:', error);\n          resolve(false);\n        }\n      });\n    });\n\n    const results = await Promise.all(promises);\n    return results.some(success => success);\n  }\n\n  public async broadcastToExtensions(message: any): Promise<void> {\n    const activeConnections = Array.from(this.connections.values())\n      .filter(conn => conn.isAuthenticated);\n\n    const promises = activeConnections.map(connection => {\n      return new Promise<void>((resolve) => {\n        try {\n          connection.ws.send(JSON.stringify(message));\n          resolve();\n        } catch (error) {\n          console.error('Error broadcasting message:', error);\n          resolve();\n        }\n      });\n    });\n\n    await Promise.all(promises);\n  }\n\n  public getActiveConnections(): ExtensionConnection[] {\n    return Array.from(this.connections.values())\n      .filter(conn => conn.isAuthenticated);\n  }\n\n  public getUserConnections(userId: string): ExtensionConnection[] {\n    return Array.from(this.connections.values())\n      .filter(conn => conn.userId === userId && conn.isAuthenticated);\n  }\n\n  public isUserConnected(userId: string): boolean {\n    return this.getUserConnections(userId).length > 0;\n  }\n\n  // Cleanup inactive connections\n  private startCleanupTimer() {\n    setInterval(() => {\n      const now = new Date();\n      const timeout = 5 * 60 * 1000; // 5 minutes\n\n      const entries = Array.from(this.connections.entries());\n      for (const [connectionId, connection] of entries) {\n        if (now.getTime() - connection.lastSeen.getTime() > timeout) {\n          console.log(`Cleaning up inactive connection: ${connectionId}`);\n          connection.ws.terminate();\n          this.connections.delete(connectionId);\n        }\n      }\n    }, 60 * 1000); // Check every minute\n  }\n\n  private async handleTaskExecution(ws: WebSocket, message: any) {\n    try {\n      const { agentType, action, taskId } = message;\n      \n      console.log(`Executing task ${taskId} for agent ${agentType}: ${action}`);\n      \n      // Forward task to browser extension for actual execution\n      const signedTask = this.commandSigner.signCommand({\n        request_id: `task-${taskId}`,\n        agent_id: agentType,\n        capability: action,\n        args: { timestamp: new Date().toISOString() }\n      });\n\n      ws.send(JSON.stringify({\n        type: 'execute_task',\n        signed_task: signedTask\n      }));\n      \n    } catch (error) {\n      console.error('Error handling task execution:', error);\n    }\n  }\n\n  private async handleTaskResult(message: any) {\n    try {\n      const { taskId, success, result, error, userId, agentType } = message;\n      \n      console.log(`Task ${taskId} result:`, {\n        success,\n        result: success ? result : error,\n        userId,\n        agentType\n      });\n\n      // Broadcast task completion to dashboard\n      await this.broadcastToExtensions({\n        type: 'task_completed',\n        taskId,\n        success,\n        result: success ? result : error,\n        agentType,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (error) {\n      console.error('Error handling task result:', error);\n    }\n  }\n}","size_bytes":9568},"shared/agent-config.ts":{"content":"// Agent configuration schema for customizable settings\nimport { z } from 'zod';\n\nexport const agentTaskSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  category: z.string(),\n  autonomyLevel: z.enum(['autonomous', 'confirm', 'suggest']),\n  enabled: z.boolean().default(true),\n  permissions: z.array(z.string()).default([]),\n  tools: z.array(z.string()).default([])\n});\n\nexport const agentConfigSchema = z.object({\n  agentId: z.string(),\n  agentType: z.enum(['business-growth', 'operations', 'people-finance']),\n  userId: z.string(),\n  autonomousTasks: z.array(agentTaskSchema).default([]),\n  confirmTasks: z.array(agentTaskSchema).default([]),\n  suggestTasks: z.array(agentTaskSchema).default([]),\n  allowedTools: z.array(z.string()).default([]),\n  permissions: z.array(z.string()).default([]),\n  workingHours: z.object({\n    enabled: z.boolean().default(false),\n    start: z.string().default('09:00'),\n    end: z.string().default('17:00'),\n    timezone: z.string().default('UTC')\n  }).default({}),\n  notifications: z.object({\n    taskCompletion: z.boolean().default(true),\n    errorAlerts: z.boolean().default(true),\n    dailySummary: z.boolean().default(false)\n  }).default({}),\n  conversationContext: z.object({\n    rememberPreferences: z.boolean().default(true),\n    maintainHistory: z.boolean().default(true),\n    personalizedResponses: z.boolean().default(true)\n  }).default({}),\n  lastUpdated: z.string()\n});\n\nexport type AgentTask = z.infer<typeof agentTaskSchema>;\nexport type AgentConfig = z.infer<typeof agentConfigSchema>;\n\n// Default task configurations for each agent type\nexport const defaultAgentTasks = {\n  'business-growth': {\n    autonomous: [\n      {\n        id: 'social-media-monitoring',\n        name: 'Social Media Monitoring',\n        description: 'Monitor social media mentions and engagement metrics',\n        category: 'marketing',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['social:read', 'analytics:read'],\n        tools: ['Twitter', 'LinkedIn', 'Facebook', 'Instagram']\n      },\n      {\n        id: 'content-research',\n        name: 'Content Research',\n        description: 'Research trending topics and competitor content',\n        category: 'content',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['web:browse', 'content:analyze'],\n        tools: ['Google', 'BuzzSumo', 'SEMrush']\n      }\n    ],\n    confirm: [\n      {\n        id: 'email-campaigns',\n        name: 'Email Campaign Creation',\n        description: 'Create and schedule email marketing campaigns',\n        category: 'marketing',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['email:send', 'contact:read'],\n        tools: ['Gmail', 'Mailchimp', 'HubSpot']\n      },\n      {\n        id: 'lead-outreach',\n        name: 'Lead Outreach',\n        description: 'Send personalized messages to potential leads',\n        category: 'sales',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['email:send', 'crm:write'],\n        tools: ['Salesforce', 'LinkedIn', 'Gmail']\n      }\n    ],\n    suggest: [\n      {\n        id: 'budget-changes',\n        name: 'Marketing Budget Changes',\n        description: 'Suggest changes to marketing budget allocation',\n        category: 'finance',\n        autonomyLevel: 'suggest' as const,\n        enabled: true,\n        permissions: ['budget:read', 'analytics:read'],\n        tools: ['Google Ads', 'Facebook Ads', 'Analytics']\n      }\n    ]\n  },\n  'operations': {\n    autonomous: [\n      {\n        id: 'data-backup',\n        name: 'Data Backup',\n        description: 'Automatically backup important files and databases',\n        category: 'maintenance',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['file:read', 'storage:write'],\n        tools: ['Google Drive', 'Dropbox', 'AWS S3']\n      },\n      {\n        id: 'system-monitoring',\n        name: 'System Monitoring',\n        description: 'Monitor system performance and uptime',\n        category: 'monitoring',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['system:read', 'alerts:send'],\n        tools: ['New Relic', 'Datadog', 'Pingdom']\n      }\n    ],\n    confirm: [\n      {\n        id: 'data-processing',\n        name: 'Data Processing',\n        description: 'Process and transform data files',\n        category: 'data',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['file:read', 'file:write'],\n        tools: ['Excel', 'Google Sheets', 'Python']\n      },\n      {\n        id: 'workflow-automation',\n        name: 'Workflow Automation',\n        description: 'Set up automated workflows between tools',\n        category: 'automation',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['api:access', 'integration:create'],\n        tools: ['Zapier', 'IFTTT', 'Microsoft Power Automate']\n      }\n    ],\n    suggest: [\n      {\n        id: 'system-upgrades',\n        name: 'System Upgrades',\n        description: 'Suggest system and software upgrades',\n        category: 'maintenance',\n        autonomyLevel: 'suggest' as const,\n        enabled: true,\n        permissions: ['system:read', 'software:analyze'],\n        tools: ['System Info', 'Update Manager']\n      }\n    ]\n  },\n  'people-finance': {\n    autonomous: [\n      {\n        id: 'expense-tracking',\n        name: 'Expense Tracking',\n        description: 'Automatically track and categorize expenses',\n        category: 'finance',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['finance:read', 'receipt:scan'],\n        tools: ['QuickBooks', 'Expensify', 'Mint']\n      },\n      {\n        id: 'timesheet-reminders',\n        name: 'Timesheet Reminders',\n        description: 'Send reminders for timesheet submission',\n        category: 'hr',\n        autonomyLevel: 'autonomous' as const,\n        enabled: true,\n        permissions: ['hr:read', 'notification:send'],\n        tools: ['Slack', 'Email', 'BambooHR']\n      }\n    ],\n    confirm: [\n      {\n        id: 'payroll-processing',\n        name: 'Payroll Processing',\n        description: 'Process employee payroll and benefits',\n        category: 'finance',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['payroll:write', 'finance:write'],\n        tools: ['ADP', 'Gusto', 'QuickBooks Payroll']\n      },\n      {\n        id: 'invoice-management',\n        name: 'Invoice Management',\n        description: 'Create and send invoices to clients',\n        category: 'finance',\n        autonomyLevel: 'confirm' as const,\n        enabled: true,\n        permissions: ['invoice:create', 'finance:write'],\n        tools: ['QuickBooks', 'FreshBooks', 'Xero']\n      }\n    ],\n    suggest: [\n      {\n        id: 'budget-planning',\n        name: 'Budget Planning',\n        description: 'Suggest budget allocations and financial planning',\n        category: 'finance',\n        autonomyLevel: 'suggest' as const,\n        enabled: true,\n        permissions: ['finance:read', 'analytics:read'],\n        tools: ['Excel', 'QuickBooks', 'Financial Planning Software']\n      }\n    ]\n  }\n};","size_bytes":7303},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const agents = pgTable(\"agents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  price: integer(\"price\").notNull(), // in cents\n  rating: integer(\"rating\").notNull().default(45), // out of 50 (4.5 stars = 45)\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  category: text(\"category\").notNull(),\n  isBundle: boolean(\"is_bundle\").notNull().default(true),\n  subAgentIds: jsonb(\"sub_agent_ids\").$type<string[]>().default([]),\n  tasks: jsonb(\"tasks\").$type<string[]>().default([]),\n  featured: boolean(\"featured\").notNull().default(false)\n});\n\nexport const subAgents = pgTable(\"sub_agents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  price: integer(\"price\").notNull(), // in cents\n  category: text(\"category\").notNull(),\n  currentTask: text(\"current_task\"),\n  taskStatus: text(\"task_status\").notNull().default(\"idle\"), // idle, working, completed\n  rating: integer(\"rating\").notNull().default(45), // out of 50 (4.5 stars = 45)\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  recentUpdates: jsonb(\"recent_updates\").$type<string[]>().default([]),\n  demoScript: text(\"demo_script\"), // For live preview functionality\n  integrations: jsonb(\"integrations\").$type<string[]>().default([]),\n  totalHires: integer(\"total_hires\").notNull().default(0)\n});\n\nexport const customRequests = pgTable(\"custom_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  description: text(\"description\").notNull(),\n  industry: text(\"industry\"),\n  budgetRange: text(\"budget_range\"),\n  allowPooling: boolean(\"allow_pooling\").notNull().default(false),\n  status: text(\"status\").notNull().default(\"pending\") // pending, in_progress, completed\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertAgentSchema = createInsertSchema(agents).omit({\n  id: true\n});\n\n// Device control and permission management tables\nexport const toolPermissions = pgTable(\"tool_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  toolName: text(\"tool_name\").notNull(),\n  permissions: jsonb(\"permissions\").$type<string[]>().default([]),\n  category: text(\"category\").notNull(),\n  granted: boolean(\"granted\").notNull().default(false),\n  grantedAt: text(\"granted_at\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const pendingActions = pgTable(\"pending_actions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  taskId: text(\"task_id\").notNull(),\n  toolName: text(\"tool_name\").notNull(),\n  action: text(\"action\").notNull(),\n  parameters: text(\"parameters\").notNull().default('{}'),\n  status: text(\"status\").notNull().default('pending_approval'),\n  requiresApproval: boolean(\"requires_approval\").notNull().default(true),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  approvedAt: text(\"approved_at\"),\n  rejectedAt: text(\"rejected_at\"),\n  result: text(\"result\"),\n  note: text(\"note\")\n});\n\nexport const actionExecutions = pgTable(\"action_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  taskId: text(\"task_id\").notNull(),\n  toolName: text(\"tool_name\").notNull(),\n  action: text(\"action\").notNull(),\n  parameters: text(\"parameters\").notNull().default('{}'),\n  result: text(\"result\").notNull(),\n  status: text(\"status\").notNull(),\n  executedAt: text(\"executed_at\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const actionNotifications = pgTable(\"action_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  message: text(\"message\").notNull(),\n  actionType: text(\"action_type\").notNull(),\n  toolName: text(\"tool_name\").notNull(),\n  timestamp: text(\"timestamp\").notNull(),\n  read: boolean(\"read\").notNull().default(false),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const insertSubAgentSchema = createInsertSchema(subAgents).omit({\n  id: true\n});\n\nexport const insertCustomRequestSchema = createInsertSchema(customRequests).omit({\n  id: true\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true\n});\n\n// Reviews table for sub-agent ratings and feedback\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subAgentId: varchar(\"sub_agent_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  rating: integer(\"rating\").notNull(), // 1-50 (1-5 stars * 10)\n  comment: text(\"comment\"),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true\n});\n\n// Enhanced schema for browser extension and device control\nexport const userPermissions = pgTable(\"user_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  agentId: varchar(\"agent_id\").notNull(),\n  scope: text(\"scope\").notNull(), // browser:fill, browser:read, email:send, etc.\n  domain: text(\"domain\"), // specific domain for browser permissions\n  autonomyLevel: text(\"autonomy_level\").notNull(), // suggest, confirm, autonomous\n  isActive: boolean(\"is_active\").notNull().default(true),\n  expiresAt: text(\"expires_at\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const agentConfigurations = pgTable(\"agent_configurations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: varchar(\"agent_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  autonomousTasks: jsonb(\"autonomous_tasks\").$type<any[]>().default([]),\n  confirmTasks: jsonb(\"confirm_tasks\").$type<any[]>().default([]),\n  suggestTasks: jsonb(\"suggest_tasks\").$type<any[]>().default([]),\n  allowedTools: jsonb(\"allowed_tools\").$type<string[]>().default([]),\n  permissions: jsonb(\"permissions\").$type<string[]>().default([]),\n  workingHours: jsonb(\"working_hours\").$type<any>().default({}),\n  notifications: jsonb(\"notifications\").$type<any>().default({}),\n  conversationContext: jsonb(\"conversation_context\").$type<any>().default({}),\n  lastUpdated: text(\"last_updated\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const conversationHistory = pgTable(\"conversation_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(),\n  conversationId: varchar(\"conversation_id\").notNull(),\n  messages: jsonb(\"messages\").$type<any[]>().default([]),\n  context: jsonb(\"context\").$type<any>().default({}),\n  lastActivity: text(\"last_activity\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const detectedTools = pgTable(\"detected_tools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  toolName: text(\"tool_name\").notNull(),\n  category: text(\"category\").notNull(),\n  executable: text(\"executable\"),\n  version: text(\"version\"),\n  installed: boolean(\"installed\").notNull().default(false),\n  isLoggedIn: boolean(\"is_logged_in\").default(false),\n  permissions: jsonb(\"permissions\").$type<string[]>().default([]),\n  lastDetected: text(\"last_detected\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const extensionPairings = pgTable(\"extension_pairings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  extensionId: text(\"extension_id\").notNull(),\n  pairingCode: text(\"pairing_code\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastSeen: text(\"last_seen\").default(sql`CURRENT_TIMESTAMP`),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const commandLog = pgTable(\"command_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  agentId: varchar(\"agent_id\").notNull(),\n  requestId: text(\"request_id\").notNull(),\n  capability: text(\"capability\").notNull(),\n  args: jsonb(\"args\"),\n  result: jsonb(\"result\"),\n  status: text(\"status\").notNull(), // pending, success, failed, rejected\n  signature: text(\"signature\").notNull(),\n  executedAt: text(\"executed_at\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const voiceInteractions = pgTable(\"voice_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  agentId: varchar(\"agent_id\").notNull(),\n  transcript: text(\"transcript\").notNull(),\n  intent: text(\"intent\"),\n  response: text(\"response\"),\n  audioUrl: text(\"audio_url\"), // optional audio storage\n  duration: integer(\"duration\"), // in milliseconds\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const taskExecutions = pgTable(\"task_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  agentType: text(\"agent_type\").notNull(), // business-growth, operations, people-finance\n  subAgent: text(\"sub_agent\"),\n  task: text(\"task\").notNull(),\n  context: text(\"context\"),\n  response: text(\"response\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed\n  executedAt: text(\"executed_at\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`)\n});\n\nexport const insertUserPermissionSchema = createInsertSchema(userPermissions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertExtensionPairingSchema = createInsertSchema(extensionPairings).omit({\n  id: true,\n  createdAt: true,\n  lastSeen: true\n});\n\nexport const insertCommandLogSchema = createInsertSchema(commandLog).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertVoiceInteractionSchema = createInsertSchema(voiceInteractions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertTaskExecutionSchema = createInsertSchema(taskExecutions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport type InsertAgent = z.infer<typeof insertAgentSchema>;\nexport type Agent = typeof agents.$inferSelect;\nexport type InsertSubAgent = z.infer<typeof insertSubAgentSchema>;\nexport type SubAgent = typeof subAgents.$inferSelect;\nexport type InsertCustomRequest = z.infer<typeof insertCustomRequestSchema>;\nexport type CustomRequest = typeof customRequests.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Review = typeof reviews.$inferSelect;\n\nexport type UserPermission = typeof userPermissions.$inferSelect;\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\nexport type ExtensionPairing = typeof extensionPairings.$inferSelect;\nexport type InsertExtensionPairing = z.infer<typeof insertExtensionPairingSchema>;\nexport type CommandLog = typeof commandLog.$inferSelect;\nexport type InsertCommandLog = z.infer<typeof insertCommandLogSchema>;\nexport type VoiceInteraction = typeof voiceInteractions.$inferSelect;\nexport type InsertVoiceInteraction = z.infer<typeof insertVoiceInteractionSchema>;\nexport type TaskExecution = typeof taskExecutions.$inferSelect;\nexport type InsertTaskExecution = z.infer<typeof insertTaskExecutionSchema>;\n\nexport const insertAgentConfigSchema = createInsertSchema(agentConfigurations).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true\n});\n\nexport const insertConversationHistorySchema = createInsertSchema(conversationHistory).omit({\n  id: true,\n  createdAt: true,\n  lastActivity: true\n});\n\nexport const insertDetectedToolSchema = createInsertSchema(detectedTools).omit({\n  id: true,\n  createdAt: true,\n  lastDetected: true\n});\n\nexport type AgentConfiguration = typeof agentConfigurations.$inferSelect;\nexport type InsertAgentConfiguration = z.infer<typeof insertAgentConfigSchema>;\nexport type ConversationHistory = typeof conversationHistory.$inferSelect;\nexport type InsertConversationHistory = z.infer<typeof insertConversationHistorySchema>;\nexport type DetectedTool = typeof detectedTools.$inferSelect;\nexport type InsertDetectedTool = z.infer<typeof insertDetectedToolSchema>;\n\n// Device control schema types\nexport const insertToolPermissionSchema = createInsertSchema(toolPermissions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertPendingActionSchema = createInsertSchema(pendingActions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertActionExecutionSchema = createInsertSchema(actionExecutions).omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertActionNotificationSchema = createInsertSchema(actionNotifications).omit({\n  id: true,\n  createdAt: true\n});\n\nexport type ToolPermission = typeof toolPermissions.$inferSelect;\nexport type InsertToolPermission = z.infer<typeof insertToolPermissionSchema>;\nexport type PendingAction = typeof pendingActions.$inferSelect;\nexport type InsertPendingAction = z.infer<typeof insertPendingActionSchema>;\nexport type ActionExecution = typeof actionExecutions.$inferSelect;\nexport type InsertActionExecution = z.infer<typeof insertActionExecutionSchema>;\nexport type ActionNotification = typeof actionNotifications.$inferSelect;\nexport type InsertActionNotification = z.infer<typeof insertActionNotificationSchema>;\n","size_bytes":14552},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Marketplace from \"@/pages/marketplace\";\nimport CustomAgent from \"@/pages/custom-agent\";\nimport AgentDetails from \"@/pages/agent-details\";\nimport AgentHiring from \"@/pages/agent-hiring\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/marketplace\" component={Marketplace} />\n      <Route path=\"/custom-agent\" component={CustomAgent} />\n      <Route path=\"/agent/:id\" component={AgentDetails} />\n      <Route path=\"/hire/:id\" component={AgentHiring} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1228},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');\n@import url('https://fonts.cdnfonts.com/css/neiko');\n\n@font-face {\n  font-family: 'Neiko';\n  src: url('https://fonts.cdnfonts.com/s/76854/Neiko.woff2') format('woff2'),\n       url('https://fonts.cdnfonts.com/s/76854/Neiko.woff') format('woff');\n  font-weight: 400;\n  font-display: swap;\n}\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 8%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(0, 0%, 12%);\n  --card-foreground: hsl(0, 0%, 90%);\n  --popover: hsl(0, 0%, 10%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(0, 0%, 20%);\n  --primary-foreground: hsl(0, 0%, 95%);\n  --primary-dark: hsl(0, 0%, 15%);\n  --secondary: hsl(0, 0%, 60%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 70%);\n  --accent: hsl(0, 0%, 25%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 95%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 15%);\n  --ring: hsl(0, 0%, 30%);\n  --chart-1: hsl(214.7, 87.8%, 59.2%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(214.7, 87.8%, 59.2%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(214.7, 87.8%, 59.2%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(214.7, 87.8%, 59.2%);\n  --font-sans: 'Inter', sans-serif;\n  --font-display: 'Neiko', 'Space Grotesk', sans-serif;\n  --font-mono: 'Space Grotesk', monospace;\n  --font-serif: Georgia, serif;\n  --radius: 1.3rem;\n  --dark: hsl(210, 11%, 10%);\n  --dark-lighter: hsl(210, 11%, 17%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(214.7, 87.8%, 59.2%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(214.7, 87.8%, 59.2%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(214.7, 87.8%, 59.2%);\n  --chart-1: hsl(214.7, 87.8%, 59.2%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(214.7, 87.8%, 59.2%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(214.7, 87.8%, 59.2%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(214.7, 87.8%, 59.2%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-custom {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  }\n  \n  .bg-mesh {\n    background-image: \n      radial-gradient(circle at 25% 25%, hsl(var(--primary)) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, hsl(139, 70%, 58%) 0%, transparent 50%);\n    background-size: 100px 100px;\n    opacity: 0.1;\n  }\n\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .bg-gradient-hero {\n    background: linear-gradient(135deg, #1a1a1a 0%, #333333 50%, #1a1a1a 100%);\n  }\n\n  .bg-gradient-mesh {\n    background-image: \n      radial-gradient(circle at 20% 80%, rgba(64, 64, 64, 0.15) 0%, transparent 50%),\n      radial-gradient(circle at 80% 20%, rgba(128, 128, 128, 0.15) 0%, transparent 50%),\n      radial-gradient(circle at 40% 40%, rgba(96, 96, 96, 0.1) 0%, transparent 50%);\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, #e5e5e5 0%, #cccccc 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .moving-logos {\n    animation: moveHorizontal 30s linear infinite;\n  }\n\n  @keyframes moveHorizontal {\n    0% {\n      transform: translateX(100%);\n    }\n    100% {\n      transform: translateX(-100%);\n    }\n  }\n\n  .subagent-text-slide {\n    animation: slideText 15s linear infinite;\n  }\n\n  @keyframes slideText {\n    0% {\n      transform: translateX(100%);\n    }\n    100% {\n      transform: translateX(-100%);\n    }\n  }\n\n  .floating-shapes::before {\n    content: '';\n    position: absolute;\n    top: 10%;\n    left: 10%;\n    width: 120px;\n    height: 120px;\n    background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));\n    border-radius: 50%;\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .floating-shapes::after {\n    content: '';\n    position: absolute;\n    bottom: 10%;\n    right: 10%;\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(45deg, rgba(118, 75, 162, 0.1), rgba(102, 126, 234, 0.1));\n    border-radius: 30%;\n    animation: float 4s ease-in-out infinite reverse;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n@keyframes pulse-soft {\n  0%, 100% { \n    opacity: 0.8; \n  }\n  50% { \n    opacity: 1; \n  }\n}\n\n@keyframes slide-up {\n  from { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-pulse-soft {\n  animation: pulse-soft 2s ease-in-out infinite;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.3s ease-out;\n}\n\n.agent-card {\n  transition: all 0.3s ease;\n}\n\n.agent-card:hover {\n  transform: translateY(-8px) scale(1.02);\n}\n\n.task-preview {\n  animation: slide-up 0.5s ease-out;\n}\n","size_bytes":6645},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/routes/agent-config.ts":{"content":"// API routes for agent configuration management\nimport { Router } from 'express';\nimport { z } from 'zod';\nimport { storage } from '../storage';\nimport { agentConfigSchema, defaultAgentTasks } from '../../shared/agent-config';\n\nexport const agentConfigRouter = Router();\n\n// Get agent configuration\nagentConfigRouter.get('/:userId/:agentType', async (req, res) => {\n  try {\n    const { userId, agentType } = req.params;\n    \n    if (!['business-growth', 'operations', 'people-finance'].includes(agentType)) {\n      return res.status(400).json({ error: 'Invalid agent type' });\n    }\n    \n    let config = await storage.getAgentConfiguration(userId, agentType);\n    \n    // Create default config if none exists\n    if (!config) {\n      const defaultTasks = defaultAgentTasks[agentType as keyof typeof defaultAgentTasks];\n      \n      config = await storage.createAgentConfiguration({\n        agentId: `${userId}-${agentType}`,\n        agentType,\n        userId,\n        autonomousTasks: defaultTasks.autonomous,\n        confirmTasks: defaultTasks.confirm,\n        suggestTasks: defaultTasks.suggest,\n        allowedTools: [],\n        permissions: [],\n        workingHours: {\n          enabled: false,\n          start: '09:00',\n          end: '17:00',\n          timezone: 'UTC'\n        },\n        notifications: {\n          taskCompletion: true,\n          errorAlerts: true,\n          dailySummary: false\n        },\n        conversationContext: {\n          rememberPreferences: true,\n          maintainHistory: true,\n          personalizedResponses: true\n        }\n      });\n    }\n    \n    res.json({ success: true, config });\n\n  } catch (error) {\n    console.error('Error fetching agent configuration:', error);\n    res.status(500).json({ error: 'Failed to fetch agent configuration' });\n  }\n});\n\n// Update agent configuration\nconst updateConfigSchema = z.object({\n  autonomousTasks: z.array(z.any()).optional(),\n  confirmTasks: z.array(z.any()).optional(),\n  suggestTasks: z.array(z.any()).optional(),\n  allowedTools: z.array(z.string()).optional(),\n  permissions: z.array(z.string()).optional(),\n  workingHours: z.object({\n    enabled: z.boolean(),\n    start: z.string(),\n    end: z.string(),\n    timezone: z.string()\n  }).optional(),\n  notifications: z.object({\n    taskCompletion: z.boolean(),\n    errorAlerts: z.boolean(),\n    dailySummary: z.boolean()\n  }).optional(),\n  conversationContext: z.object({\n    rememberPreferences: z.boolean(),\n    maintainHistory: z.boolean(),\n    personalizedResponses: z.boolean()\n  }).optional()\n});\n\nagentConfigRouter.patch('/:userId/:agentType', async (req, res) => {\n  try {\n    const { userId, agentType } = req.params;\n    const validatedData = updateConfigSchema.parse(req.body);\n    \n    const existing = await storage.getAgentConfiguration(userId, agentType);\n    if (!existing) {\n      return res.status(404).json({ error: 'Agent configuration not found' });\n    }\n    \n    await storage.updateAgentConfiguration(existing.id, validatedData);\n    \n    const updated = await storage.getAgentConfiguration(userId, agentType);\n    res.json({ success: true, config: updated });\n\n  } catch (error) {\n    console.error('Error updating agent configuration:', error);\n    res.status(500).json({ error: 'Failed to update agent configuration' });\n  }\n});\n\n// Get available tasks for an agent type\nagentConfigRouter.get('/:agentType/available-tasks', async (req, res) => {\n  try {\n    const { agentType } = req.params;\n    \n    if (!['business-growth', 'operations', 'people-finance'].includes(agentType)) {\n      return res.status(400).json({ error: 'Invalid agent type' });\n    }\n    \n    const defaultTasks = defaultAgentTasks[agentType as keyof typeof defaultAgentTasks];\n    \n    res.json({\n      success: true,\n      tasks: {\n        autonomous: defaultTasks.autonomous,\n        confirm: defaultTasks.confirm,\n        suggest: defaultTasks.suggest\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching available tasks:', error);\n    res.status(500).json({ error: 'Failed to fetch available tasks' });\n  }\n});\n\n// Toggle task autonomy level\nconst toggleTaskSchema = z.object({\n  taskId: z.string(),\n  fromLevel: z.enum(['autonomous', 'confirm', 'suggest']),\n  toLevel: z.enum(['autonomous', 'confirm', 'suggest', 'disabled']),\n  enabled: z.boolean().optional()\n});\n\nagentConfigRouter.post('/:userId/:agentType/toggle-task', async (req, res) => {\n  try {\n    const { userId, agentType } = req.params;\n    const validatedData = toggleTaskSchema.parse(req.body);\n    \n    const config = await storage.getAgentConfiguration(userId, agentType);\n    if (!config) {\n      return res.status(404).json({ error: 'Agent configuration not found' });\n    }\n    \n    const { taskId, fromLevel, toLevel, enabled } = validatedData;\n    \n    // Find and move task between categories\n    const fromTasks = config[`${fromLevel}Tasks` as keyof typeof config] as any[];\n    const taskIndex = fromTasks.findIndex(t => t.id === taskId);\n    \n    if (taskIndex === -1) {\n      return res.status(404).json({ error: 'Task not found' });\n    }\n    \n    const task = fromTasks[taskIndex];\n    \n    // Update task properties\n    if (enabled !== undefined) {\n      task.enabled = enabled;\n    }\n    if (toLevel !== 'disabled') {\n      task.autonomyLevel = toLevel;\n    }\n    \n    // Remove from old category and add to new category\n    if (fromLevel !== toLevel && toLevel !== 'disabled') {\n      fromTasks.splice(taskIndex, 1);\n      const toTasks = config[`${toLevel}Tasks` as keyof typeof config] as any[];\n      toTasks.push(task);\n    } else if (toLevel === 'disabled') {\n      task.enabled = false;\n    }\n    \n    await storage.updateAgentConfiguration(config.id, {\n      [`${fromLevel}Tasks`]: fromTasks,\n      ...(toLevel !== 'disabled' && toLevel !== fromLevel && {\n        [`${toLevel}Tasks`]: config[`${toLevel}Tasks` as keyof typeof config]\n      })\n    });\n    \n    res.json({ success: true });\n\n  } catch (error) {\n    console.error('Error toggling task:', error);\n    res.status(500).json({ error: 'Failed to toggle task' });\n  }\n});","size_bytes":6077},"server/routes/device-tools.ts":{"content":"// API routes for device tool detection and configuration\nimport { Router } from 'express';\nimport { z } from 'zod';\nimport { storage } from '../storage';\nimport { DeviceScanner } from '../device-scanner';\n\nexport const deviceToolsRouter = Router();\n\n// Scan user device for available tools\ndeviceToolsRouter.post('/scan/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const scanner = DeviceScanner.getInstance();\n    \n    // Scan device for installed applications\n    const detectedTools = await scanner.getDetectedTools(userId);\n    \n    // Save detected tools to storage\n    const toolsToSave = detectedTools.installed.map(tool => ({\n      userId,\n      toolName: tool.name,\n      category: tool.category,\n      executable: tool.executable,\n      version: tool.version,\n      installed: tool.installed,\n      permissions: tool.permissions\n    }));\n\n    await storage.saveDetectedTools(userId, toolsToSave);\n    \n    res.json({\n      success: true,\n      installed: detectedTools.installed,\n      browser: detectedTools.browser,\n      totalFound: detectedTools.installed.length + detectedTools.browser.length,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Device scan error:', error);\n    res.status(500).json({ error: 'Failed to scan device tools' });\n  }\n});\n\n// Get detected tools for a user\ndeviceToolsRouter.get('/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const tools = await storage.getDetectedTools(userId);\n    \n    res.json({\n      success: true,\n      tools,\n      count: tools.length\n    });\n\n  } catch (error) {\n    console.error('Error fetching detected tools:', error);\n    res.status(500).json({ error: 'Failed to fetch detected tools' });\n  }\n});\n\n// Update tool login status (from browser extension)\nconst updateToolSchema = z.object({\n  toolName: z.string(),\n  isLoggedIn: z.boolean().optional(),\n  version: z.string().optional(),\n  permissions: z.array(z.string()).optional()\n});\n\ndeviceToolsRouter.patch('/:userId/:toolId', async (req, res) => {\n  try {\n    const { userId, toolId } = req.params;\n    const validatedData = updateToolSchema.parse(req.body);\n    \n    await storage.updateDetectedTool(toolId, validatedData);\n    \n    res.json({ success: true });\n\n  } catch (error) {\n    console.error('Error updating tool:', error);\n    res.status(500).json({ error: 'Failed to update tool' });\n  }\n});\n\n// Browser extension reports available tools\nconst browserToolsSchema = z.object({\n  tools: z.array(z.object({\n    name: z.string(),\n    category: z.string(),\n    url: z.string(),\n    isLoggedIn: z.boolean(),\n    permissions: z.array(z.string())\n  }))\n});\n\ndeviceToolsRouter.post('/:userId/browser-tools', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const validatedData = browserToolsSchema.parse(req.body);\n    \n    const scanner = DeviceScanner.getInstance();\n    scanner.updateBrowserTools(validatedData.tools);\n    \n    // Save browser tools to storage as well\n    const browserToolsToSave = validatedData.tools.map(tool => ({\n      userId,\n      toolName: tool.name,\n      category: tool.category,\n      executable: 'browser',\n      installed: true,\n      isLoggedIn: tool.isLoggedIn,\n      permissions: tool.permissions\n    }));\n\n    // Update existing browser tools or create new ones\n    for (const toolData of browserToolsToSave) {\n      const existing = await storage.getDetectedTools(userId);\n      const existingTool = existing.find(t => t.toolName === toolData.toolName && t.executable === 'browser');\n      \n      if (existingTool) {\n        await storage.updateDetectedTool(existingTool.id, {\n          isLoggedIn: toolData.isLoggedIn,\n          permissions: toolData.permissions\n        });\n      } else {\n        await storage.saveDetectedTools(userId, [toolData]);\n      }\n    }\n    \n    res.json({ success: true });\n\n  } catch (error) {\n    console.error('Error updating browser tools:', error);\n    res.status(500).json({ error: 'Failed to update browser tools' });\n  }\n});\n\n// Get tools by category for agent configuration\ndeviceToolsRouter.get('/:userId/category/:category', async (req, res) => {\n  try {\n    const { userId, category } = req.params;\n    const allTools = await storage.getDetectedTools(userId);\n    const categoryTools = allTools.filter(tool => tool.category === category);\n    \n    res.json({\n      success: true,\n      tools: categoryTools,\n      count: categoryTools.length\n    });\n\n  } catch (error) {\n    console.error('Error fetching tools by category:', error);\n    res.status(500).json({ error: 'Failed to fetch tools by category' });\n  }\n});","size_bytes":4650},"server/routes/extension.ts":{"content":"import { Router } from 'express';\nimport { randomBytes } from 'crypto';\nimport jwt from 'jsonwebtoken';\nimport { storage } from '../storage';\nimport { z } from 'zod';\n\nconst extensionRouter = Router();\n\n// Extension pairing endpoint\nextensionRouter.post('/pair', async (req, res) => {\n  try {\n    const { code, extensionId } = req.body;\n    \n    if (!code || !extensionId) {\n      return res.status(400).json({ error: 'Code and extensionId required' });\n    }\n\n    // Find pairing request by code\n    const pairing = await storage.getPairingByCode(code);\n    if (!pairing || !pairing.isActive) {\n      return res.status(404).json({ error: 'Invalid or expired pairing code' });\n    }\n\n    // Update pairing with extension ID\n    await storage.updateExtensionPairing(pairing.id, { extensionId });\n\n    // Generate JWT token for WebSocket authentication\n    const token = jwt.sign(\n      { \n        userId: pairing.userId, \n        extensionId,\n        type: 'extension'\n      },\n      process.env.JWT_SECRET || 'dev-secret',\n      { expiresIn: '30d' }\n    );\n\n    res.json({\n      success: true,\n      token,\n      userId: pairing.userId,\n      websocketUrl: `/extension-ws?token=${token}`\n    });\n\n  } catch (error) {\n    console.error('Extension pairing error:', error);\n    res.status(500).json({ error: 'Pairing failed' });\n  }\n});\n\n// Generate pairing code for user\nextensionRouter.post('/generate-code', async (req, res) => {\n  try {\n    // In production, get userId from authenticated session\n    const userId = req.body.userId || 'demo-user';\n    \n    // Generate random pairing code\n    const pairingCode = randomBytes(4).toString('hex').toUpperCase();\n    \n    // Create pairing record\n    const pairing = await storage.createExtensionPairing({\n      userId,\n      extensionId: '', // Will be filled when extension pairs\n      pairingCode,\n      isActive: true\n    });\n\n    res.json({\n      pairingCode,\n      pairingId: pairing.id,\n      expiresAt: new Date(Date.now() + 10 * 60 * 1000).toISOString() // 10 minutes\n    });\n\n  } catch (error) {\n    console.error('Code generation error:', error);\n    res.status(500).json({ error: 'Failed to generate pairing code' });\n  }\n});\n\n// Get user's extension status\nextensionRouter.get('/status/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    \n    const pairings = await storage.getExtensionPairings(userId);\n    const activePairings = pairings.filter(p => p.isActive);\n\n    res.json({\n      hasPairedExtension: activePairings.length > 0,\n      extensions: activePairings.map(p => ({\n        id: p.id,\n        extensionId: p.extensionId,\n        lastSeen: p.lastSeen,\n        isOnline: p.lastSeen && new Date(p.lastSeen).getTime() > Date.now() - 5 * 60 * 1000 // 5 minutes\n      }))\n    });\n\n  } catch (error) {\n    console.error('Status check error:', error);\n    res.status(500).json({ error: 'Failed to check status' });\n  }\n});\n\n// Revoke extension access\nextensionRouter.post('/revoke/:pairingId', async (req, res) => {\n  try {\n    const { pairingId } = req.params;\n    \n    await storage.updateExtensionPairing(pairingId, { isActive: false });\n    \n    res.json({ success: true });\n\n  } catch (error) {\n    console.error('Revoke error:', error);\n    res.status(500).json({ error: 'Failed to revoke access' });\n  }\n});\n\n// Get user permissions for extension\nextensionRouter.get('/permissions/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    \n    const permissions = await storage.getUserPermissions(userId);\n    const activePermissions = permissions.filter(p => p.isActive && \n      (!p.expiresAt || new Date(p.expiresAt) > new Date())\n    );\n\n    res.json({\n      permissions: activePermissions.map(p => ({\n        id: p.id,\n        agentId: p.agentId,\n        scope: p.scope,\n        domain: p.domain,\n        autonomyLevel: p.autonomyLevel,\n        expiresAt: p.expiresAt\n      }))\n    });\n\n  } catch (error) {\n    console.error('Permissions error:', error);\n    res.status(500).json({ error: 'Failed to get permissions' });\n  }\n});\n\n// Grant new permission\nconst grantPermissionSchema = z.object({\n  agentId: z.string(),\n  scope: z.string(),\n  domain: z.string().optional(),\n  autonomyLevel: z.enum(['suggest', 'confirm', 'autonomous']),\n  expiresAt: z.string().optional()\n});\n\nextensionRouter.post('/permissions/:userId/grant', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const validatedData = grantPermissionSchema.parse(req.body);\n    \n    const permission = await storage.createUserPermission({\n      userId,\n      ...validatedData\n    });\n\n    res.json({ success: true, permission });\n\n  } catch (error) {\n    console.error('Permission grant error:', error);\n    res.status(500).json({ error: 'Failed to grant permission' });\n  }\n});\n\n// Get command execution log\nextensionRouter.get('/commands/:userId', async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const { limit = 50, offset = 0 } = req.query;\n    \n    const commands = await storage.getCommandLog(\n      userId, \n      parseInt(limit as string), \n      parseInt(offset as string)\n    );\n\n    res.json({\n      commands: commands.map(cmd => ({\n        id: cmd.id,\n        agentId: cmd.agentId,\n        capability: cmd.capability,\n        status: cmd.status,\n        createdAt: cmd.createdAt,\n        executedAt: cmd.executedAt\n      }))\n    });\n\n  } catch (error) {\n    console.error('Command log error:', error);\n    res.status(500).json({ error: 'Failed to get command log' });\n  }\n});\n\nexport default extensionRouter;","size_bytes":5546},"client/src/components/agent-card.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport type { Agent } from \"@shared/schema\";\n\ninterface AgentCardProps {\n  agent: Agent;\n}\n\nexport default function AgentCard({ agent }: AgentCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const formatRating = (rating: number) => {\n    return (rating / 10).toFixed(1);\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating / 10);\n    const hasHalfStar = (rating % 10) >= 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        stars.push(<i key={i} className=\"fas fa-star text-yellow-400\"></i>);\n      } else if (i === fullStars && hasHalfStar) {\n        stars.push(<i key={i} className=\"fas fa-star-half-alt text-yellow-400\"></i>);\n      } else {\n        stars.push(<i key={i} className=\"far fa-star text-yellow-400\"></i>);\n      }\n    }\n    return stars;\n  };\n\n  const getAgentImage = (agentName: string) => {\n    const imageMap: { [key: string]: string } = {\n      \"Business Growth\": \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      \"Operations\": \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      \"People & Finance\": \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      \"Marketing Agent\": \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      \"Data Analyst\": \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\",\n      \"Customer Support\": \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\"\n    };\n    return imageMap[agentName] || \"https://images.unsplash.com/photo-1677442136019-21780ecad995?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=300\";\n  };\n\n  const getCompanionImage = (agentName: string) => {\n    const companionMap: { [key: string]: string } = {\n      \"Business Growth\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"Operations\": \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"People & Finance\": \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"Marketing Agent\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"Data Analyst\": \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"Customer Support\": \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n    };\n    return companionMap[agentName] || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\";\n  };\n\n  const getSubagentNames = (agentName: string) => {\n    const subagentMap: Record<string, string> = {\n      \"Business Growth\": \"Lead Generator ‚Ä¢ Sales Qualifier ‚Ä¢ Campaign Manager ‚Ä¢ Analytics Specialist ‚Ä¢ Growth Hacker ‚Ä¢ Conversion Optimizer\",\n      \"Operations\": \"Process Automator ‚Ä¢ Workflow Manager ‚Ä¢ Quality Controller ‚Ä¢ Resource Planner ‚Ä¢ Task Scheduler ‚Ä¢ Performance Monitor\",\n      \"People & Finance\": \"HR Assistant ‚Ä¢ Payroll Manager ‚Ä¢ Budget Analyst ‚Ä¢ Expense Tracker ‚Ä¢ Compliance Monitor ‚Ä¢ Benefits Coordinator\",\n      \"Marketing Agent\": \"Social Media Specialist ‚Ä¢ Email Marketing Expert ‚Ä¢ Content Creator ‚Ä¢ Analytics Analyst ‚Ä¢ SEO Specialist ‚Ä¢ Campaign Manager\",\n      \"Data Analyst\": \"Data Scientist ‚Ä¢ Business Intelligence Analyst ‚Ä¢ Reporting Specialist ‚Ä¢ Predictive Modeler ‚Ä¢ Data Visualizer ‚Ä¢ Statistical Analyst\",\n      \"Customer Support\": \"Live Chat Agent ‚Ä¢ Ticket Manager ‚Ä¢ Knowledge Base Manager ‚Ä¢ Social Support Agent ‚Ä¢ Phone Support Agent ‚Ä¢ Escalation Specialist\"\n    };\n    return subagentMap[agentName] || \"AI Specialist ‚Ä¢ Task Automator ‚Ä¢ Process Manager ‚Ä¢ Data Handler ‚Ä¢ Communication Expert ‚Ä¢ Quality Controller\";\n  };\n\n  const getTagline = (agentName: string) => {\n    const taglineMap: Record<string, string> = {\n      \"Business Growth\": \"Scale your revenue with smart automation\",\n      \"Operations\": \"Streamline workflows and boost efficiency\", \n      \"People & Finance\": \"Manage teams and finances effortlessly\",\n      \"Marketing Agent\": \"Complete marketing automation suite\",\n      \"Data Analyst\": \"Advanced analytics and insights\",\n      \"Customer Support\": \"24/7 intelligent customer service\"\n    };\n    return taglineMap[agentName] || \"Intelligent automation for your business\";\n  };\n\n  return (\n    <motion.div\n      className=\"agent-card bg-gray-800 rounded-3xl shadow-xl hover:shadow-2xl border border-gray-700 group overflow-hidden cursor-pointer relative\"\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n      whileHover={{ y: -12, scale: 1.03 }}\n      transition={{ duration: 0.4, ease: \"easeOut\" }}\n    >\n      {/* Agent Background Image */}\n      <div className=\"relative h-48 overflow-hidden\">\n        <motion.img \n          src={getAgentImage(agent.name)}\n          alt={agent.name}\n          className=\"w-full h-full object-cover\"\n          animate={isHovered ? { scale: 1.1 } : { scale: 1 }}\n          transition={{ duration: 0.4 }}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n        \n        {/* Companion Profile Picture */}\n        <motion.div \n          className=\"absolute top-4 right-4 w-12 h-12 rounded-full border-3 border-white shadow-lg overflow-hidden\"\n          animate={isHovered ? { scale: 1.1, rotate: 5 } : { scale: 1, rotate: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          <img \n            src={getCompanionImage(agent.name)}\n            alt=\"AI Companion\"\n            className=\"w-full h-full object-cover\"\n          />\n        </motion.div>\n        \n        {/* Featured Badge */}\n        {agent.featured && (\n          <div className=\"absolute top-4 left-4 bg-gray-700/80 backdrop-blur-sm text-gray-300 rounded-full px-3 py-1 text-xs font-bold border border-gray-600\">\n            <i className=\"fas fa-crown mr-1\"></i>\n            FEATURED\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-6\">\n        {/* Agent Name and Tagline */}\n        <div className=\"mb-4\">\n          <h3 className=\"text-2xl font-neiko font-black text-white mb-2\">{agent.name.toUpperCase()}</h3>\n          <p className=\"text-gray-400 text-sm leading-relaxed\">{getTagline(agent.name)}</p>\n        </div>\n        \n        {/* Ratings */}\n        <div className=\"flex items-center mb-4\">\n          <div className=\"flex mr-2\">\n            {renderStars(agent.rating)}\n          </div>\n          <span className=\"text-sm text-gray-400\">\n            ({formatRating(agent.rating)}) ‚Ä¢ {agent.reviewCount} reviews\n          </span>\n        </div>\n        \n        {/* Moving Subagent Names - Only show on hover */}\n        <AnimatePresence>\n          {isHovered && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: \"auto\" }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.3 }}\n              className=\"mb-6 overflow-hidden bg-gray-700/30 rounded-lg p-3 border border-gray-600/30\"\n            >\n              <div className=\"text-xs text-gray-500 mb-2 font-neiko\">SUB-AGENTS:</div>\n              <div className=\"relative h-5 overflow-hidden\">\n                <div className=\"subagent-text-slide text-sm text-gray-300 font-medium whitespace-nowrap\">\n                  {getSubagentNames(agent.name)}\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n        \n        {/* Action Buttons */}\n        <div className=\"flex justify-between items-center gap-3\">\n          <Button \n            asChild\n            variant=\"outline\"\n            className=\"flex-1 border-2 border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white px-4 py-2 rounded-lg font-neiko font-bold text-sm transition-all\"\n          >\n            <Link href={`/agent/${agent.id}`}>\n              <i className=\"fas fa-eye mr-2\"></i>\n              VIEW AGENT\n            </Link>\n          </Button>\n          \n          <Button \n            className=\"flex-1 bg-gray-900 hover:bg-gray-800 text-white px-4 py-2 rounded-lg font-neiko font-bold text-sm shadow-lg transition-all transform hover:scale-105 border border-gray-700\"\n            onClick={() => {\n              // TODO: Implement hire flow with login check\n              console.log('Hire agent:', agent.name);\n            }}\n          >\n            <i className=\"fas fa-handshake mr-2\"></i>\n            HIRE NOW\n          </Button>\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":9339},"client/src/components/agent-config-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Settings, Zap, CheckCircle2, AlertCircle, Bot } from \"lucide-react\";\n\ninterface AgentConfigModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  agentType: string;\n  agentName: string;\n  userId: string;\n}\n\nexport default function AgentConfigModal({ \n  isOpen, \n  onClose, \n  agentType, \n  agentName, \n  userId \n}: AgentConfigModalProps) {\n  const [activeTab, setActiveTab] = useState(\"tasks\");\n  \n  const { data: agentConfig, isLoading } = useQuery({\n    queryKey: [`/api/agent-config/${userId}/${agentType}`],\n    enabled: isOpen,\n    select: (data: any) => data.config\n  });\n\n  const { data: detectedTools } = useQuery({\n    queryKey: [`/api/device-tools/${userId}`],\n    enabled: isOpen,\n    select: (data: any) => data.tools || []\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest(\"PATCH\", `/api/agent-config/${userId}/${agentType}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/agent-config/${userId}/${agentType}`] });\n    }\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: async (taskData: any) => {\n      const response = await apiRequest(\"POST\", `/api/agent-config/${userId}/${agentType}/toggle-task`, taskData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/agent-config/${userId}/${agentType}`] });\n    }\n  });\n\n  const handleTaskToggle = (task: any, fromLevel: string, toLevel: string) => {\n    toggleTaskMutation.mutate({\n      taskId: task.id,\n      fromLevel,\n      toLevel,\n      enabled: toLevel !== 'disabled'\n    });\n  };\n\n  const handleToolPermission = (toolName: string, allowed: boolean) => {\n    const currentTools = agentConfig?.allowedTools || [];\n    const updatedTools = allowed \n      ? [...currentTools, toolName]\n      : currentTools.filter((t: string) => t !== toolName);\n    \n    updateConfigMutation.mutate({ allowedTools: updatedTools });\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl h-[80vh]\">\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const TaskSection = ({ tasks, level, title, description, color }: any) => (\n    <div className=\"space-y-4\">\n      <div>\n        <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n          <Badge variant=\"outline\" className={`${color} text-xs`}>\n            {title}\n          </Badge>\n        </h3>\n        <p className=\"text-sm text-gray-500 mt-1\">{description}</p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 gap-3\">\n        {tasks?.map((task: any) => (\n          <Card key={task.id} className=\"border-l-4 border-l-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h4 className=\"font-medium\">{task.name}</h4>\n                    {task.enabled && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">{task.description}</p>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">{task.category}</Badge>\n                    {task.tools?.map((tool: string) => (\n                      <Badge key={tool} variant=\"outline\" className=\"text-xs\">\n                        {tool}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Switch \n                    checked={task.enabled}\n                    onCheckedChange={(enabled) => \n                      handleTaskToggle(task, level, enabled ? level : 'disabled')\n                    }\n                  />\n                  \n                  <select\n                    value={task.autonomyLevel}\n                    onChange={(e) => handleTaskToggle(task, level, e.target.value)}\n                    className=\"text-xs border rounded px-2 py-1\"\n                    disabled={!task.enabled}\n                  >\n                    <option value=\"autonomous\">Autonomous</option>\n                    <option value=\"confirm\">Confirm</option>\n                    <option value=\"suggest\">Suggest</option>\n                  </select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bot className=\"w-5 h-5\" />\n            Configure {agentName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"tasks\">Task Settings</TabsTrigger>\n              <TabsTrigger value=\"tools\">Tool Access</TabsTrigger>\n              <TabsTrigger value=\"preferences\">Preferences</TabsTrigger>\n            </TabsList>\n            \n            <div className=\"flex-1 overflow-y-auto mt-4\">\n              <TabsContent value=\"tasks\" className=\"space-y-6\">\n                <TaskSection \n                  tasks={agentConfig?.autonomousTasks}\n                  level=\"autonomous\"\n                  title=\"Autonomous Tasks\"\n                  description=\"Tasks the agent can perform without asking permission\"\n                  color=\"bg-green-100 text-green-800\"\n                />\n                \n                <TaskSection \n                  tasks={agentConfig?.confirmTasks}\n                  level=\"confirm\"\n                  title=\"Confirm Tasks\"\n                  description=\"Tasks that require your approval before execution\"\n                  color=\"bg-yellow-100 text-yellow-800\"\n                />\n                \n                <TaskSection \n                  tasks={agentConfig?.suggestTasks}\n                  level=\"suggest\"\n                  title=\"Suggest Tasks\"\n                  description=\"Tasks the agent can only suggest but not execute\"\n                  color=\"bg-blue-100 text-blue-800\"\n                />\n              </TabsContent>\n\n              <TabsContent value=\"tools\" className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">Tool Permissions</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">\n                    Control which tools and applications this agent can access on your device.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {detectedTools?.map((tool: any) => (\n                    <Card key={tool.id} className=\"relative\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <h4 className=\"font-medium\">{tool.toolName}</h4>\n                              {tool.installed && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n                              {tool.isLoggedIn && <Badge variant=\"outline\" className=\"text-xs\">Logged In</Badge>}\n                            </div>\n                            <p className=\"text-sm text-gray-500 capitalize\">{tool.category}</p>\n                            <div className=\"mt-2\">\n                              {tool.permissions?.map((perm: string) => (\n                                <Badge key={perm} variant=\"secondary\" className=\"text-xs mr-1 mb-1\">\n                                  {perm}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                          \n                          <Switch \n                            checked={agentConfig?.allowedTools?.includes(tool.toolName) || false}\n                            onCheckedChange={(checked) => handleToolPermission(tool.toolName, checked)}\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"preferences\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Working Hours</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Enable working hours restriction</span>\n                      <Switch \n                        checked={agentConfig?.workingHours?.enabled || false}\n                        onCheckedChange={(enabled) => \n                          updateConfigMutation.mutate({ \n                            workingHours: { ...agentConfig?.workingHours, enabled } \n                          })\n                        }\n                      />\n                    </div>\n                    \n                    {agentConfig?.workingHours?.enabled && (\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Start Time</label>\n                          <input \n                            type=\"time\" \n                            value={agentConfig?.workingHours?.start || '09:00'}\n                            className=\"w-full mt-1 p-2 border rounded\"\n                            onChange={(e) => \n                              updateConfigMutation.mutate({\n                                workingHours: { ...agentConfig?.workingHours, start: e.target.value }\n                              })\n                            }\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">End Time</label>\n                          <input \n                            type=\"time\" \n                            value={agentConfig?.workingHours?.end || '17:00'}\n                            className=\"w-full mt-1 p-2 border rounded\"\n                            onChange={(e) => \n                              updateConfigMutation.mutate({\n                                workingHours: { ...agentConfig?.workingHours, end: e.target.value }\n                              })\n                            }\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Notifications</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Task completion notifications</span>\n                      <Switch \n                        checked={agentConfig?.notifications?.taskCompletion || false}\n                        onCheckedChange={(taskCompletion) => \n                          updateConfigMutation.mutate({ \n                            notifications: { ...agentConfig?.notifications, taskCompletion } \n                          })\n                        }\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span>Error alerts</span>\n                      <Switch \n                        checked={agentConfig?.notifications?.errorAlerts || false}\n                        onCheckedChange={(errorAlerts) => \n                          updateConfigMutation.mutate({ \n                            notifications: { ...agentConfig?.notifications, errorAlerts } \n                          })\n                        }\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span>Daily summary</span>\n                      <Switch \n                        checked={agentConfig?.notifications?.dailySummary || false}\n                        onCheckedChange={(dailySummary) => \n                          updateConfigMutation.mutate({ \n                            notifications: { ...agentConfig?.notifications, dailySummary } \n                          })\n                        }\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14174},"client/src/components/agent-recommender.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link } from \"wouter\";\n\ninterface Message {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n  suggestions?: Array<{\n    title: string;\n    description: string;\n    agentId: string;\n  }>;\n}\n\nexport default function AgentRecommender() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      text: \"Hi! I'm here to help you find the perfect AI agents for your business. What type of tasks are you looking to automate?\",\n      isBot: true,\n      timestamp: new Date()\n    }\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputValue,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsTyping(true);\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: \"Perfect! Based on your needs, I recommend the Marketing Agent bundle. It includes:\",\n        isBot: true,\n        timestamp: new Date(),\n        suggestions: [\n          {\n            title: \"Marketing Agent\",\n            description: \"Complete marketing automation with content creation, social media management, and analytics reporting.\",\n            agentId: \"marketing-agent\"\n          }\n        ]\n      };\n      \n      setMessages(prev => [...prev, botResponse]);\n      setIsTyping(false);\n    }, 2000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <section className=\"py-20 bg-white relative\">\n      <div className=\"absolute inset-0 opacity-5 bg-gradient-to-br from-blue-50 to-purple-50\"></div>\n      \n      <div className=\"relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <motion.h2 \n            className=\"text-4xl font-bold text-dark mb-4\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            Agent Recommender\n          </motion.h2>\n          <motion.p \n            className=\"text-xl text-secondary\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Not sure which agents you need? Chat with our AI to get personalized recommendations\n          </motion.p>\n        </div>\n        \n        <motion.div \n          className=\"bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden\"\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n        >\n          {/* Chat Header */}\n          <div className=\"bg-gradient-to-r from-primary to-primary-dark p-6 text-white\">\n            <div className=\"flex items-center\">\n              <motion.div \n                className=\"w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center mr-4\"\n                animate={{ rotate: [0, 360] }}\n                transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n              >\n                <i className=\"fas fa-robot\"></i>\n              </motion.div>\n              <div>\n                <h3 className=\"font-semibold\">AI Agent Advisor</h3>\n                <p className=\"text-sm opacity-90\">\n                  <motion.span\n                    animate={{ opacity: [0.5, 1, 0.5] }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    Online\n                  </motion.span>\n                  ‚Ä¢ Ready to help\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Chat Messages */}\n          <div className=\"p-6 space-y-4 bg-gray-50 h-80 overflow-y-auto\">\n            <AnimatePresence>\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className={`flex items-start ${message.isBot ? \"\" : \"justify-end\"}`}\n                >\n                  {message.isBot && (\n                    <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n                      <i className=\"fas fa-robot text-white text-xs\"></i>\n                    </div>\n                  )}\n                  \n                  <div className={`rounded-lg p-4 shadow-sm max-w-md ${\n                    message.isBot ? \"bg-white\" : \"bg-primary text-white\"\n                  }`}>\n                    <p className={message.isBot ? \"text-dark\" : \"text-white\"}>\n                      {message.text}\n                    </p>\n                    \n                    {message.suggestions && (\n                      <div className=\"mt-3 space-y-2\">\n                        {message.suggestions.map((suggestion, index) => (\n                          <motion.div\n                            key={index}\n                            initial={{ opacity: 0, x: -20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: 0.5 + index * 0.1 }}\n                            className=\"bg-blue-50 p-3 rounded-lg\"\n                          >\n                            <h4 className=\"font-semibold text-dark\">{suggestion.title}</h4>\n                            <p className=\"text-sm text-secondary mb-2\">{suggestion.description}</p>\n                            <Button \n                              asChild\n                              size=\"sm\" \n                              className=\"bg-primary text-white\"\n                            >\n                              <Link href=\"/\">View Agent</Link>\n                            </Button>\n                          </motion.div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {!message.isBot && (\n                    <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center ml-3 flex-shrink-0\">\n                      <i className=\"fas fa-user text-gray-600 text-xs\"></i>\n                    </div>\n                  )}\n                </motion.div>\n              ))}\n            </AnimatePresence>\n            \n            {/* Typing Indicator */}\n            <AnimatePresence>\n              {isTyping && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className=\"flex items-start\"\n                >\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-3\">\n                    <i className=\"fas fa-robot text-white text-xs\"></i>\n                  </div>\n                  <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n                    <div className=\"flex space-x-1\">\n                      {[0, 1, 2].map((i) => (\n                        <motion.div\n                          key={i}\n                          className=\"w-2 h-2 bg-gray-400 rounded-full\"\n                          animate={{ scale: [1, 1.2, 1] }}\n                          transition={{ \n                            duration: 1, \n                            repeat: Infinity, \n                            delay: i * 0.2 \n                          }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n          \n          {/* Chat Input */}\n          <div className=\"p-6 bg-white border-t border-gray-100\">\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"Type your message...\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={handleSendMessage}\n                className=\"bg-primary hover:bg-primary-dark text-white p-3 rounded-lg transition-colors\"\n              >\n                <i className=\"fas fa-paper-plane\"></i>\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9054},"client/src/components/background-effects.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\nexport default function BackgroundEffects() {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => window.removeEventListener('mousemove', handleMouseMove);\n  }, []);\n\n  // Generate floating particles\n  const particles = Array.from({ length: 20 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    delay: Math.random() * 5,\n    duration: 10 + Math.random() * 20\n  }));\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n      {/* Animated Gradient Background */}\n      <motion.div\n        className=\"absolute inset-0 opacity-30\"\n        style={{\n          background: `radial-gradient(600px circle at ${mousePosition.x}px ${mousePosition.y}px, \n            rgba(59, 130, 246, 0.15), \n            rgba(147, 51, 234, 0.1), \n            transparent 50%)`\n        }}\n        animate={{\n          background: `radial-gradient(600px circle at ${mousePosition.x}px ${mousePosition.y}px, \n            rgba(59, 130, 246, 0.2), \n            rgba(147, 51, 234, 0.1), \n            transparent 50%)`\n        }}\n        transition={{ type: \"tween\", ease: \"linear\", duration: 0.2 }}\n      />\n\n      {/* Floating Particles */}\n      {particles.map((particle) => (\n        <motion.div\n          key={particle.id}\n          className=\"absolute w-1 h-1 bg-blue-400/30 rounded-full\"\n          style={{\n            left: `${particle.x}%`,\n            top: `${particle.y}%`,\n          }}\n          animate={{\n            y: [0, -30, 0],\n            opacity: [0, 1, 0],\n            scale: [0, 1, 0],\n          }}\n          transition={{\n            duration: particle.duration,\n            repeat: Infinity,\n            delay: particle.delay,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n\n      {/* Grid Pattern */}\n      <div \n        className=\"absolute inset-0 opacity-5\"\n        style={{\n          backgroundImage: `radial-gradient(circle at 1px 1px, rgba(59, 130, 246, 0.8) 1px, transparent 0)`,\n          backgroundSize: '50px 50px'\n        }}\n      />\n\n      {/* Animated Lines */}\n      <svg className=\"absolute inset-0 w-full h-full\">\n        {Array.from({ length: 3 }, (_, i) => (\n          <motion.path\n            key={i}\n            d={`M0,${100 + i * 200} Q400,${50 + i * 200} 800,${100 + i * 200} T1600,${100 + i * 200}`}\n            stroke=\"rgba(59, 130, 246, 0.1)\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            initial={{ pathLength: 0, opacity: 0 }}\n            animate={{ pathLength: 1, opacity: 1 }}\n            transition={{\n              duration: 3,\n              delay: i * 1,\n              repeat: Infinity,\n              repeatType: \"reverse\",\n              ease: \"easeInOut\"\n            }}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n}","size_bytes":3066},"client/src/components/cursor-effects.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface RippleEffect {\n  id: string;\n  x: number;\n  y: number;\n  timestamp: number;\n}\n\nexport default function CursorEffects() {\n  const [ripples, setRipples] = useState<RippleEffect[]>([]);\n  const [trail, setTrail] = useState<{ x: number; y: number; id: string }[]>([]);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      // Add to trail\n      setTrail(prev => [\n        ...prev.slice(-8), // Keep last 8 positions\n        { x: e.clientX, y: e.clientY, id: Date.now().toString() }\n      ]);\n    };\n\n    const handleClick = (e: MouseEvent) => {\n      // Add ripple effect on click\n      const newRipple: RippleEffect = {\n        id: Date.now().toString(),\n        x: e.clientX,\n        y: e.clientY,\n        timestamp: Date.now()\n      };\n\n      setRipples(prev => [...prev, newRipple]);\n\n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(r => r.id !== newRipple.id));\n      }, 1000);\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      {/* Mouse Trail */}\n      <AnimatePresence>\n        {trail.map((point, index) => (\n          <motion.div\n            key={`${point.id}-${index}`}\n            className=\"absolute w-2 h-2 bg-blue-400 rounded-full\"\n            style={{\n              left: point.x - 4,\n              top: point.y - 4,\n            }}\n            initial={{ opacity: 0.8, scale: 1 }}\n            animate={{ \n              opacity: 0, \n              scale: 0.3,\n            }}\n            exit={{ opacity: 0 }}\n            transition={{ \n              duration: 0.5,\n              delay: index * 0.05\n            }}\n          />\n        ))}\n      </AnimatePresence>\n\n      {/* Click Ripples */}\n      <AnimatePresence>\n        {ripples.map((ripple) => (\n          <motion.div\n            key={ripple.id}\n            className=\"absolute border-2 border-blue-400 rounded-full\"\n            style={{\n              left: ripple.x - 25,\n              top: ripple.y - 25,\n            }}\n            initial={{ \n              width: 0, \n              height: 0, \n              opacity: 1,\n              borderWidth: 2 \n            }}\n            animate={{ \n              width: 50, \n              height: 50, \n              opacity: 0,\n              borderWidth: 0\n            }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          />\n        ))}\n      </AnimatePresence>\n\n      {/* Agent-Specific Hover Effects */}\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          .agent-hover-sales:hover ~ .cursor-effect::after {\n            content: '$';\n            position: absolute;\n            color: #10b981;\n            font-size: 24px;\n            font-weight: bold;\n            pointer-events: none;\n            animation: float 2s infinite;\n          }\n          \n          .agent-hover-analytics:hover ~ .cursor-effect::after {\n            content: 'üìä';\n            position: absolute;\n            font-size: 20px;\n            pointer-events: none;\n            animation: pulse 1.5s infinite;\n          }\n          \n          .agent-hover-support:hover ~ .cursor-effect::after {\n            content: 'üí¨';\n            position: absolute;\n            font-size: 18px;\n            pointer-events: none;\n            animation: bounce 1s infinite;\n          }\n\n          @keyframes float {\n            0%, 100% { transform: translateY(0px); }\n            50% { transform: translateY(-10px); }\n          }\n          \n          @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.5; }\n          }\n          \n          @keyframes bounce {\n            0%, 100% { transform: translateY(0px); }\n            50% { transform: translateY(-5px); }\n          }\n        `\n      }} />\n    </div>\n  );\n}","size_bytes":4193},"client/src/components/extension-setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Chrome, Shield, Zap, Check, Copy, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExtensionSetupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  agentName: string;\n  requestedPermissions: Permission[];\n}\n\ninterface Permission {\n  scope: string;\n  domain?: string;\n  description: string;\n  example: string;\n}\n\nexport default function ExtensionSetup({ isOpen, onClose, agentName, requestedPermissions }: ExtensionSetupProps) {\n  const [step, setStep] = useState(1);\n  const [pairingCode, setPairingCode] = useState('');\n  const [isGeneratingCode, setIsGeneratingCode] = useState(false);\n  const [extensionStatus, setExtensionStatus] = useState<'not-installed' | 'installing' | 'paired' | 'error'>('not-installed');\n  const { toast } = useToast();\n\n  const generatePairingCode = async () => {\n    setIsGeneratingCode(true);\n    try {\n      const response = await fetch('/api/extension/generate-code', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: 'demo-user' }) // In production, get from auth\n      });\n      \n      const data = await response.json();\n      setPairingCode(data.pairingCode);\n      setStep(3);\n    } catch (error) {\n      toast({\n        title: \"Failed to generate pairing code\",\n        description: \"Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n    setIsGeneratingCode(false);\n  };\n\n  const copyPairingCode = () => {\n    navigator.clipboard.writeText(pairingCode);\n    toast({\n      title: \"Pairing code copied!\",\n      description: \"Paste it in the Replivo Helper extension.\",\n    });\n  };\n\n  const checkExtensionStatus = async () => {\n    try {\n      const response = await fetch('/api/extension/status/demo-user');\n      const data = await response.json();\n      \n      if (data.hasPairedExtension) {\n        setExtensionStatus('paired');\n        setStep(5);\n      }\n    } catch (error) {\n      console.error('Failed to check extension status:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (step === 4 || step === 3) {\n      const interval = setInterval(checkExtensionStatus, 2000);\n      return () => clearInterval(interval);\n    }\n  }, [step]);\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <Shield className=\"w-16 h-16 mx-auto text-blue-500 mb-4\" />\n              <h3 className=\"text-xl font-bold text-white mb-2\">\n                {agentName} requires browser access\n              </h3>\n              <p className=\"text-gray-400\">\n                To work effectively, this agent needs permission to interact with web pages on your behalf.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-white\">Requested permissions:</h4>\n              {requestedPermissions.map((permission, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"bg-gray-800 rounded-lg p-4 border border-gray-700\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <Badge variant=\"secondary\" className=\"bg-blue-600/20 text-blue-400\">\n                      {permission.scope}\n                    </Badge>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white text-sm mb-1\">{permission.description}</p>\n                      <p className=\"text-gray-500 text-xs\">Example: \"{permission.example}\"</p>\n                      {permission.domain && (\n                        <p className=\"text-gray-400 text-xs mt-1\">Domain: {permission.domain}</p>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={() => setStep(2)} className=\"flex-1\">\n                Accept & Install Helper\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6 text-center\">\n            <Chrome className=\"w-16 h-16 mx-auto text-blue-500\" />\n            <div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Install Replivo Helper</h3>\n              <p className=\"text-gray-400\">\n                Download the secure browser extension to enable agent automation.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg p-4 border border-gray-700\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <Shield className=\"w-5 h-5 text-green-500\" />\n                <span className=\"text-white font-medium\">Secure & Privacy-First</span>\n              </div>\n              <ul className=\"text-left text-gray-400 text-sm space-y-1\">\n                <li>‚Ä¢ Code-signed and verified extension</li>\n                <li>‚Ä¢ All commands are cryptographically signed</li>\n                <li>‚Ä¢ You control all permissions and can revoke anytime</li>\n                <li>‚Ä¢ Complete audit trail of all actions</li>\n              </ul>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" onClick={() => setStep(1)}>\n                Back\n              </Button>\n              <Button onClick={generatePairingCode} disabled={isGeneratingCode}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                {isGeneratingCode ? 'Preparing...' : 'Download Extension'}\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6 text-center\">\n            <Zap className=\"w-16 h-16 mx-auto text-yellow-500\" />\n            <div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Pair Your Extension</h3>\n              <p className=\"text-gray-400\">\n                Enter this code in the Replivo Helper extension to connect it to your account.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n              <div className=\"text-center mb-4\">\n                <span className=\"text-gray-400 text-sm\">Pairing Code</span>\n                <div className=\"text-4xl font-mono font-bold text-white tracking-widest mt-2\">\n                  {pairingCode}\n                </div>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" onClick={copyPairingCode} className=\"w-full\">\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy Code\n              </Button>\n            </div>\n\n            <div className=\"text-left text-gray-400 text-sm space-y-2\">\n              <p>1. Click the Replivo Helper extension icon in your browser toolbar</p>\n              <p>2. Click \"Pair with Account\"</p>\n              <p>3. Enter the pairing code above</p>\n              <p>4. Grant permissions for the requested domains</p>\n            </div>\n\n            <div className=\"flex items-center justify-center gap-2 text-blue-400\">\n              <RefreshCw className=\"w-4 h-4 animate-spin\" />\n              <span className=\"text-sm\">Waiting for extension pairing...</span>\n            </div>\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-6 text-center\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ type: \"spring\", duration: 0.5 }}\n            >\n              <Check className=\"w-16 h-16 mx-auto text-green-500\" />\n            </motion.div>\n            \n            <div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Successfully Connected!</h3>\n              <p className=\"text-gray-400\">\n                {agentName} is now ready to work on your behalf. All actions will be logged and can be reviewed in your dashboard.\n              </p>\n            </div>\n\n            <div className=\"bg-green-900/20 rounded-lg p-4 border border-green-700/50\">\n              <div className=\"flex items-center gap-3 justify-center text-green-400\">\n                <Shield className=\"w-5 h-5\" />\n                <span className=\"font-medium\">Secure Connection Established</span>\n              </div>\n            </div>\n\n            <Button onClick={onClose} className=\"w-full\">\n              Start Using {agentName}\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md bg-gray-900 border-gray-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Browser Helper Setup</DialogTitle>\n          <DialogDescription className=\"text-gray-400\">\n            Step {step} of 4\n          </DialogDescription>\n        </DialogHeader>\n        \n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={step}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            {renderStep()}\n          </motion.div>\n        </AnimatePresence>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9897},"client/src/components/sandbox-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { X, Send, User, Bot, Sparkles, AlertCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { SubAgent } from \"@shared/schema\";\n\ninterface SandboxModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  subAgent: SubAgent;\n}\n\ninterface ChatMessage {\n  id: string;\n  role: \"user\" | \"agent\";\n  content: string;\n  timestamp: Date;\n}\n\nexport default function SandboxModal({ isOpen, onClose, subAgent }: SandboxModalProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Map sub-agent categories to agent types for API calls\n  const getAgentType = (category: string): string => {\n    const categoryMap: Record<string, string> = {\n      \"content\": \"business-growth\",\n      \"analytics\": \"operations\", \n      \"support\": \"people-finance\"\n    };\n    return categoryMap[category] || \"business-growth\";\n  };\n\n  // Agent hire mutation for real AI responses\n  const agentMutation = useMutation({\n    mutationFn: async (userMessage: string) => {\n      const response = await apiRequest(\"POST\", \"/api/agents/hire\", {\n        agentType: getAgentType(subAgent.category),\n        subAgent: subAgent.name,\n        task: userMessage,\n        context: `This is a demo interaction in the Try Me sandbox. User is testing the ${subAgent.name} agent.`,\n        userId: \"demo-user\"\n      });\n      return await response.json();\n    },\n    onError: (error) => {\n      console.error(\"Agent API error:\", error);\n      setError(\"Unable to connect to AI agent. Please try again.\");\n      setIsTyping(false);\n    }\n  });\n\n  // Initialize with welcome message\n  useEffect(() => {\n    if (isOpen) {\n      setMessages([{\n        id: \"welcome\",\n        role: \"agent\",\n        content: `Hi! I'm your ${subAgent.name}. I'm ready to help you with ${subAgent.category}-related tasks. What would you like me to help you with today?`,\n        timestamp: new Date()\n      }]);\n    }\n  }, [isOpen, subAgent]);\n\n  // Fallback responses for when API is unavailable\n  const getFallbackResponse = (category: string): string => {\n    const responses: Record<string, string> = {\n      \"content\": \"I'm your Content Creator agent! I can help you create engaging blog posts, social media content, and marketing copy. For full functionality, please hire me to access real-time AI capabilities.\",\n      \"analytics\": \"I'm your Data Analyst agent! I can analyze patterns, generate reports, and provide insights. For full functionality with real data processing, please hire me.\",\n      \"support\": \"I'm your Customer Support agent! I can help resolve issues and provide assistance. For full functionality with real customer interactions, please hire me.\"\n    };\n    return responses[category] || \"I'm ready to help! For full AI capabilities, please hire me to access real-time responses.\";\n  };\n\n  const handleSend = async () => {\n    if (!input.trim() || agentMutation.isPending) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content: input,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = input;\n    setInput(\"\");\n    setIsTyping(true);\n    setError(null);\n\n    try {\n      // Use real AI response with proper error handling\n      const result: any = await agentMutation.mutateAsync(currentInput);\n      \n      let agentContent: string = result?.response || \"I'm here to help! Please try asking something specific to my area of expertise.\";\n      \n      // Handle approval requirements\n      if (result?.needsApproval) {\n        agentContent = `${agentContent}\\\\n\\\\n‚ö†Ô∏è **Action Required**: ${result.actionDescription}\\\\n\\\\nIn the full version, you would approve or deny this action.`;\n      }\n\n      const agentMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        role: \"agent\", \n        content: agentContent,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, agentMessage]);\n    } catch (error) {\n      console.error(\"Agent error:\", error);\n      setError(\"Connection failed. Please check API keys and try again.\");\n      \n      // Show error message in chat\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        role: \"agent\",\n        content: \"‚ö†Ô∏è I'm having trouble connecting right now. This might be due to missing API keys. Please try again or contact support.\",\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl h-[700px] bg-gradient-to-b from-gray-900 to-black border-gray-700\">\n        <DialogHeader className=\"border-b border-gray-700 pb-4\">\n          <DialogTitle className=\"text-white flex items-center gap-3\">\n            <motion.div \n              className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\"\n              animate={{ rotate: [0, 5, -5, 0] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Sparkles className=\"w-5 h-5 text-white\" />\n            </motion.div>\n            <div>\n              <div className=\"text-lg font-semibold\">Try {subAgent.name}</div>\n              <div className=\"text-sm text-gray-400\">Interactive sandbox - No commitments</div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          {/* Chat Messages */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 p-4\">\n            <AnimatePresence>\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  className={`flex gap-3 ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  {message.role === \"agent\" && (\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Bot className=\"w-4 h-4 text-white\" />\n                    </div>\n                  )}\n                  \n                  <Card className={`max-w-[80%] p-3 ${\n                    message.role === \"user\" \n                      ? \"bg-blue-600 text-white\" \n                      : \"bg-gray-800 text-gray-100 border-gray-700\"\n                  }`}>\n                    <p className=\"text-sm\">{message.content}</p>\n                    <div className=\"text-xs opacity-70 mt-1\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </div>\n                  </Card>\n\n                  {message.role === \"user\" && (\n                    <div className=\"w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <User className=\"w-4 h-4 text-white\" />\n                    </div>\n                  )}\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {/* Typing indicator */}\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex gap-3\"\n              >\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                  <Bot className=\"w-4 h-4 text-white\" />\n                </div>\n                <Card className=\"bg-gray-800 text-gray-100 border-gray-700 p-3\">\n                  <div className=\"flex gap-1\">\n                    <motion.div\n                      className=\"w-2 h-2 bg-blue-500 rounded-full\"\n                      animate={{ opacity: [0.3, 1, 0.3] }}\n                      transition={{ duration: 1, repeat: Infinity, delay: 0 }}\n                    />\n                    <motion.div\n                      className=\"w-2 h-2 bg-blue-500 rounded-full\"\n                      animate={{ opacity: [0.3, 1, 0.3] }}\n                      transition={{ duration: 1, repeat: Infinity, delay: 0.2 }}\n                    />\n                    <motion.div\n                      className=\"w-2 h-2 bg-blue-500 rounded-full\"\n                      animate={{ opacity: [0.3, 1, 0.3] }}\n                      transition={{ duration: 1, repeat: Infinity, delay: 0.4 }}\n                    />\n                  </div>\n                </Card>\n              </motion.div>\n            )}\n          </div>\n\n          {/* Input Area */}\n          <div className=\"border-t border-gray-700 p-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                data-testid=\"input-sandbox-message\"\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message here...\"\n                className=\"flex-1 bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n              />\n              <Button \n                data-testid=\"button-send-message\"\n                onClick={handleSend}\n                disabled={!input.trim() || isTyping}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <div className=\"flex items-center justify-between text-xs text-gray-500 mt-2\">\n              <span>This is a real AI demo. Hire for full capabilities and Chrome extension integration.</span>\n              {error && (\n                <div className=\"flex items-center gap-1 text-red-400\">\n                  <AlertCircle className=\"w-3 h-3\" />\n                  <span>API Error</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10742},"client/src/components/sub-agent-card.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SandboxModal from \"./sandbox-modal\";\nimport { Star, Play, Zap, Users, TrendingUp, MessageSquare } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { SubAgent, Agent } from \"@shared/schema\";\n\ninterface SubAgentCardProps {\n  subAgent: SubAgent;\n  onAdd?: (subAgent: SubAgent) => void;\n  showAddButton?: boolean;\n}\n\nexport default function SubAgentCard({ subAgent, onAdd, showAddButton = false }: SubAgentCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [sandboxOpen, setSandboxOpen] = useState(false);\n\n  // Find the parent agent that contains this sub-agent\n  const { data: agents } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents\"]\n  });\n\n  const parentAgent = agents?.find(agent => \n    agent.subAgentIds?.includes(subAgent.id)\n  );\n\n  const formatPrice = (price: number) => {\n    return `$${(price / 100).toFixed(0)}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"working\":\n        return \"text-green-500\";\n      case \"idle\":\n        return \"text-yellow-500\";\n      case \"completed\":\n        return \"text-blue-500\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  const getGradientClass = () => {\n    const gradients = [\n      \"from-blue-500 to-purple-600\",\n      \"from-green-500 to-teal-600\",\n      \"from-pink-500 to-rose-600\",\n      \"from-orange-500 to-red-600\",\n      \"from-indigo-500 to-blue-600\",\n      \"from-purple-500 to-pink-600\"\n    ];\n    const hash = subAgent.name.charCodeAt(0) % gradients.length;\n    return gradients[hash];\n  };\n\n  const getSubAgentImage = (category: string) => {\n    const imageMap: { [key: string]: string } = {\n      \"content\": \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n      \"analytics\": \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n      \"support\": \"https://images.unsplash.com/photo-1600880292203-757bb62b4baf?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n    };\n    return imageMap[subAgent.category] || \"https://images.unsplash.com/photo-1677442136019-21780ecad995?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\";\n  };\n\n  const getCompanionAvatar = (name: string) => {\n    const avatarMap: { [key: string]: string } = {\n      \"Content Creator\": \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\n      \"Data Analyst\": \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\", \n      \"Customer Support\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n    };\n    return avatarMap[name] || \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\";\n  };\n\n  const getDemoPreview = (category: string) => {\n    const previews: { [key: string]: { title: string; preview: string; } } = {\n      \"content\": {\n        title: \"Creating blog post...\",\n        preview: \"‚ú® Generating engaging content about market trends with SEO optimization and compelling headlines...\"\n      },\n      \"analytics\": { \n        title: \"Processing data...\",\n        preview: \"üìä Analyzing user behavior patterns, calculating conversion rates, and generating insights from 50K+ data points...\"\n      },\n      \"support\": {\n        title: \"Handling inquiry...\",\n        preview: \"üí¨ Customer asked about refund policy. Providing personalized solution while maintaining brand voice...\"\n      }\n    };\n    return previews[category] || {\n      title: \"Working on task...\",\n      preview: \"‚ö° Processing your request with advanced AI capabilities...\"\n    };\n  };\n\n  const formatRating = (rating: number) => {\n    return (rating / 10).toFixed(1);\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating / 10);\n    const hasHalfStar = (rating % 10) >= 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />);\n      } else if (i === fullStars && hasHalfStar) {\n        stars.push(<Star key={i} className=\"w-3 h-3 fill-yellow-400/50 text-yellow-400\" />);\n      } else {\n        stars.push(<Star key={i} className=\"w-3 h-3 text-gray-600\" />);\n      }\n    }\n    return stars;\n  };\n\n  const preview = getDemoPreview(subAgent.category);\n\n  return (\n    <>\n      <motion.div\n        className=\"relative bg-gray-900/90 backdrop-blur-sm rounded-2xl shadow-2xl hover:shadow-3xl transition-all overflow-hidden border border-gray-700/50 group\"\n        onHoverStart={() => { \n          setIsHovered(true);\n          setShowPreview(true);\n        }}\n        onHoverEnd={() => { \n          setIsHovered(false);\n          setShowPreview(false);\n        }}\n        whileHover={{ scale: 1.02, y: -5 }}\n        transition={{ duration: 0.3 }}\n      >\n        {/* Sub-agent Image with Companion Avatar */}\n        <div className=\"relative h-36 overflow-hidden\">\n          <motion.img \n            src={getSubAgentImage(subAgent.category)}\n            alt={subAgent.name}\n            className=\"w-full h-full object-cover\"\n            animate={isHovered ? { scale: 1.1 } : { scale: 1 }}\n            transition={{ duration: 0.4 }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\"></div>\n          \n          {/* Animated Companion Avatar */}\n          <motion.div \n            className=\"absolute top-3 right-3 w-12 h-12 rounded-full overflow-hidden border-2 border-white/20 shadow-xl\"\n            animate={isHovered ? { \n              scale: 1.1, \n              rotate: [0, -3, 3, 0],\n              boxShadow: \"0 8px 32px rgba(59, 130, 246, 0.3)\"\n            } : { \n              scale: 1, \n              rotate: 0,\n              boxShadow: \"0 4px 16px rgba(0, 0, 0, 0.3)\"\n            }}\n            transition={{ duration: 0.3 }}\n          >\n            <img \n              src={getCompanionAvatar(subAgent.name)}\n              alt={`${subAgent.name} Avatar`}\n              className=\"w-full h-full object-cover\"\n            />\n            <motion.div \n              className=\"absolute inset-0 bg-green-500/20 rounded-full\"\n              animate={isHovered ? { scale: [1, 1.2, 1] } : {}}\n              transition={{ duration: 2, repeat: Infinity }}\n            />\n          </motion.div>\n\n          {/* Category Badge with Animation */}\n          <motion.div \n            className={`absolute top-3 left-3 px-3 py-1 bg-gradient-to-r ${getGradientClass()} rounded-full flex items-center gap-2 shadow-lg`}\n            animate={isHovered ? { scale: 1.05, y: -2 } : { scale: 1, y: 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            <Zap className=\"w-3 h-3 text-white\" />\n            <span className=\"text-xs font-bold text-white uppercase tracking-wide\">\n              {subAgent.category}\n            </span>\n          </motion.div>\n\n          {/* Working Status Indicator */}\n          {subAgent.currentTask && (\n            <motion.div \n              className=\"absolute bottom-3 left-3 flex items-center gap-2\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n            >\n              <motion.div \n                className={`w-2 h-2 rounded-full ${getStatusColor(subAgent.taskStatus) === 'text-green-500' ? 'bg-green-500' : \n                  getStatusColor(subAgent.taskStatus) === 'text-yellow-500' ? 'bg-yellow-500' : 'bg-blue-500'}`}\n                animate={{ scale: [1, 1.3, 1] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <span className=\"text-xs text-white/90 bg-black/30 px-2 py-1 rounded-full backdrop-blur-sm\">\n                {subAgent.taskStatus === 'working' ? 'Active' : subAgent.taskStatus === 'completed' ? 'Done' : 'Ready'}\n              </span>\n            </motion.div>\n          )}\n        </div>\n\n        <div className=\"p-6 space-y-4\">\n          {/* Header with Rating */}\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <h4 className=\"text-lg font-bold text-white mb-1 group-hover:text-blue-300 transition-colors\">\n                {subAgent.name}\n              </h4>\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"flex\">{renderStars(subAgent.rating || 45)}</div>\n                <span className=\"text-sm text-gray-400\">\n                  {formatRating(subAgent.rating || 45)} ({(subAgent.reviewCount || 128).toLocaleString()})\n                </span>\n              </div>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-gray-800 text-gray-300\">\n              <Users className=\"w-3 h-3 mr-1\" />\n              {subAgent.totalHires || Math.floor(Math.random() * 500) + 100}\n            </Badge>\n          </div>\n          \n          <p className=\"text-sm text-gray-400 leading-relaxed line-clamp-2\">\n            {subAgent.description}\n          </p>\n\n          {/* Recent Updates */}\n          <AnimatePresence>\n            {isHovered && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: \"auto\" }}\n                exit={{ opacity: 0, height: 0 }}\n                className=\"space-y-2\"\n              >\n                <div className=\"flex items-center gap-2 text-xs text-green-400\">\n                  <TrendingUp className=\"w-3 h-3\" />\n                  <span>Updated 2 days ago</span>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  + Enhanced response accuracy + New integrations\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Live Preview */}\n          <AnimatePresence>\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 10 }}\n                className=\"bg-gray-800/50 rounded-lg p-3 border border-gray-700/50\"\n              >\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Play className=\"w-3 h-3 text-blue-400\" />\n                  <span className=\"text-xs font-medium text-blue-400\">{preview.title}</span>\n                </div>\n                <p className=\"text-xs text-gray-400 leading-relaxed\">{preview.preview}</p>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 pt-2\">\n            <Button\n              data-testid={`button-try-${subAgent.name.toLowerCase().replace(' ', '-')}`}\n              onClick={() => setSandboxOpen(true)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex-1 bg-blue-600/10 border-blue-600/30 text-blue-400 hover:bg-blue-600/20 hover:border-blue-500\"\n            >\n              <MessageSquare className=\"w-3 h-3 mr-2\" />\n              Try Me\n            </Button>\n            \n            {showAddButton && (\n              <Button\n                data-testid={`button-add-${subAgent.name.toLowerCase().replace(' ', '-')}`}\n                onClick={() => onAdd?.(subAgent)}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white shadow-lg\"\n              >\n                <span className=\"text-lg font-bold mr-1\">+</span>\n                ${formatPrice(subAgent.price).replace('$', '')}/mo\n              </Button>\n            )}\n            \n            <Button\n              data-testid={`button-hire-${subAgent.name.toLowerCase().replace(' ', '-')}`}\n              onClick={() => {\n                if (parentAgent) {\n                  window.location.href = `/hire/${parentAgent.id}?subAgent=${subAgent.id}`;\n                } else {\n                  console.error('No parent agent found for sub-agent:', subAgent.name);\n                }\n              }}\n              size=\"sm\"\n              className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg font-semibold\"\n              disabled={!parentAgent}\n            >\n              <Zap className=\"w-3 h-3 mr-1\" />\n              Hire\n            </Button>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Sandbox Modal */}\n      <SandboxModal \n        isOpen={sandboxOpen}\n        onClose={() => setSandboxOpen(false)}\n        subAgent={subAgent}\n      />\n    </>\n  );\n}\n","size_bytes":13061},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const COMPANY_LOGOS = [\n  { name: \"Stripe\", icon: \"fab fa-stripe\" },\n  { name: \"HubSpot\", icon: \"fas fa-chart-line\" },\n  { name: \"Shopify\", icon: \"fab fa-shopify\" },\n  { name: \"Zapier\", icon: \"fas fa-bolt\" },\n  { name: \"Notion\", icon: \"fas fa-sticky-note\" },\n  { name: \"Intercom\", icon: \"fas fa-comments\" },\n  { name: \"Webflow\", icon: \"fas fa-code\" },\n  { name: \"Airtable\", icon: \"fas fa-table\" }\n];\n\nexport const CATEGORIES = [\n  { id: \"all\", name: \"All Categories\" },\n  { id: \"content\", name: \"Content\" },\n  { id: \"analytics\", name: \"Analytics\" },\n  { id: \"support\", name: \"Support\" },\n  { id: \"sales\", name: \"Sales\" }\n];\n\nexport const TRENDING_TEMPLATES = [\n  {\n    name: \"E-commerce Manager\",\n    description: \"Product management, inventory tracking, customer service\",\n    icon: \"fas fa-store\",\n    category: \"e-commerce\"\n  },\n  {\n    name: \"Restaurant Operations\",\n    description: \"Menu management, order processing, customer feedback\",\n    icon: \"fas fa-utensils\",\n    category: \"restaurant\"\n  },\n  {\n    name: \"HR Assistant\",\n    description: \"Recruitment, onboarding, employee management\",\n    icon: \"fas fa-users\",\n    category: \"hr\"\n  }\n];\n\nexport const BUDGET_RANGES = [\n  \"$50-100/month\",\n  \"$100-250/month\",\n  \"$250-500/month\",\n  \"$500+ /month\"\n];\n\nexport const INDUSTRIES = [\n  \"E-commerce\",\n  \"SaaS\",\n  \"Marketing Agency\",\n  \"Healthcare\",\n  \"Finance\",\n  \"Restaurant\",\n  \"Real Estate\",\n  \"Education\",\n  \"Other\"\n];\n","size_bytes":1437},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/agent-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useRoute } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport SubAgentCard from \"@/components/sub-agent-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Agent, SubAgent } from \"@shared/schema\";\n\nexport default function AgentDetails() {\n  const [, params] = useRoute(\"/agent/:id\");\n  const [selectedSubAgents, setSelectedSubAgents] = useState<SubAgent[]>([]);\n  \n  const { data: agent, isLoading } = useQuery<Agent>({\n    queryKey: [\"/api/agents\", params?.id],\n    enabled: !!params?.id\n  });\n\n  const { data: subAgents } = useQuery<SubAgent[]>({\n    queryKey: [\"/api/sub-agents\"],\n    enabled: !!agent?.subAgentIds?.length\n  });\n\n  const agentSubAgents = subAgents?.filter(sa => \n    agent?.subAgentIds?.includes(sa.id)\n  ) || [];\n\n  const handleAddSubAgent = (subAgent: SubAgent) => {\n    setSelectedSubAgents(prev => {\n      if (prev.find(sa => sa.id === subAgent.id)) {\n        return prev.filter(sa => sa.id !== subAgent.id);\n      }\n      return [...prev, subAgent];\n    });\n  };\n\n  const isSubAgentSelected = (subAgentId: string) => {\n    return selectedSubAgents.some(sa => sa.id === subAgentId);\n  };\n\n  const formatRating = (rating: number) => {\n    return (rating / 10).toFixed(1);\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating / 10);\n    const hasHalfStar = (rating % 10) >= 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        stars.push(<i key={i} className=\"fas fa-star text-yellow-400\"></i>);\n      } else if (i === fullStars && hasHalfStar) {\n        stars.push(<i key={i} className=\"fas fa-star-half-alt text-yellow-400\"></i>);\n      } else {\n        stars.push(<i key={i} className=\"far fa-star text-yellow-400\"></i>);\n      }\n    }\n    return stars;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-600\"></div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!agent) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-white mb-4\">Agent Not Found</h1>\n            <p className=\"text-gray-400\">The agent you're looking for doesn't exist.</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Header />\n      \n      {/* Agent Hero Section */}\n      <section className=\"py-20 bg-black relative\">\n        <div className=\"absolute inset-0 opacity-10\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              className=\"inline-block bg-gray-800/50 text-gray-300 rounded-full px-6 py-2 mb-6 font-semibold text-sm border border-gray-600/30\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n            >\n              <i className={`${agent.icon} mr-2`}></i>\n              AGENT DETAILS\n            </motion.div>\n            \n            <h1 className=\"text-5xl md:text-6xl font-neiko font-black text-white mb-6 leading-tight\">\n              {agent.name.toUpperCase()}\n            </h1>\n            \n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto mb-8 leading-relaxed\">\n              {agent.description}\n            </p>\n\n            {/* Ratings and Reviews */}\n            <div className=\"flex items-center justify-center mb-8\">\n              <div className=\"flex mr-3\">\n                {renderStars(agent.rating)}\n              </div>\n              <span className=\"text-lg text-gray-300 mr-4\">\n                {formatRating(agent.rating)} ({agent.reviewCount} reviews)\n              </span>\n              {agent.featured && (\n                <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n                  <i className=\"fas fa-crown mr-1\"></i>\n                  Featured\n                </Badge>\n              )}\n            </div>\n\n            {/* Main Hire Button */}\n            <Button \n              className=\"bg-gray-900 text-white hover:bg-gray-800 px-12 py-4 rounded-lg font-neiko font-bold text-xl shadow-xl transition-all transform hover:scale-105 border border-gray-700\"\n              onClick={() => {\n                // TODO: Implement hire flow\n                console.log('Hire full agent:', agent.name);\n              }}\n            >\n              <i className=\"fas fa-handshake mr-3\"></i>\n              HIRE COMPLETE AGENT\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Sub-Agents Section */}\n      <section className=\"py-20 bg-gray-900 relative\">\n        <div className=\"absolute inset-0 opacity-10\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-neiko font-black text-white mb-6 leading-tight\">\n              INCLUDED SUB-AGENTS\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto leading-relaxed\">\n              Each sub-agent specializes in specific tasks. You can hire the complete bundle or select individual agents.\n            </p>\n          </motion.div>\n\n          {agentSubAgents.length > 0 ? (\n            <motion.div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              viewport={{ once: true }}\n            >\n              {agentSubAgents.map((subAgent, index) => (\n                <motion.div\n                  key={subAgent.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"relative\"\n                >\n                  <div className={`${isSubAgentSelected(subAgent.id) ? 'ring-2 ring-blue-500' : ''}`}>\n                    <SubAgentCard \n                      subAgent={subAgent} \n                      onAdd={handleAddSubAgent}\n                      showAddButton={true}\n                    />\n                  </div>\n                  {isSubAgentSelected(subAgent.id) && (\n                    <motion.div\n                      className=\"absolute -top-2 -right-2 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\"\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ type: \"spring\", stiffness: 300 }}\n                    >\n                      <i className=\"fas fa-check text-white text-xs\"></i>\n                    </motion.div>\n                  )}\n                </motion.div>\n              ))}\n            </motion.div>\n          ) : (\n            <div className=\"text-center text-gray-400\">\n              <p>No sub-agents available for this agent.</p>\n            </div>\n          )}\n\n          {/* Selected Sub-Agents Cart */}\n          <AnimatePresence>\n            {selectedSubAgents.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, y: 50 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 50 }}\n                className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-white rounded-2xl shadow-2xl p-6 border border-gray-200 z-50 max-w-md w-full mx-4\"\n              >\n                <h4 className=\"font-bold text-gray-900 mb-3\">\n                  Selected Sub-Agents ({selectedSubAgents.length})\n                </h4>\n                <div className=\"space-y-2 mb-4 max-h-32 overflow-y-auto\">\n                  {selectedSubAgents.map((subAgent) => (\n                    <div key={subAgent.id} className=\"flex justify-between items-center text-sm\">\n                      <span className=\"text-gray-700\">{subAgent.name}</span>\n                      <span className=\"font-medium text-gray-900\">\n                        ${(subAgent.price / 100).toFixed(0)}/mo\n                      </span>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"border-t pt-3 flex justify-between items-center\">\n                  <span className=\"font-bold text-gray-900\">\n                    Total: ${selectedSubAgents.reduce((sum, sa) => sum + sa.price, 0) / 100}/mo\n                  </span>\n                  <Button \n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    onClick={() => {\n                      // TODO: Implement checkout flow\n                      console.log('Checkout selected sub-agents:', selectedSubAgents);\n                    }}\n                  >\n                    Checkout\n                  </Button>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10490},"client/src/pages/agent-hiring.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Check, X, Globe, Chrome, Shield, Activity, MessageSquare, Zap } from \"lucide-react\";\nimport type { Agent, SubAgent } from \"@shared/schema\";\n\nexport default function AgentHiring() {\n  const [, params] = useRoute(\"/hire/:agentId\");\n  const [step, setStep] = useState(1);\n  const [selectedSubAgents, setSelectedSubAgents] = useState<string[]>([]);\n  const [permissions, setPermissions] = useState({\n    browserAccess: false,\n    emailAccess: false,\n    calendarAccess: false,\n    socialMedia: false\n  });\n  const [domains, setDomains] = useState(\"\");\n  const [autonomyLevel, setAutonomyLevel] = useState<\"suggest\" | \"confirm\" | \"autonomous\">(\"confirm\");\n  const [extensionStatus, setExtensionStatus] = useState<{ paired: boolean; online: boolean }>({ paired: false, online: false });\n  const [detectedTools, setDetectedTools] = useState<any[]>([]);\n  const [selectedTools, setSelectedTools] = useState<string[]>([]);\n  const [isScanning, setIsScanning] = useState(false);\n\n  const { data: agent, isLoading } = useQuery<Agent>({\n    queryKey: [\"/api/agents\", params?.agentId],\n    enabled: !!params?.agentId\n  });\n\n  const { data: subAgents } = useQuery<SubAgent[]>({\n    queryKey: [\"/api/sub-agents\"],\n    enabled: !!agent?.subAgentIds?.length\n  });\n\n  const { data: extensionStatusData } = useQuery({\n    queryKey: [\"/api/extension/status\", \"demo-user\"],\n    refetchInterval: 5000,\n    select: (data: any) => ({\n      paired: data.hasPairedExtension,\n      online: data.extensions?.[0]?.isOnline || false\n    })\n  });\n\n  // Query for detected tools\n  const { data: detectedToolsData } = useQuery({\n    queryKey: [\"/api/device-tools\", \"demo-user\"],\n    enabled: step >= 2,\n    select: (data: any) => data.tools || []\n  });\n\n  const scanDeviceMutation = useMutation({\n    mutationFn: async () => {\n      setIsScanning(true);\n      const response = await apiRequest(\"POST\", \"/api/device-tools/scan/demo-user\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setDetectedTools([...data.installed, ...data.browser]);\n      setIsScanning(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/device-tools\"] });\n    },\n    onError: () => {\n      setIsScanning(false);\n    }\n  });\n\n  const generatePairingCodeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/extension/generate-code\", { userId: \"demo-user\" });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/extension/status\"] });\n    }\n  });\n\n  const hireAgentMutation = useMutation({\n    mutationFn: async (hireData: any) => {\n      // Grant permissions for each selected capability\n      for (const permission of hireData.permissions) {\n        await apiRequest(\"POST\", \"/api/extension/permissions/demo-user/grant\", permission);\n      }\n      \n      // Execute initial agent task\n      const response = await apiRequest(\"POST\", \"/api/agents/hire\", {\n        agentType: getAgentType(agent?.category || \"\"),\n        subAgent: agent?.name,\n        task: \"I've been hired! Ready to help with your tasks.\",\n        context: \"Initial agent setup and introduction\",\n        userId: \"demo-user\"\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setStep(4); // Success step\n      queryClient.invalidateQueries({ queryKey: [\"/api/agents/hired\"] });\n    }\n  });\n\n  useEffect(() => {\n    if (extensionStatusData) {\n      setExtensionStatus(extensionStatusData);\n    }\n  }, [extensionStatusData]);\n\n  useEffect(() => {\n    if (detectedToolsData) {\n      setDetectedTools(detectedToolsData);\n    }\n  }, [detectedToolsData]);\n\n  // Auto-scan device when moving to permissions step\n  useEffect(() => {\n    if (step === 2 && detectedTools.length === 0 && !isScanning) {\n      scanDeviceMutation.mutate();\n    }\n  }, [step]);\n\n  const getAgentType = (category: string): string => {\n    const categoryMap: Record<string, string> = {\n      \"growth\": \"business-growth\",\n      \"operations\": \"operations\",\n      \"people-finance\": \"people-finance\"\n    };\n    return categoryMap[category] || \"business-growth\";\n  };\n\n  const agentSubAgents = subAgents?.filter(sa => \n    agent?.subAgentIds?.includes(sa.id)\n  ) || [];\n\n  const handleHire = async () => {\n    if (!agent) return;\n\n    const permissionsToGrant = [];\n    \n    // Grant permissions for selected tools\n    for (const toolName of selectedTools) {\n      const tool = detectedTools.find(t => t.toolName === toolName);\n      if (tool) {\n        for (const permission of tool.permissions) {\n          permissionsToGrant.push({\n            agentId: agent.id,\n            scope: permission,\n            domain: domains || \"*\",\n            autonomyLevel: autonomyLevel\n          });\n        }\n      }\n    }\n    \n    // Fallback to basic permissions if no tools selected\n    if (permissions.browserAccess) {\n      permissionsToGrant.push({\n        agentId: agent.id,\n        scope: \"browser:all\",\n        domain: domains || \"*\",\n        autonomyLevel: autonomyLevel\n      });\n    }\n    \n    if (permissions.emailAccess) {\n      permissionsToGrant.push({\n        agentId: agent.id,\n        scope: \"email:send\",\n        autonomyLevel: autonomyLevel\n      });\n    }\n\n    if (permissions.calendarAccess) {\n      permissionsToGrant.push({\n        agentId: agent.id,\n        scope: \"calendar:create\",\n        autonomyLevel: autonomyLevel\n      });\n    }\n\n    if (permissions.socialMedia) {\n      permissionsToGrant.push({\n        agentId: agent.id,\n        scope: \"social:post\",\n        autonomyLevel: autonomyLevel\n      });\n    }\n\n    await hireAgentMutation.mutateAsync({\n      agent,\n      selectedSubAgents,\n      permissions: permissionsToGrant,\n      autonomyLevel,\n      selectedTools\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-600\"></div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!agent) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-white mb-4\">Agent Not Found</h1>\n            <p className=\"text-gray-400\">The agent you're trying to hire doesn't exist.</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Hire {agent.name}\n          </h1>\n          <p className=\"text-gray-400 text-lg\">\n            Set up your AI agent with secure browser control\n          </p>\n        </motion.div>\n\n        {/* Progress Steps */}\n        <div className=\"flex justify-center mb-12\">\n          <div className=\"flex items-center space-x-4\">\n            {[1, 2, 3, 4].map((stepNum) => (\n              <div key={stepNum} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  stepNum <= step ? 'bg-blue-600 text-white' : 'bg-gray-600 text-gray-400'\n                }`}>\n                  {stepNum < step ? <Check className=\"w-4 h-4\" /> : stepNum}\n                </div>\n                {stepNum < 4 && (\n                  <div className={`w-12 h-0.5 ${stepNum < step ? 'bg-blue-600' : 'bg-gray-600'}`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          {step === 1 && (\n            <motion.div\n              key=\"step1\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card className=\"bg-gray-900 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Chrome className=\"w-5 h-5\" />\n                    Chrome Extension Setup\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                    <div>\n                      <h3 className=\"text-white font-medium\">Extension Status</h3>\n                      <p className=\"text-gray-400 text-sm\">\n                        {extensionStatus.paired && extensionStatus.online \n                          ? \"Connected and ready for automation\" \n                          : generatePairingCodeMutation.data\n                            ? \"Pairing code generated - Please connect extension\"\n                            : \"Extension not connected\"\n                        }\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        extensionStatus.paired && extensionStatus.online \n                          ? 'bg-green-500' \n                          : generatePairingCodeMutation.data\n                            ? 'bg-yellow-500' \n                            : 'bg-red-500'\n                      }`} />\n                      <span className={`text-sm ${\n                        extensionStatus.paired && extensionStatus.online \n                          ? 'text-green-400' \n                          : 'text-gray-400'\n                      }`}>\n                        {extensionStatus.paired && extensionStatus.online \n                          ? 'Ready' \n                          : generatePairingCodeMutation.data \n                            ? 'Waiting for connection' \n                            : 'Not connected'}\n                      </span>\n                    </div>\n                  </div>\n\n                  {!(extensionStatus.paired && extensionStatus.online) && (\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-300\">\n                        Install the Replivo Chrome extension to enable device control for your agents.\n                      </p>\n                      <div className=\"flex gap-4\">\n                        <Button\n                          onClick={() => window.open('/chrome-extension/manifest.json', '_blank')}\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                        >\n                          <Chrome className=\"w-4 h-4 mr-2\" />\n                          Download Extension\n                        </Button>\n                        <Button\n                          onClick={() => generatePairingCodeMutation.mutate()}\n                          variant=\"outline\"\n                          className=\"border-gray-600 text-gray-300\"\n                          disabled={generatePairingCodeMutation.isPending}\n                        >\n                          Generate Pairing Code\n                        </Button>\n                      </div>\n                      {generatePairingCodeMutation.data && (\n                        <div className=\"bg-gray-800 p-4 rounded-lg\">\n                          <p className=\"text-white font-mono text-lg text-center\">\n                            {generatePairingCodeMutation.data.pairingCode}\n                          </p>\n                          <p className=\"text-gray-400 text-sm text-center mt-2\">\n                            Enter this code in your Chrome extension\n                          </p>\n                          <div className=\"mt-3 p-2 rounded-lg bg-blue-900/30 border border-blue-500/30\">\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <Chrome className=\"w-4 h-4 text-blue-400\" />\n                              <span className=\"text-blue-300\">Click the extension icon ‚Üí Enter pairing code ‚Üí Connect</span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  <Button\n                    onClick={() => setStep(2)}\n                    disabled={!extensionStatus.paired || !extensionStatus.online}\n                    className=\"w-full bg-gray-800 hover:bg-gray-700\"\n                  >\n                    {!extensionStatus.paired ? \"Generate pairing code first\" :\n                     !extensionStatus.online ? \"Connect your Chrome extension\" :\n                     \"Continue to Permissions\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {step === 2 && (\n            <motion.div\n              key=\"step2\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card className=\"bg-gray-900 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    Security & Permissions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-medium\">Browser Control</h3>\n                        <p className=\"text-gray-400 text-sm\">Allow agent to interact with web pages</p>\n                      </div>\n                      <Switch\n                        checked={permissions.browserAccess}\n                        onCheckedChange={(checked) => setPermissions(prev => ({ ...prev, browserAccess: checked }))}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-medium\">Email Access</h3>\n                        <p className=\"text-gray-400 text-sm\">Send emails on your behalf</p>\n                      </div>\n                      <Switch\n                        checked={permissions.emailAccess}\n                        onCheckedChange={(checked) => setPermissions(prev => ({ ...prev, emailAccess: checked }))}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-medium\">Calendar Access</h3>\n                        <p className=\"text-gray-400 text-sm\">Create and manage calendar events</p>\n                      </div>\n                      <Switch\n                        checked={permissions.calendarAccess}\n                        onCheckedChange={(checked) => setPermissions(prev => ({ ...prev, calendarAccess: checked }))}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-medium\">Social Media</h3>\n                        <p className=\"text-gray-400 text-sm\">Post content to social platforms</p>\n                      </div>\n                      <Switch\n                        checked={permissions.socialMedia}\n                        onCheckedChange={(checked) => setPermissions(prev => ({ ...prev, socialMedia: checked }))}\n                      />\n                    </div>\n                  </div>\n\n                  {permissions.browserAccess && (\n                    <div>\n                      <label className=\"text-white font-medium block mb-2\">Allowed Domains</label>\n                      <Input\n                        value={domains}\n                        onChange={(e) => setDomains(e.target.value)}\n                        placeholder=\"example.com, *.mycompany.com (leave empty for all domains)\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    </div>\n                  )}\n\n                  <div>\n                    <label className=\"text-white font-medium block mb-2\">Autonomy Level</label>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {[\n                        { value: \"suggest\" as const, label: \"Suggest\", desc: \"Ask before every action\" },\n                        { value: \"confirm\" as const, label: \"Confirm\", desc: \"Ask for important actions\" },\n                        { value: \"autonomous\" as const, label: \"Autonomous\", desc: \"Act independently\" }\n                      ].map((option) => (\n                        <button\n                          key={option.value}\n                          onClick={() => setAutonomyLevel(option.value)}\n                          className={`p-3 rounded-lg border text-left ${\n                            autonomyLevel === option.value\n                              ? 'border-blue-500 bg-blue-600/20 text-blue-300'\n                              : 'border-gray-600 bg-gray-800 text-gray-300 hover:bg-gray-700'\n                          }`}\n                        >\n                          <div className=\"font-medium\">{option.label}</div>\n                          <div className=\"text-xs opacity-75\">{option.desc}</div>\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button onClick={() => setStep(1)} variant=\"outline\" className=\"flex-1 border-gray-600\">\n                      Back\n                    </Button>\n                    <Button onClick={() => setStep(3)} className=\"flex-1 bg-gray-800 hover:bg-gray-700\">\n                      Continue\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {step === 3 && (\n            <motion.div\n              key=\"step3\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card className=\"bg-gray-900 border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Confirm Hiring\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-gray-800 p-6 rounded-lg\">\n                    <h3 className=\"text-white font-bold text-xl mb-2\">{agent.name}</h3>\n                    <p className=\"text-gray-400 mb-4\">{agent.description}</p>\n                    <div className=\"flex items-center gap-4\">\n                      <Badge className=\"bg-blue-600/20 text-blue-300\">\n                        ${(agent.price / 100).toFixed(0)}/month\n                      </Badge>\n                      <Badge className=\"bg-gray-700 text-gray-300\">\n                        {agentSubAgents.length} Sub-agents\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-white font-medium\">Granted Permissions:</h4>\n                    <div className=\"space-y-1\">\n                      {permissions.browserAccess && (\n                        <div className=\"flex items-center gap-2 text-green-400\">\n                          <Check className=\"w-4 h-4\" />\n                          <span>Browser Control {domains && `(${domains})`}</span>\n                        </div>\n                      )}\n                      {permissions.emailAccess && (\n                        <div className=\"flex items-center gap-2 text-green-400\">\n                          <Check className=\"w-4 h-4\" />\n                          <span>Email Access</span>\n                        </div>\n                      )}\n                      {permissions.calendarAccess && (\n                        <div className=\"flex items-center gap-2 text-green-400\">\n                          <Check className=\"w-4 h-4\" />\n                          <span>Calendar Access</span>\n                        </div>\n                      )}\n                      {permissions.socialMedia && (\n                        <div className=\"flex items-center gap-2 text-green-400\">\n                          <Check className=\"w-4 h-4\" />\n                          <span>Social Media Access</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button onClick={() => setStep(2)} variant=\"outline\" className=\"flex-1 border-gray-600\">\n                      Back\n                    </Button>\n                    <Button \n                      onClick={handleHire}\n                      disabled={hireAgentMutation.isPending}\n                      className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                    >\n                      {hireAgentMutation.isPending ? 'Hiring...' : 'Hire Agent'}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {step === 4 && (\n            <motion.div\n              key=\"step4\"\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card className=\"bg-gray-900 border-gray-700\">\n                <CardContent className=\"text-center py-12\">\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\"\n                  >\n                    <Check className=\"w-8 h-8 text-white\" />\n                  </motion.div>\n                  <h3 className=\"text-2xl font-bold text-white mb-4\">Agent Hired Successfully!</h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    {agent.name} is now active and ready to help you. You can start giving it tasks through the Chrome extension.\n                  </p>\n                  <div className=\"flex gap-4 justify-center\">\n                    <Button onClick={() => window.location.href = \"/marketplace\"} variant=\"outline\" className=\"border-gray-600\">\n                      Back to Marketplace\n                    </Button>\n                    <Button onClick={() => window.location.href = \"/dashboard\"} className=\"bg-blue-600 hover:bg-blue-700\">\n                      Go to Dashboard\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\n","size_bytes":24085},"client/src/pages/custom-agent.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCustomRequestSchema } from \"@shared/schema\";\nimport { TRENDING_TEMPLATES, BUDGET_RANGES, INDUSTRIES } from \"@/lib/constants\";\nimport type { InsertCustomRequest } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCustomRequestSchema.extend({\n  industry: z.string().optional(),\n  budgetRange: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function CustomAgent() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      description: \"\",\n      industry: \"\",\n      budgetRange: \"\",\n      allowPooling: false,\n    },\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: InsertCustomRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/custom-requests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-requests\"] });\n      toast({\n        title: \"Request Submitted!\",\n        description: \"We'll get back to you within 24 hours with a custom agent proposal.\",\n      });\n      form.reset();\n      setCurrentStep(1);\n      setSelectedTemplate(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createRequestMutation.mutate(data);\n  };\n\n  const selectTemplate = (templateName: string, description: string) => {\n    setSelectedTemplate(templateName);\n    form.setValue(\"description\", `${templateName}: ${description}`);\n    setCurrentStep(2);\n  };\n\n  const nextStep = () => {\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Header />\n      \n      {/* Custom Agent Builder Section */}\n      <section className=\"py-32 bg-black relative\">\n        <div className=\"absolute inset-0 opacity-15\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1559136555-9303baea8ebd?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              className=\"inline-block bg-gray-800/50 text-gray-300 rounded-full px-6 py-2 mb-6 font-semibold text-sm border border-gray-600/30\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n            >\n              <i className=\"fas fa-magic mr-2\"></i>\n              CUSTOM AI SOLUTIONS\n            </motion.div>\n            <h2 className=\"text-5xl md:text-6xl font-neiko font-black text-white mb-6 leading-tight\">\n              CREATE YOUR PERFECT\n              <br />\n              <span className=\"text-gradient\">AI ASSISTANT</span>\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto leading-relaxed\">\n              Our expert team will design and build a custom AI agent tailored specifically to your unique business requirements. \n              From concept to deployment in just 48 hours.\n            </p>\n          </motion.div>\n          \n          <motion.div \n            className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-200\"\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            {/* Progress Indicator */}\n            <div className=\"flex items-center justify-center mb-8\">\n              <div className=\"flex items-center space-x-4\">\n                {[1, 2, 3].map((step) => (\n                  <div key={step} className=\"flex items-center\">\n                    <motion.div \n                      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\n                        step <= currentStep ? \"bg-primary text-white\" : \"bg-gray-300 text-gray-600\"\n                      }`}\n                      animate={step <= currentStep ? { scale: [1, 1.1, 1] } : {}}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {step}\n                    </motion.div>\n                    {step < 3 && (\n                      <div className={`w-16 h-1 rounded ml-4 ${\n                        step < currentStep ? \"bg-primary\" : \"bg-gray-300\"\n                      }`} />\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Step 1: Description or Template Selection */}\n                {currentStep === 1 && (\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm font-semibold text-dark\">\n                            What type of tasks do you need automated?\n                          </FormLabel>\n                          <FormControl>\n                            <Textarea\n                              rows={4}\n                              placeholder=\"Describe the specific tasks, workflows, or processes you'd like to automate...\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Trending Templates */}\n                    <div>\n                      <label className=\"block text-sm font-semibold text-dark mb-4\">\n                        Or choose from trending templates:\n                      </label>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        {TRENDING_TEMPLATES.map((template) => (\n                          <motion.div\n                            key={template.name}\n                            className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\n                              selectedTemplate === template.name\n                                ? \"border-primary bg-blue-50\"\n                                : \"border-gray-200 hover:border-primary\"\n                            }`}\n                            onClick={() => selectTemplate(template.name, template.description)}\n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                          >\n                            <div className=\"w-8 h-8 bg-blue-100 rounded-lg mb-3 flex items-center justify-center\">\n                              <i className={`${template.icon} text-blue-600`}></i>\n                            </div>\n                            <h4 className=\"font-semibold text-dark mb-1\">{template.name}</h4>\n                            <p className=\"text-xs text-secondary\">{template.description}</p>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Step 2: Industry and Budget */}\n                {currentStep === 2 && (\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"industry\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-semibold text-dark\">Industry</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select your industry\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {INDUSTRIES.map((industry) => (\n                                  <SelectItem key={industry} value={industry.toLowerCase()}>\n                                    {industry}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"budgetRange\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-semibold text-dark\">Budget Range</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select budget range\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {BUDGET_RANGES.map((range) => (\n                                  <SelectItem key={range} value={range.toLowerCase()}>\n                                    {range}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Step 3: Pooling and Final Options */}\n                {currentStep === 3 && (\n                  <motion.div\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <FormField\n                      control={form.control}\n                      name=\"allowPooling\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <div className=\"bg-blue-50 rounded-lg p-4 border border-blue-200\">\n                            <div className=\"flex items-start space-x-3\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div>\n                                <FormLabel className=\"font-semibold text-dark\">Join Request Pool</FormLabel>\n                                <p className=\"text-sm text-secondary mt-1\">\n                                  Allow others with similar requests to join and share development costs. \n                                  This can reduce your cost by up to 70%.\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </motion.div>\n                )}\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={prevStep}\n                    disabled={currentStep === 1}\n                    className=\"px-6 py-3\"\n                  >\n                    {currentStep === 1 ? \"Save Draft\" : \"Previous\"}\n                  </Button>\n                  \n                  {currentStep < 3 ? (\n                    <Button\n                      type=\"button\"\n                      onClick={nextStep}\n                      disabled={currentStep === 1 && !form.getValues(\"description\")}\n                      className=\"px-8 py-3 bg-primary hover:bg-primary-dark text-white\"\n                    >\n                      Next\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={createRequestMutation.isPending}\n                      className=\"px-8 py-3 bg-primary hover:bg-primary-dark text-white\"\n                    >\n                      {createRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </motion.div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15133},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Activity, Chrome, Clock, CheckCircle, AlertCircle, Zap, Play, Pause,\n  MessageCircle, Send, Settings, Users, History, Bell, TrendingUp,\n  Mail, Calendar, DollarSign, Shield, Eye, CheckSquare, X, ChevronRight,\n  Mic, MicOff, Volume2, VolumeX\n} from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  agentId: string;\n  agentName: string;\n  content: string;\n  timestamp: Date;\n  type: 'message' | 'action' | 'approval';\n  needsApproval?: boolean;\n  approved?: boolean;\n}\n\ninterface ActivityItem {\n  id: string;\n  agentName: string;\n  action: string;\n  timestamp: Date;\n  type: 'success' | 'info' | 'warning' | 'approval';\n  needsApproval?: boolean;\n}\n\nexport default function Dashboard() {\n  const [activeView, setActiveView] = useState('overview');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isVoiceChatEnabled, setIsVoiceChatEnabled] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [selectedAgent, setSelectedAgent] = useState<string>('business-growth');\n  const [activities, setActivities] = useState<ActivityItem[]>([]);\n  const [pendingApprovals, setPendingApprovals] = useState(0);\n  const [connectedAgents] = useState([\n    { id: 'business-growth', name: 'Business Growth', status: 'active', tasksToday: 8 },\n    { id: 'operations', name: 'Operations', status: 'active', tasksToday: 12 },\n    { id: 'customer-support', name: 'Customer Support', status: 'active', tasksToday: 15 }\n  ]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [wsConnected, setWsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const speechRecognitionRef = useRef<any>(null);\n  const speechSynthesisRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  const { data: extensionStatus } = useQuery({\n    queryKey: [\"/api/extension/status\", \"demo-user\"],\n    refetchInterval: 5000,\n    select: (data: any) => ({\n      paired: data.hasPairedExtension,\n      online: data.extensions?.[0]?.isOnline || false\n    })\n  });\n\n  // Real-time agent chat mutation\n  const chatMutation = useMutation({\n    mutationFn: async ({ agentType, message }: { agentType: string, message: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/agents/chat\", {\n        agentType,\n        message,\n        conversationId: Date.now().toString(),\n        userId: \"demo-user\"\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Add agent response to messages\n      const agentMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        agentId: data.agentType,\n        agentName: `${data.agentType.replace('-', ' ')} Agent`,\n        content: data.response,\n        timestamp: new Date(),\n        type: data.needsApproval ? 'approval' : 'message',\n        needsApproval: data.needsApproval\n      };\n      setMessages(prev => [...prev, agentMessage]);\n      \n      if (data.needsApproval) {\n        setPendingApprovals(prev => prev + 1);\n      }\n\n      // Text-to-speech for agent response\n      if (isVoiceChatEnabled && !data.needsApproval) {\n        speakText(data.response);\n      }\n    }\n  });\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    if (!extensionStatus?.paired) return;\n\n    const connectWebSocket = () => {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/extension-ws`;\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('Dashboard WebSocket connected');\n        setWsConnected(true);\n        \n        // Send authentication\n        ws.send(JSON.stringify({\n          type: 'dashboard_connect',\n          userId: 'demo-user'\n        }));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('Dashboard WebSocket disconnected');\n        setWsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        setTimeout(() => {\n          if (extensionStatus?.paired) {\n            connectWebSocket();\n          }\n        }, 3000);\n      };\n\n      ws.onerror = (error) => {\n        console.error('Dashboard WebSocket error:', error);\n        setWsConnected(false);\n      };\n    };\n\n    connectWebSocket();\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [extensionStatus?.paired]);\n\n  const handleWebSocketMessage = (data: any) => {\n    switch (data.type) {\n      case 'agent_message':\n        // Add new agent message to chat\n        const newMessage: Message = {\n          id: Date.now().toString(),\n          agentId: data.agentId || 'unknown',\n          agentName: data.agentName || 'Agent',\n          content: data.message,\n          timestamp: new Date(),\n          type: data.needsApproval ? 'approval' : 'message',\n          needsApproval: data.needsApproval\n        };\n        setMessages(prev => [...prev, newMessage]);\n        \n        if (data.needsApproval) {\n          setPendingApprovals(prev => prev + 1);\n        }\n        break;\n        \n      case 'agent_activity':\n        // Add new activity to feed\n        const newActivity: ActivityItem = {\n          id: Date.now().toString(),\n          agentName: data.agentName || 'Agent',\n          action: data.action,\n          timestamp: new Date(),\n          type: data.needsApproval ? 'approval' : 'success',\n          needsApproval: data.needsApproval\n        };\n        setActivities(prev => [newActivity, ...prev.slice(0, 9)]);\n        break;\n        \n      case 'task_completed':\n        // Show task completion in activity feed\n        const taskActivity: ActivityItem = {\n          id: Date.now().toString(),\n          agentName: data.agentName || 'Agent',\n          action: `Completed: ${data.taskDescription}`,\n          timestamp: new Date(),\n          type: 'success'\n        };\n        setActivities(prev => [taskActivity, ...prev.slice(0, 9)]);\n        break;\n        \n      default:\n        console.log('Unknown WebSocket message type:', data.type);\n    }\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        speechRecognitionRef.current = new SpeechRecognition();\n        speechRecognitionRef.current.continuous = false;\n        speechRecognitionRef.current.interimResults = false;\n        speechRecognitionRef.current.lang = 'en-US';\n\n        speechRecognitionRef.current.onresult = (event: any) => {\n          const transcript = event.results[0][0].transcript;\n          setNewMessage(transcript);\n          setIsListening(false);\n        };\n\n        speechRecognitionRef.current.onend = () => {\n          setIsListening(false);\n        };\n      }\n    }\n  }, []);\n\n  // Text-to-speech function\n  const speakText = (text: string) => {\n    if ('speechSynthesis' in window) {\n      setIsSpeaking(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      utterance.volume = 0.8;\n      utterance.onend = () => setIsSpeaking(false);\n      speechSynthesisRef.current = utterance;\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  // Start voice recording\n  const startListening = () => {\n    if (speechRecognitionRef.current && !isListening) {\n      setIsListening(true);\n      speechRecognitionRef.current.start();\n    }\n  };\n\n  // Stop speaking\n  const stopSpeaking = () => {\n    if ('speechSynthesis' in window) {\n      speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  // Send message function\n  const sendMessage = async () => {\n    if (!newMessage.trim() || chatMutation.isPending) return;\n\n    // Add user message to chat\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      agentId: 'user',\n      agentName: 'You',\n      content: newMessage,\n      timestamp: new Date(),\n      type: 'message'\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    const messageToSend = newMessage;\n    setNewMessage('');\n\n    // Send to selected agent\n    try {\n      await chatMutation.mutateAsync({\n        agentType: selectedAgent,\n        message: messageToSend\n      });\n    } catch (error) {\n      console.error('Chat error:', error);\n      // Add error message\n      const errorMessage: Message = {\n        id: (Date.now() + 2).toString(),\n        agentId: 'system',\n        agentName: 'System',\n        content: 'Failed to send message to agent. Please try again.',\n        timestamp: new Date(),\n        type: 'message'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  };\n\n  // Handle message approval and execute real tasks\n  const handleApproval = async (messageId: string, approved: boolean) => {\n    const message = messages.find(msg => msg.id === messageId);\n    if (!message) return;\n\n    try {\n      await apiRequest(\"POST\", \"/api/agents/approve\", {\n        taskId: messageId,\n        approved,\n        userId: \"demo-user\"\n      });\n\n      // Update message approval status\n      setMessages(prev => prev.map(msg => \n        msg.id === messageId ? { ...msg, approved, type: 'message', needsApproval: false } : msg\n      ));\n      \n      if (approved) {\n        setPendingApprovals(prev => Math.max(0, prev - 1));\n        \n        // Execute the actual task through browser extension\n        const taskAction = message.content;\n        await executeTask(message.agentId, taskAction, messageId);\n        \n        // Add confirmation message\n        const confirmMessage: Message = {\n          id: (Date.now() + 3).toString(),\n          agentId: 'system',\n          agentName: 'System',\n          content: `‚úÖ Task approved! Executing on your device now...`,\n          timestamp: new Date(),\n          type: 'message'\n        };\n        setMessages(prev => [...prev, confirmMessage]);\n      } else {\n        setPendingApprovals(prev => Math.max(0, prev - 1));\n        \n        // Add rejection message\n        const rejectMessage: Message = {\n          id: (Date.now() + 4).toString(),\n          agentId: 'system',\n          agentName: 'System',\n          content: `‚ùå Task rejected. Agent will not proceed with this action.`,\n          timestamp: new Date(),\n          type: 'message'\n        };\n        setMessages(prev => [...prev, rejectMessage]);\n      }\n    } catch (error) {\n      console.error('Approval error:', error);\n    }\n  };\n\n  // Real-time agent task execution\n  const executeTask = async (agentType: string, action: string, taskId: string) => {\n    if (!wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket not connected');\n      return;\n    }\n\n    try {\n      // Send command to browser extension for execution\n      const command = {\n        type: 'execute_task',\n        agentType,\n        action,\n        taskId,\n        timestamp: new Date().toISOString()\n      };\n\n      wsRef.current.send(JSON.stringify(command));\n      \n      // Add activity log\n      const activity: ActivityItem = {\n        id: Date.now().toString(),\n        agentName: `${agentType.replace('-', ' ')} Agent`,\n        action: `Executing: ${action}`,\n        timestamp: new Date(),\n        type: 'info'\n      };\n      setActivities(prev => [activity, ...prev.slice(0, 9)]);\n      \n    } catch (error) {\n      console.error('Task execution error:', error);\n    }\n  };\n\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${Math.floor(diffHours / 24)}d ago`;\n  };\n\n  const generateTaskMutation = useMutation({\n    mutationFn: async (agentId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/agents/hire\", {\n        agentType: \"business-growth\",\n        subAgent: \"Business Growth\", \n        task: \"Continue working on assigned tasks\",\n        context: \"Dashboard task execution\",\n        userId: \"demo-user\"\n      });\n      return await response.json();\n    }\n  });\n\n  const sidebarItems = [\n    { id: 'overview', label: 'Overview', icon: Activity },\n    { id: 'agents', label: 'My Agents', icon: Users },\n    { id: 'approvals', label: 'Approvals', icon: CheckSquare, badge: pendingApprovals },\n    { id: 'history', label: 'Task History', icon: History },\n    { id: 'reports', label: 'Reports', icon: TrendingUp },\n    { id: 'settings', label: 'Settings', icon: Settings }\n  ];\n\n  const renderMainContent = () => {\n    switch (activeView) {\n      case 'overview':\n        return renderOverview();\n      case 'agents':\n        return renderAgents();\n      case 'approvals':\n        return renderApprovals();\n      case 'history':\n        return renderHistory();\n      case 'reports':\n        return renderReports();\n      case 'settings':\n        return renderSettings();\n      default:\n        return renderOverview();\n    }\n  };\n\n  const renderOverview = () => (\n\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Live Activity Feed */}\n      <div className=\"space-y-6\">\n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <Activity className=\"w-5 h-5\" />\n              Live Agent Feed\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-80\">\n              <div className=\"space-y-3\">\n                {activities.map((activity) => (\n                  <div key={activity.id} className=\"flex items-start gap-3 p-3 bg-gray-800/50 rounded-lg\">\n                    <div className={`w-2 h-2 rounded-full mt-2 ${\n                      activity.type === 'success' ? 'bg-green-500' :\n                      activity.type === 'approval' ? 'bg-yellow-500' :\n                      activity.type === 'warning' ? 'bg-red-500' : 'bg-blue-500'\n                    }`} />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <p className=\"text-white text-sm font-medium\">{activity.agentName}</p>\n                          <p className=\"text-gray-300 text-sm\">{activity.action}</p>\n                          <p className=\"text-gray-400 text-xs mt-1\">{formatTimeAgo(activity.timestamp)}</p>\n                        </div>\n                        {activity.needsApproval && (\n                          <div className=\"flex gap-1\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"h-6 px-2 text-xs bg-green-600 border-green-600 hover:bg-green-700\">\n                              ‚úì\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"h-6 px-2 text-xs bg-red-600 border-red-600 hover:bg-red-700\">\n                              ‚úó\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Agent Status Cards */}\n        <div className=\"grid grid-cols-1 gap-4\">\n          {connectedAgents.map((agent) => (\n            <Card key={agent.id} className=\"bg-gray-900 border-gray-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-blue-600 text-white text-xs\">\n                        {agent.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"text-white font-medium text-sm\">{agent.name}</p>\n                      <p className=\"text-gray-400 text-xs\">{agent.tasksToday} tasks today</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                    <span className=\"text-green-400 text-xs font-medium\">Active</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat Interface */}\n      <Card className=\"bg-gray-900 border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Agent Communication\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-80 p-4\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div key={message.id} className={`flex ${message.agentId === 'user' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`max-w-[80%] ${\n                    message.agentId === 'user' \n                      ? 'bg-blue-600 text-white' \n                      : message.type === 'approval'\n                        ? 'bg-yellow-600/20 border border-yellow-600/50 text-yellow-100'\n                        : 'bg-gray-800 text-gray-200'\n                  } rounded-lg p-3`}>\n                    {message.agentId !== 'user' && (\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <Avatar className=\"w-5 h-5\">\n                          <AvatarFallback className=\"bg-green-600 text-white text-xs\">\n                            {message.agentName.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span className=\"text-xs font-medium\">{message.agentName}</span>\n                      </div>\n                    )}\n                    <p className=\"text-sm\">{message.content}</p>\n                    <p className=\"text-xs opacity-60 mt-1\">{formatTimeAgo(message.timestamp)}</p>\n                    \n                    {message.needsApproval && (\n                      <div className=\"flex gap-2 mt-3\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleApproval(message.id, true)}\n                          className=\"bg-green-600 hover:bg-green-700 text-white h-7 px-3 text-xs\"\n                        >\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleApproval(message.id, false)}\n                          variant=\"outline\"\n                          className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white h-7 px-3 text-xs\"\n                        >\n                          <X className=\"w-3 h-3 mr-1\" />\n                          Deny\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n          \n          <div className=\"p-4 border-t border-gray-700\">\n            {/* Agent Selection */}\n            <div className=\"flex items-center gap-2 mb-3\">\n              <span className=\"text-xs text-gray-400\">Chat with:</span>\n              <select \n                value={selectedAgent}\n                onChange={(e) => setSelectedAgent(e.target.value)}\n                className=\"bg-gray-800 border border-gray-600 rounded px-2 py-1 text-xs text-white\"\n              >\n                <option value=\"business-growth\">Business Growth Agent</option>\n                <option value=\"operations\">Operations Agent</option>\n                <option value=\"people-finance\">People & Finance Agent</option>\n              </select>\n              \n              {/* Voice Chat Toggle */}\n              <Button\n                size=\"sm\"\n                variant={isVoiceChatEnabled ? \"default\" : \"outline\"}\n                onClick={() => setIsVoiceChatEnabled(!isVoiceChatEnabled)}\n                className=\"text-xs px-2 py-1 h-7\"\n              >\n                {isVoiceChatEnabled ? <Volume2 className=\"w-3 h-3\" /> : <VolumeX className=\"w-3 h-3\" />}\n              </Button>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Input\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                placeholder=\"Chat with your agents...\"\n                className=\"bg-gray-800 border-gray-600 text-white\"\n                disabled={chatMutation.isPending}\n              />\n              \n              {/* Voice Input Button */}\n              {isVoiceChatEnabled && (\n                <Button\n                  size=\"sm\"\n                  variant={isListening ? \"destructive\" : \"outline\"}\n                  onClick={isListening ? () => setIsListening(false) : startListening}\n                  className=\"px-2\"\n                  disabled={chatMutation.isPending}\n                >\n                  {isListening ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                </Button>\n              )}\n              \n              {/* Stop Speaking Button */}\n              {isSpeaking && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={stopSpeaking}\n                  className=\"px-2 text-yellow-400 border-yellow-400\"\n                >\n                  <VolumeX className=\"w-4 h-4\" />\n                </Button>\n              )}\n              \n              <Button \n                onClick={sendMessage} \n                size=\"sm\" \n                className=\"bg-blue-600 hover:bg-blue-700\"\n                disabled={chatMutation.isPending || !newMessage.trim()}\n              >\n                {chatMutation.isPending ? (\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                ) : (\n                  <Send className=\"w-4 h-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderAgents = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\">My Agents</h2>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\">\n          <Users className=\"w-4 h-4 mr-2\" />\n          Hire New Agent\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {connectedAgents.map((agent) => (\n          <Card key={agent.id} className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"w-10 h-10\">\n                    <AvatarFallback className=\"bg-blue-600 text-white\">\n                      {agent.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <CardTitle className=\"text-white text-lg\">{agent.name}</CardTitle>\n                    <p className=\"text-gray-400 text-sm\">Active since today</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-green-600\">\n                  <div className=\"w-2 h-2 rounded-full bg-white mr-1\" />\n                  {agent.status}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Tasks Today</p>\n                  <p className=\"text-white text-xl font-bold\">{agent.tasksToday}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Success Rate</p>\n                  <p className=\"text-white text-xl font-bold\">94%</p>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button size=\"sm\" variant=\"outline\" className=\"flex-1 border-gray-600\">\n                  <Settings className=\"w-3 h-3 mr-1\" />\n                  Configure\n                </Button>\n                <Button size=\"sm\" variant=\"outline\" className=\"flex-1 border-gray-600\">\n                  <MessageCircle className=\"w-3 h-3 mr-1\" />\n                  Chat\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderApprovals = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-white\">Pending Approvals</h2>\n        <Badge className=\"bg-yellow-600 text-white px-3 py-1\">\n          {pendingApprovals} pending\n        </Badge>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {[\n          {\n            id: '1',\n            agent: 'Marketing Agent',\n            action: 'Facebook Ad Campaign',\n            description: 'Create and launch a $100 Facebook ad campaign targeting business owners in tech industry',\n            impact: 'Medium',\n            cost: '$100',\n            timeRequested: new Date(Date.now() - 5 * 60 * 1000)\n          },\n          {\n            id: '2',\n            agent: 'Business Growth Agent',\n            action: 'Email Outreach',\n            description: 'Send introductory emails to 23 qualified leads from LinkedIn research',\n            impact: 'Low',\n            cost: 'Free',\n            timeRequested: new Date(Date.now() - 12 * 60 * 1000)\n          }\n        ].map((approval) => (\n          <Card key={approval.id} className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-blue-600 text-white text-xs\">\n                        {approval.agent.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"text-white font-semibold\">{approval.action}</h3>\n                      <p className=\"text-gray-400 text-sm\">{approval.agent} ‚Ä¢ {formatTimeAgo(approval.timeRequested)}</p>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-gray-300 mb-4\">{approval.description}</p>\n                  \n                  <div className=\"flex items-center gap-6\">\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-300 text-sm\">{approval.cost}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-4 h-4 text-gray-400\" />\n                      <span className={`text-sm ${\n                        approval.impact === 'High' ? 'text-red-400' :\n                        approval.impact === 'Medium' ? 'text-yellow-400' : 'text-green-400'\n                      }`}>\n                        {approval.impact} Impact\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2 ml-4\">\n                  <Button\n                    onClick={() => setPendingApprovals(prev => Math.max(0, prev - 1))}\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Approve\n                  </Button>\n                  <Button\n                    onClick={() => setPendingApprovals(prev => Math.max(0, prev - 1))}\n                    variant=\"outline\"\n                    className=\"border-red-600 text-red-400 hover:bg-red-600 hover:text-white\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Deny\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderHistory = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-white\">Task History</h2>\n      \n      <div className=\"space-y-4\">\n        {[\n          {\n            id: '1',\n            agent: 'Customer Support',\n            task: 'Responded to customer ticket #CS-442',\n            result: 'Customer satisfied, issue resolved',\n            timestamp: new Date(Date.now() - 30 * 60 * 1000),\n            status: 'success'\n          },\n          {\n            id: '2',\n            agent: 'Operations',\n            task: 'Updated CRM with 15 new contacts',\n            result: 'All contacts verified and categorized',\n            timestamp: new Date(Date.now() - 45 * 60 * 1000),\n            status: 'success'\n          },\n          {\n            id: '3',\n            agent: 'Marketing',\n            task: 'Social media post scheduled',\n            result: 'LinkedIn post scheduled for 9 AM tomorrow',\n            timestamp: new Date(Date.now() - 60 * 60 * 1000),\n            status: 'success'\n          },\n          {\n            id: '4',\n            agent: 'Business Growth',\n            task: 'Lead qualification failed',\n            result: 'Contact not responsive after 3 attempts',\n            timestamp: new Date(Date.now() - 90 * 60 * 1000),\n            status: 'warning'\n          }\n        ].map((task) => (\n          <Card key={task.id} className=\"bg-gray-900 border-gray-700\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start gap-4\">\n                <div className={`w-3 h-3 rounded-full mt-2 ${\n                  task.status === 'success' ? 'bg-green-500' :\n                  task.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                }`} />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"text-white font-medium\">{task.task}</h3>\n                    <span className=\"text-gray-400 text-sm\">{formatTimeAgo(task.timestamp)}</span>\n                  </div>\n                  <p className=\"text-gray-400 text-sm mb-1\">{task.agent} Agent</p>\n                  <p className=\"text-gray-300 text-sm\">{task.result}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderReports = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-white\">Agent Performance Reports</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {connectedAgents.map((agent) => (\n          <Card key={agent.id} className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarFallback className=\"bg-blue-600 text-white text-xs\">\n                    {agent.name.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n                {agent.name} Weekly Report\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Tasks Completed</p>\n                  <p className=\"text-white text-2xl font-bold\">{agent.tasksToday * 7}</p>\n                  <p className=\"text-green-400 text-xs\">+12% vs last week</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Success Rate</p>\n                  <p className=\"text-white text-2xl font-bold\">94%</p>\n                  <p className=\"text-green-400 text-xs\">+2% vs last week</p>\n                </div>\n              </div>\n              \n              <Separator className=\"bg-gray-700\" />\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400 text-sm\">Monday</span>\n                  <span className=\"text-white text-sm\">{Math.floor(agent.tasksToday * 0.8)} tasks</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400 text-sm\">Tuesday</span>\n                  <span className=\"text-white text-sm\">{Math.floor(agent.tasksToday * 1.2)} tasks</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400 text-sm\">Today</span>\n                  <span className=\"text-blue-400 text-sm\">{agent.tasksToday} tasks</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderSettings = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-white\">Settings</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <Shield className=\"w-5 h-5\" />\n              Security & Permissions\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white font-medium\">Auto-approve low-risk tasks</p>\n                <p className=\"text-gray-400 text-sm\">Tasks under $10 automatically approved</p>\n              </div>\n              <input type=\"checkbox\" className=\"toggle\" defaultChecked />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white font-medium\">Require approval for emails</p>\n                <p className=\"text-gray-400 text-sm\">Review all outgoing communications</p>\n              </div>\n              <input type=\"checkbox\" className=\"toggle\" defaultChecked />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              Notifications\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white font-medium\">Real-time activity alerts</p>\n                <p className=\"text-gray-400 text-sm\">Get notified of agent actions</p>\n              </div>\n              <input type=\"checkbox\" className=\"toggle\" defaultChecked />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white font-medium\">Daily summary email</p>\n                <p className=\"text-gray-400 text-sm\">Receive daily performance reports</p>\n              </div>\n              <input type=\"checkbox\" className=\"toggle\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-black flex flex-col\">\n      <Header />\n      \n      {/* Top metrics bar */}\n      <div className=\"bg-gray-900 border-b border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-600/20 rounded-lg\">\n                <Users className=\"w-5 h-5 text-blue-400\" />\n              </div>\n              <div>\n                <p className=\"text-white font-semibold\">{connectedAgents.length}</p>\n                <p className=\"text-gray-400 text-sm\">Active Agents</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-yellow-600/20 rounded-lg\">\n                <Bell className=\"w-5 h-5 text-yellow-400\" />\n              </div>\n              <div>\n                <p className=\"text-white font-semibold\">{pendingApprovals}</p>\n                <p className=\"text-gray-400 text-sm\">Pending Approvals</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-600/20 rounded-lg\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n              </div>\n              <div>\n                <p className=\"text-white font-semibold\">{connectedAgents.reduce((sum, agent) => sum + agent.tasksToday, 0)}</p>\n                <p className=\"text-gray-400 text-sm\">Tasks Today</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-lg ${\n                extensionStatus?.paired && extensionStatus?.online && wsConnected\n                  ? 'bg-green-600/20'\n                  : 'bg-red-600/20'\n              }`}>\n                <Chrome className={`w-5 h-5 ${\n                  extensionStatus?.paired && extensionStatus?.online && wsConnected\n                    ? 'text-green-400'\n                    : 'text-red-400'\n                }`} />\n              </div>\n              <div>\n                <p className={`font-semibold ${\n                  extensionStatus?.paired && extensionStatus?.online && wsConnected\n                    ? 'text-green-400'\n                    : 'text-red-400'\n                }`}>\n                  {extensionStatus?.paired && extensionStatus?.online && wsConnected ? 'Live' : 'Offline'}\n                </p>\n                <p className=\"text-gray-400 text-sm\">\n                  {wsConnected ? 'Real-time Connected' : 'Extension'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main dashboard */}\n      <div className=\"flex-1 flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-gray-900 border-r border-gray-700 p-4\">\n          <div className=\"space-y-2\">\n            {sidebarItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <button\n                  key={item.id}\n                  onClick={() => setActiveView(item.id)}\n                  className={`w-full flex items-center justify-between p-3 rounded-lg text-left transition-colors ${\n                    activeView === item.id\n                      ? 'bg-blue-600 text-white'\n                      : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                  }`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{item.label}</span>\n                  </div>\n                  {item.badge && item.badge > 0 && (\n                    <Badge className=\"bg-red-600 text-white px-2 py-1 text-xs\">\n                      {item.badge}\n                    </Badge>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            key={activeView}\n          >\n            {renderMainContent()}\n          </motion.div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":41853},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport AgentCard from \"@/components/agent-card\";\nimport AgentRecommender from \"@/components/agent-recommender\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport BackgroundEffects from \"@/components/background-effects\";\nimport CursorEffects from \"@/components/cursor-effects\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport type { Agent } from \"@shared/schema\";\nimport { COMPANY_LOGOS } from \"@/lib/constants\";\n\nexport default function Home() {\n  const { data: featuredAgents, isLoading } = useQuery<Agent[]>({\n    queryKey: [\"/api/agents/featured\"]\n  });\n\n  const scrollToAgents = () => {\n    const agentsSection = document.getElementById(\"agents\");\n    agentsSection?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <BackgroundEffects />\n      <CursorEffects />\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-black pt-16 pb-32\">\n        <div className=\"absolute inset-0 bg-gradient-mesh floating-shapes\"></div>\n        <div className=\"absolute inset-0 opacity-30\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center min-h-[70vh]\">\n            <motion.div \n              className=\"text-left\"\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1 }}\n            >\n              <motion.div\n                className=\"inline-block bg-gray-800/40 backdrop-blur-md rounded-full px-6 py-2 mb-6 border border-gray-600/30\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.1 }}\n              >\n                <span className=\"text-gray-300 font-medium text-sm\">‚ö° Trusted by 10,000+ businesses worldwide</span>\n              </motion.div>\n              \n              <motion.h1 \n                className=\"text-5xl md:text-7xl font-neiko font-black text-white mb-6 leading-tight\"\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.2 }}\n              >\n                HIRE SMART\n                <br />\n                <span className=\"text-gradient bg-gradient-to-r from-gray-300 to-gray-500 bg-clip-text text-transparent\">\n                  AI AGENTS\n                </span>\n                <br />\n                THAT WORK 24/7\n              </motion.h1>\n              \n              <motion.p \n                className=\"text-xl text-gray-300 mb-10 leading-relaxed max-w-lg font-medium\"\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.4 }}\n              >\n                Transform your business with intelligent agents that automate marketing, analytics, support, and more. \n                <span className=\"font-bold text-gray-100\">Save 40+ hours per week</span> on repetitive tasks.\n              </motion.p>\n              \n              <motion.div \n                className=\"flex flex-col sm:flex-row gap-4\"\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.6 }}\n              >\n                <Button \n                  onClick={scrollToAgents}\n                  className=\"bg-gray-900 text-white hover:bg-gray-800 px-8 py-4 rounded-lg font-neiko font-bold text-lg transition-all transform hover:scale-105 shadow-xl border border-gray-700\"\n                >\n                  <i className=\"fas fa-rocket mr-2\"></i>\n                  BROWSE AGENTS\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-2 border-gray-600 text-gray-300 hover:bg-gray-800/50 backdrop-blur-md px-8 py-4 rounded-lg font-neiko font-bold text-lg transition-all\"\n                >\n                  <i className=\"fas fa-play mr-2\"></i>\n                  WATCH DEMO\n                </Button>\n              </motion.div>\n\n              <motion.div \n                className=\"flex items-center mt-8 space-x-6\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.8 }}\n              >\n                <div className=\"flex -space-x-2\">\n                  {[1, 2, 3, 4].map((i) => (\n                    <img \n                      key={i}\n                      src={`https://images.unsplash.com/photo-${1500000000000 + i * 100000000}?ixlib=rb-4.0.3&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80`}\n                      className=\"w-10 h-10 rounded-full border-2 border-white shadow-lg\"\n                      alt=\"User\"\n                    />\n                  ))}\n                </div>\n                <div className=\"text-gray-300\">\n                  <p className=\"font-semibold\">10,000+ happy customers</p>\n                  <div className=\"flex items-center\">\n                    <div className=\"flex text-gray-400 mr-2\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <i key={star} className=\"fas fa-star text-sm\"></i>\n                      ))}\n                    </div>\n                    <span className=\"text-sm text-gray-400\">4.9/5 rating</span>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n\n            <motion.div \n              className=\"relative\"\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 1, delay: 0.3 }}\n            >\n              <div className=\"relative\">\n                <motion.img \n                  src=\"https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                  alt=\"AI Dashboard\"\n                  className=\"rounded-3xl shadow-2xl border-4 border-gray-600/50 backdrop-blur-sm\"\n                  animate={{ y: [-10, 10, -10] }}\n                  transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\" }}\n                />\n                \n                {/* Floating Cards */}\n                <motion.div \n                  className=\"absolute -top-6 -left-6 bg-white/95 backdrop-blur-md rounded-2xl p-4 shadow-2xl border border-gray-200\"\n                  animate={{ y: [-5, 5, -5] }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\", delay: 0.5 }}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-chart-line text-white text-sm\"></i>\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-sm text-gray-800\">Revenue Up</p>\n                      <p className=\"text-green-600 font-bold\">+234%</p>\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div \n                  className=\"absolute -bottom-6 -right-6 bg-white/95 backdrop-blur-md rounded-2xl p-4 shadow-2xl border border-gray-200\"\n                  animate={{ y: [5, -5, 5] }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\", delay: 1 }}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-robot text-white text-sm\"></i>\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-sm text-gray-800\">AI Agents</p>\n                      <p className=\"text-blue-600 font-bold\">24/7 Active</p>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        {/* Trusted By Section - Moving Logos */}\n        <motion.div \n          className=\"mt-20 text-center bg-gray-900/60 backdrop-blur-md rounded-3xl p-8 border border-gray-700/50 max-w-6xl mx-auto overflow-hidden\"\n          initial={{ opacity: 0, y: 30 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.8 }}\n        >\n          <p className=\"text-gray-300 mb-8 text-sm uppercase tracking-wider font-semibold font-neiko\">TRUSTED BY INDUSTRY LEADERS</p>\n          <div className=\"relative\">\n            <div className=\"flex space-x-12 moving-logos\">\n              {[...COMPANY_LOGOS, ...COMPANY_LOGOS].map((company, index) => (\n                <div\n                  key={`${company.name}-${index}`}\n                  className=\"flex flex-col items-center space-y-2 group flex-shrink-0\"\n                >\n                  <div className=\"w-16 h-16 bg-gray-800/50 rounded-2xl flex items-center justify-center group-hover:bg-gray-700/50 transition-all border border-gray-600/30\">\n                    <i className={`${company.icon} text-3xl text-gray-300`}></i>\n                  </div>\n                  <span className=\"font-semibold text-gray-400 text-sm font-neiko\">{company.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </motion.div>\n      </section>\n\n      {/* Main Agents Section */}\n      <section id=\"agents\" className=\"py-32 bg-gray-900 relative\">\n        <div className=\"absolute inset-0 opacity-10\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <motion.div\n              className=\"inline-block bg-gray-800/50 text-gray-300 rounded-full px-6 py-2 mb-6 font-semibold text-sm border border-gray-600/30\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n              viewport={{ once: true }}\n            >\n              <i className=\"fas fa-star mr-2\"></i>\n              MOST POPULAR AGENTS\n            </motion.div>\n            <h2 className=\"text-5xl md:text-6xl font-neiko font-black text-white mb-6 leading-tight\">\n              MEET YOUR NEW\n              <br />\n              <span className=\"text-gradient\">AI WORKFORCE</span>\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto leading-relaxed\">\n              Our elite AI agents work around the clock to transform your business operations. \n              Each bundle contains specialized sub-agents that collaborate seamlessly.\n            </p>\n          </motion.div>\n\n          {isLoading ? (\n            <div className=\"flex justify-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-600\"></div>\n            </div>\n          ) : (\n            <motion.div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              viewport={{ once: true }}\n            >\n              {featuredAgents?.map((agent, index) => (\n                <motion.div\n                  key={agent.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <AgentCard agent={agent} />\n                </motion.div>\n              ))}\n            </motion.div>\n          )}\n\n          {/* CTA for Custom Agent */}\n          <motion.div \n            className=\"text-center\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <div className=\"relative bg-gradient-to-r from-gray-800 to-gray-700 rounded-3xl p-12 overflow-hidden border border-gray-600\">\n              <div className=\"absolute inset-0 opacity-30\" style={{\n                backgroundImage: \"url('https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\"\n              }}></div>\n              <div className=\"relative\">\n                <motion.div\n                  className=\"inline-block bg-gray-700/40 rounded-full px-6 py-2 mb-6 border border-gray-600/30\"\n                  animate={{ scale: [1, 1.05, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <span className=\"text-gray-300 font-bold text-sm font-neiko\">\n                    <i className=\"fas fa-magic mr-2\"></i>\n                    CUSTOM SOLUTIONS AVAILABLE\n                  </span>\n                </motion.div>\n                <h3 className=\"text-4xl font-neiko font-black text-white mb-4\">\n                  NEED SOMETHING UNIQUE?\n                </h3>\n                <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed\">\n                  Our AI experts will design and build a custom agent tailored specifically to your business needs. \n                  From concept to deployment in just 48 hours.\n                </p>\n                <Button \n                  asChild\n                  className=\"bg-gray-900 text-white hover:bg-gray-800 px-10 py-4 rounded-lg font-neiko font-bold text-lg shadow-xl transition-all transform hover:scale-105 border border-gray-700\"\n                >\n                  <Link href=\"/custom-agent\">\n                    <i className=\"fas fa-wand-magic-sparkles mr-2\"></i>\n                    BUILD CUSTOM AGENT\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Agent Recommender Section */}\n      <AgentRecommender />\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15096},"client/src/pages/marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport SubAgentCard from \"@/components/sub-agent-card\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport BackgroundEffects from \"@/components/background-effects\";\nimport CursorEffects from \"@/components/cursor-effects\";\nimport { Button } from \"@/components/ui/button\";\nimport type { SubAgent } from \"@shared/schema\";\nimport { CATEGORIES } from \"@/lib/constants\";\n\nexport default function Marketplace() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedAgents, setSelectedAgents] = useState<SubAgent[]>([]);\n\n  const { data: subAgents, isLoading } = useQuery<SubAgent[]>({\n    queryKey: selectedCategory === \"all\" ? [\"/api/sub-agents\"] : [\"/api/sub-agents\", { category: selectedCategory }]\n  });\n\n  const handleAddAgent = (agent: SubAgent) => {\n    setSelectedAgents(prev => {\n      if (prev.find(a => a.id === agent.id)) {\n        return prev.filter(a => a.id !== agent.id);\n      }\n      return [...prev, agent];\n    });\n  };\n\n  const isAgentSelected = (agentId: string) => {\n    return selectedAgents.some(a => a.id === agentId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <BackgroundEffects />\n      <CursorEffects />\n      <Header />\n      \n      {/* Marketplace Section */}\n      <section className=\"py-32 bg-black relative\">\n        <div className=\"absolute inset-0 opacity-10\" style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&h=1380')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\"\n        }}></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              className=\"inline-block bg-gray-800/50 text-gray-300 rounded-full px-6 py-2 mb-6 font-semibold text-sm border border-gray-600/30\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.1 }}\n            >\n              <i className=\"fas fa-store mr-2\"></i>\n              AI SPECIALIST MARKETPLACE\n            </motion.div>\n            <h2 className=\"text-5xl md:text-6xl font-neiko font-black text-white mb-6 leading-tight\">\n              BUILD YOUR DREAM\n              <br />\n              <span className=\"text-gradient\">AI TEAM</span>\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-3xl mx-auto mb-8 leading-relaxed\">\n              Mix and match specialized AI agents to create the perfect workforce for your business. \n              Each agent excels in specific tasks and integrates seamlessly with others.\n            </p>\n            \n            {/* Filters */}\n            <motion.div \n              className=\"flex flex-wrap justify-center gap-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              {CATEGORIES.map((category) => (\n                <Button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`px-6 py-3 rounded-lg font-medium transition-colors ${\n                    selectedCategory === category.id\n                      ? \"bg-primary text-white\"\n                      : \"bg-white text-secondary hover:bg-gray-100\"\n                  }`}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </motion.div>\n          </motion.div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n                <div key={i} className=\"bg-white rounded-xl shadow-md p-6 animate-pulse\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg mb-4\"></div>\n                  <div className=\"h-5 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-5 w-16 bg-gray-200 rounded\"></div>\n                    <div className=\"h-8 w-12 bg-gray-200 rounded\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <motion.div \n              className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n              layout\n            >\n              <AnimatePresence>\n                {subAgents?.map((subAgent, index) => (\n                  <motion.div\n                    key={subAgent.id}\n                    layout\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    transition={{ duration: 0.3, delay: index * 0.05 }}\n                  >\n                    <div className={`relative ${isAgentSelected(subAgent.id) ? 'ring-2 ring-primary' : ''}`}>\n                      <SubAgentCard \n                        subAgent={subAgent} \n                        onAdd={handleAddAgent}\n                        showAddButton={true}\n                      />\n                      {isAgentSelected(subAgent.id) && (\n                        <motion.div\n                          className=\"absolute -top-2 -right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ type: \"spring\", stiffness: 300 }}\n                        >\n                          <i className=\"fas fa-check text-white text-xs\"></i>\n                        </motion.div>\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </motion.div>\n          )}\n\n          {/* Selected Agents Summary */}\n          <AnimatePresence>\n            {selectedAgents.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, y: 50 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 50 }}\n                className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-white rounded-2xl shadow-2xl p-6 border border-gray-200 z-50 max-w-md w-full mx-4\"\n              >\n                <h4 className=\"font-bold text-dark mb-3\">Selected Agents ({selectedAgents.length})</h4>\n                <div className=\"space-y-2 mb-4 max-h-32 overflow-y-auto\">\n                  {selectedAgents.map((agent) => (\n                    <div key={agent.id} className=\"flex justify-between items-center text-sm\">\n                      <span>{agent.name}</span>\n                      <span className=\"font-medium\">${(agent.price / 100).toFixed(0)}/mo</span>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"border-t pt-3 flex justify-between items-center\">\n                  <span className=\"font-bold\">\n                    Total: ${selectedAgents.reduce((sum, agent) => sum + agent.price, 0) / 100}/mo\n                  </span>\n                  <Button className=\"bg-primary hover:bg-primary-dark text-white\">\n                    Create Bundle\n                  </Button>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Comparison View Toggle */}\n          <motion.div \n            className=\"text-center mt-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            <Button \n              disabled={selectedAgents.length < 2}\n              className=\"bg-white text-primary border-2 border-primary px-8 py-3 rounded-lg font-semibold hover:bg-primary hover:text-white transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <i className=\"fas fa-balance-scale mr-2\"></i>\n              Compare Selected Agents ({selectedAgents.length})\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8684},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-dark text-white py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-robot text-white text-sm\"></i>\n              </div>\n              <span className=\"text-xl font-bold\">Replivo</span>\n            </div>\n            <p className=\"text-gray-400 mb-4\">\n              Intelligent AI agents for every business need. Automate your workflows and scale your operations.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <i className=\"fab fa-linkedin\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                <i className=\"fab fa-github\"></i>\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Platform</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li><Link href=\"/\" className=\"hover:text-white transition-colors\">Browse Agents</Link></li>\n              <li><Link href=\"/marketplace\" className=\"hover:text-white transition-colors\">Marketplace</Link></li>\n              <li><Link href=\"/custom-agent\" className=\"hover:text-white transition-colors\">Custom Builder</Link></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Pricing</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Documentation</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact Us</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Status</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">About</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Blog</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Careers</a></li>\n              <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n          <p>&copy; 2024 Replivo. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3272},"client/src/components/layout/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Header() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"bg-black/95 backdrop-blur-md shadow-lg border-b border-gray-800 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-20\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gray-800 rounded-2xl flex items-center justify-center shadow-lg border border-gray-600\">\n              <i className=\"fas fa-robot text-gray-300 text-lg\"></i>\n            </div>\n            <span className=\"text-2xl font-neiko font-black text-white\">REPLIVO</span>\n          </Link>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" className={`${location === \"/\" ? \"text-white font-bold\" : \"text-gray-400 hover:text-white\"} transition-colors font-medium text-lg font-neiko`}>\n              AGENTS\n            </Link>\n            <Link href=\"/marketplace\" className={`${location === \"/marketplace\" ? \"text-white font-bold\" : \"text-gray-400 hover:text-white\"} transition-colors font-medium text-lg font-neiko`}>\n              MARKETPLACE\n            </Link>\n            <Link href=\"/custom-agent\" className={`${location === \"/custom-agent\" ? \"text-white font-bold\" : \"text-gray-400 hover:text-white\"} transition-colors font-medium text-lg font-neiko`}>\n              CUSTOM BUILDER\n            </Link>\n            <Button className=\"bg-gray-900 hover:bg-gray-800 text-white px-8 py-3 rounded-lg font-neiko font-bold text-lg shadow-lg transition-all transform hover:scale-105 border border-gray-700\">\n              <i className=\"fas fa-rocket mr-2\"></i>\n              GET STARTED\n            </Button>\n          </div>\n\n          <button className=\"md:hidden p-3 hover:bg-gray-800 rounded-xl transition-colors\">\n            <i className=\"fas fa-bars text-gray-300 text-xl\"></i>\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2101},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1862},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":823},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}